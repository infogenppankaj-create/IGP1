
/****** Object:  UserDefinedFunction [dbo].[UDF_GET_CODE]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[UDF_GET_CODE] 
(
	@IN_TYPE NVARCHAR(256),
	@IN_SUB_TYPE NVARCHAR(256),
	@IN_PARAM_CODE NVARCHAR(256)
)
RETURNS @RESULTS TABLE (YEAR_CODE NVARCHAR(56), CODE NVARCHAR(56), CR_ID INT, TYPE NVARCHAR(256), SUB_TYPE NVARCHAR(256), PARAM_CODE NVARCHAR(256))
AS
BEGIN
	DECLARE @YEAR NVARCHAR(56), @CODE NVARCHAR(56)
	DECLARE @VALUE1 NVARCHAR(56), @VALUE2 NVARCHAR(56), @VALUE3 NVARCHAR(56)
	DECLARE @CR_ID INT
	-- Patient Registration Code
	IF @IN_TYPE = 'OPD' and @IN_SUB_TYPE = 'REGISTRATION'
		BEGIN
			SELECT @VALUE1 = VALUE1 FROM SYS_PARAMETER WHERE TYPE = @IN_TYPE AND SUB_TYPE = @IN_SUB_TYPE -- AND CODE = @IN_PARAM_CODE
			SELECT @YEAR = YEAR(GETDATE());
			SELECT @CR_ID = (COALESCE(MAX(CR_ID),0) + 1)  FROM PATIENT_REGISTRATION -- Based on Condition
			SET @CODE = CAST(@VALUE1 AS VARCHAR(10)) + '-' + CAST(@YEAR AS VARCHAR(10)) + '/' + CAST(@CR_ID AS VARCHAR(10)) 
		END

	-- Opd Bill Code
	IF @IN_TYPE = 'OPD' and @IN_SUB_TYPE = 'OPDBILL'
		BEGIN
			SELECT @VALUE1 = VALUE1 FROM SYS_PARAMETER WHERE TYPE = @IN_TYPE AND SUB_TYPE = @IN_SUB_TYPE -- AND CODE = @IN_PARAM_CODE
			SELECT @YEAR = YEAR(GETDATE());
			SELECT @CR_ID = (COALESCE(MAX(CR_ID),0) + 1)  FROM OPD_BILL -- Based on Condition
			SET @CODE = CAST(@VALUE1 AS VARCHAR(10)) + '-' + CAST(@YEAR AS VARCHAR(10)) + '/' + CAST(@CR_ID AS VARCHAR(10)) 
		END

	-- IPD Admission
	IF @IN_TYPE = 'IPD' and @IN_SUB_TYPE = 'ADMISSION'
		BEGIN
			SELECT @VALUE1 = VALUE1 FROM SYS_PARAMETER WHERE TYPE = @IN_TYPE AND SUB_TYPE = @IN_SUB_TYPE -- AND CODE = @IN_PARAM_CODE
			SELECT @YEAR = YEAR(GETDATE());
			SELECT @CR_ID = (COALESCE(MAX(CR_ID),0) + 1)  FROM IPD_ADMISSION -- Based on Condition
			SET @CODE = CAST(@VALUE1 AS VARCHAR(10)) + '-' + CAST(@YEAR AS VARCHAR(10)) + '/' + CAST(@CR_ID AS VARCHAR(10)) 
		END

	-- IPD Bill
	IF @IN_TYPE = 'IPD' and @IN_SUB_TYPE = 'IPDBILL'
		BEGIN
			SELECT @VALUE1 = VALUE1 FROM SYS_PARAMETER WHERE TYPE = @IN_TYPE AND SUB_TYPE = @IN_SUB_TYPE -- AND CODE = @IN_PARAM_CODE
			SELECT @YEAR = YEAR(GETDATE());
			SELECT @CR_ID = (COALESCE(MAX(CR_ID),0) + 1)  FROM IPD_BILL -- Based on Condition
			SET @CODE = CAST(@VALUE1 AS VARCHAR(10)) + '-' + CAST(@YEAR AS VARCHAR(10)) + '/' + CAST(@CR_ID AS VARCHAR(10)) 
		END

	-- IPD Bill Final
	IF @IN_TYPE = 'IPD' and @IN_SUB_TYPE = 'IPDBILLFINAL'
		BEGIN
			SELECT @VALUE1 = VALUE1 FROM SYS_PARAMETER WHERE TYPE = @IN_TYPE AND SUB_TYPE = @IN_SUB_TYPE -- AND CODE = @IN_PARAM_CODE
			SELECT @YEAR = YEAR(GETDATE());
			SELECT @CR_ID = (COALESCE(MAX(CR_ID),0) + 1)  FROM IPD_BILL -- Based on Condition
			SET @CODE = CAST(@VALUE1 AS VARCHAR(10)) + '-' + CAST(@YEAR AS VARCHAR(10)) + '/' + CAST(@CR_ID AS VARCHAR(10)) 
		END

	-- IPD Bill Final
	IF @IN_TYPE = 'OPD' and @IN_SUB_TYPE = 'PATIENTADVANCE'
		BEGIN
			SELECT @VALUE1 = VALUE1 FROM SYS_PARAMETER WHERE TYPE = @IN_TYPE AND SUB_TYPE = @IN_SUB_TYPE -- AND CODE = @IN_PARAM_CODE
			SELECT @YEAR = YEAR(GETDATE());
			SELECT @CR_ID = (COALESCE(MAX(CR_ID),0) + 1)  FROM PATIENT_ADVANCE -- Based on Condition
			SET @CODE = CAST(@VALUE1 AS VARCHAR(10)) + '-' + CAST(@YEAR AS VARCHAR(10)) + '/' + CAST(@CR_ID AS VARCHAR(10)) 
		END

	INSERT INTO @RESULTS VALUES (@YEAR, @CODE, @CR_ID,  @IN_TYPE, @IN_SUB_TYPE, @IN_PARAM_CODE)
RETURN
END
GO
/****** Object:  UserDefinedFunction [dbo].[UDF_SPLIT]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   FUNCTION [dbo].[UDF_SPLIT] (@IN_STRING NVARCHAR(1024), @IN_DELIMITER CHAR(1))
RETURNS @RESULTS TABLE (ITEMS NVARCHAR(MAX))
AS
BEGIN
	DECLARE @INDEX INT
	DECLARE @SLICE NVARCHAR(MAX)
	SELECT @INDEX = 1
	WHILE @INDEX !=0
	BEGIN
		SELECT @INDEX = CHARINDEX(@IN_DELIMITER,@IN_STRING)
		IF @INDEX !=0
			SELECT @SLICE = LEFT(@IN_STRING,@INDEX - 1)
		ELSE
			SELECT @SLICE = @IN_STRING
			INSERT INTO @RESULTS(ITEMS) VALUES(@SLICE)
			SELECT @IN_STRING = RIGHT(@IN_STRING,LEN(@IN_STRING) - @INDEX)
			IF LEN(@IN_STRING) = 0 BREAK
	END
RETURN
END
GO
/****** Object:  Table [dbo].[IPD_ADMISSION]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[IPD_ADMISSION](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[YEAR_ID] [nvarchar](56) NULL,
	[CR_ID] [int] NULL,
	[CODE] [nvarchar](56) NULL,
	[PID] [int] NULL,
	[ADMISSION_DR_ID] [int] NULL,
	[ADMISSION_DT] [datetime] NULL,
	[ADMISSION_STATUS_ID] [int] NULL,
	[ADMISSION_CATEGORY_ID] [int] NULL,
	[SERVICE_CATEGORY_ID] [int] NULL,
	[PAYER_ID] [int] NULL,
	[BED_ID] [int] NULL,
	[KIN_NAME] [nvarchar](256) NULL,
	[KIN_RELATION_ID] [int] NULL,
	[KIN_MOBILE] [nvarchar](56) NULL,
	[REF_ID] [nvarchar](56) NULL,
	[REF_BY] [nvarchar](256) NULL,
	[REF_HOSPITAL] [nvarchar](256) NULL,
	[DESCRIPTION] [nvarchar](1024) NULL,
	[STATUS] [int] NULL,
	[BRANCH_ID] [int] NULL,
	[CREATED_BY] [int] NULL,
	[CREATED_DT] [datetime] NULL,
	[UPDATED_BY] [int] NULL,
	[UPDATED_DT] [datetime] NULL,
 CONSTRAINT [PK_IPD_ADMISSION] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[IPD_BED_TRANSFER]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[IPD_BED_TRANSFER](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[PID] [int] NULL,
	[AID] [int] NULL,
	[DR_ID] [int] NULL,
	[BED_ID] [int] NULL,
	[TRANSFER_DT] [datetime] NULL,
	[DESCRIPTION] [nvarchar](1024) NULL,
	[STATUS] [int] NULL,
	[BRANCH_ID] [int] NULL,
	[CREATED_BY] [int] NULL,
	[CREATED_DT] [datetime] NULL,
	[UPDATED_BY] [int] NULL,
	[UPDATED_DT] [datetime] NULL,
 CONSTRAINT [PK_IPD_BED_TRANSFER] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[IPD_BILL]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[IPD_BILL](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[YEAR_ID] [nvarchar](56) NULL,
	[CR_ID] [int] NULL,
	[CODE] [nvarchar](56) NULL,
	[BILL_DT] [datetime] NULL,
	[PID] [int] NULL,
	[AID] [int] NULL,
	[ADMISSION_STATUS_ID] [int] NULL,
	[ADMISSION_CATEGORY_ID] [int] NULL,
	[SERVICE_CATEGORY_ID] [int] NULL,
	[PAYER_ID] [int] NULL,
	[BED_ID] [int] NULL,
	[PATIENT_AMOUNT] [decimal](18, 2) NULL,
	[PAYER_AMOUNT] [decimal](18, 2) NULL,
	[BILL_AMOUNT] [decimal](18, 2) NULL,
	[SERVICE_AMOUNT] [decimal](18, 2) NULL,
	[SERVICE_TAX] [decimal](18, 2) NULL,
	[SERVICE_TAX_P] [decimal](18, 2) NULL,
	[SERVICE_DISC] [decimal](18, 2) NULL,
	[SERVICE_DISC_P] [decimal](18, 2) NULL,
	[BILL_TAX] [decimal](18, 2) NULL,
	[BILL_TAX_P] [decimal](18, 2) NULL,
	[BILL_DISC] [decimal](18, 2) NULL,
	[BILL_DISC_P] [decimal](18, 2) NULL,
	[FINAL_TAX] [decimal](18, 2) NULL,
	[FINAL_TAX_P] [decimal](18, 2) NULL,
	[FINAL_DISC] [decimal](18, 2) NULL,
	[FINAL_DISC_P] [decimal](18, 2) NULL,
	[APPROVE_BY] [nvarchar](256) NULL,
	[APPROVE_NOTE] [nvarchar](1024) NULL,
	[DESCRIPTION] [nvarchar](1024) NULL,
	[STATUS] [int] NULL,
	[BRANCH_ID] [int] NULL,
	[CREATED_BY] [int] NULL,
	[CREATED_DT] [datetime] NULL,
	[UPDATED_BY] [int] NULL,
	[UPDATED_DT] [datetime] NULL,
 CONSTRAINT [PK_IPD_BILL] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[IPD_BILL_DTL]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[IPD_BILL_DTL](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[BILL_ID] [int] NULL,
	[BILL_CODE] [nvarchar](56) NULL,
	[PACKAGE_ID] [int] NULL,
	[SERVICE_DT_FROM] [datetime] NULL,
	[SERVICE_DT_TO] [datetime] NULL,
	[SERVICE_CHARGE_ID] [int] NULL,
	[SERVICE_ID] [int] NULL,
	[DR_ID] [int] NULL,
	[PATIENT_AMOUNT] [decimal](18, 2) NULL,
	[PAYER_AMOUNT] [decimal](18, 2) NULL,
	[SERVICE_TOTAL] [decimal](18, 2) NULL,
	[QUANTITY] [int] NULL,
	[SERVICE_AMOUNT] [decimal](18, 2) NULL,
	[H_AMOUNT] [decimal](18, 2) NULL,
	[DR_AMOUNT] [decimal](18, 2) NULL,
	[OTH_AMOUNT] [decimal](18, 2) NULL,
	[SERVICE_TAX] [decimal](18, 2) NULL,
	[SERVICE_TAX_P] [decimal](18, 2) NULL,
	[SERVICE_DISC] [decimal](18, 2) NULL,
	[SERVICE_DISC_P] [decimal](18, 2) NULL,
	[BILL_TAX] [decimal](18, 2) NULL,
	[BILL_TAX_P] [decimal](18, 2) NULL,
	[BILL_DISC] [decimal](18, 2) NULL,
	[BILL_DISC_P] [decimal](18, 2) NULL,
	[FINAL_TAX] [decimal](18, 2) NULL,
	[FINAL_TAX_P] [decimal](18, 2) NULL,
	[FINAL_DISC] [decimal](18, 2) NULL,
	[FINAL_DISC_P] [decimal](18, 2) NULL,
	[R_SERVICE_AMOUNT] [decimal](18, 2) NULL,
	[R_DR_AMOUNT] [decimal](18, 2) NULL,
	[R_H_AMOUNT] [decimal](18, 2) NULL,
	[R_OTH_AMOUNT] [decimal](18, 2) NULL,
	[R_SERVICE_CHARGE] [decimal](18, 2) NULL,
	[R_DR_CHARGE] [decimal](18, 2) NULL,
	[R_H_CHARGE] [decimal](18, 2) NULL,
	[R_OTH_CHARGE] [decimal](18, 2) NULL,
	[R_ORG_TAX] [decimal](18, 2) NULL,
	[R_ORG_TAX_P] [decimal](18, 2) NULL,
	[R_ORG_DISC] [decimal](18, 2) NULL,
	[R_ORG_DISC_P] [decimal](18, 2) NULL,
	[DISCOUNT_BY] [int] NULL,
	[DISCOUNT_DESCRIPTION] [nvarchar](1024) NULL,
	[DESCRIPTION] [nvarchar](1024) NULL,
	[STATUS] [int] NULL,
	[BRANCH_ID] [int] NULL,
	[CREATED_BY] [int] NULL,
	[CREATED_DT] [datetime] NULL,
	[UPDATED_BY] [int] NULL,
	[UPDATED_DT] [datetime] NULL,
 CONSTRAINT [PK_IPD_BILL_DTL] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[IPD_BILL_FINAL]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[IPD_BILL_FINAL](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[YEAR_ID] [nvarchar](56) NULL,
	[CR_ID] [int] NULL,
	[CODE] [nvarchar](56) NULL,
	[BILL_DT] [datetime] NULL,
	[PID] [int] NULL,
	[AID] [int] NULL,
	[RECEIVED_AMOUNT] [decimal](18, 2) NULL,
	[PATIENT_AMOUNT] [decimal](18, 2) NULL,
	[PAYER_AMOUNT] [decimal](18, 2) NULL,
	[PAYBLE_AMOUNT] [decimal](18, 2) NULL,
	[BILL_AMOUNT] [decimal](18, 2) NULL,
	[BILL_PATIENT_AMOUNT] [decimal](18, 2) NULL,
	[BILL_PAYER_AMOUNT] [decimal](18, 2) NULL,
	[SERVICE_AMOUNT] [decimal](18, 2) NULL,
	[DR_CHARGE] [decimal](18, 2) NULL,
	[H_CHARGE] [decimal](18, 2) NULL,
	[OTH_CHARGE] [decimal](18, 2) NULL,
	[SERVICE_TAX] [decimal](18, 2) NULL,
	[SERVICE_TAX_P] [decimal](18, 2) NULL,
	[SERVICE_DISC] [decimal](18, 2) NULL,
	[SERVICE_DISC_P] [decimal](18, 2) NULL,
	[BILL_TAX] [decimal](18, 2) NULL,
	[BILL_TAX_P] [decimal](18, 2) NULL,
	[BILL_DISC] [decimal](18, 2) NULL,
	[BILL_DISC_P] [decimal](18, 2) NULL,
	[FINAL_TAX] [decimal](18, 2) NULL,
	[FINAL_TAX_P] [decimal](18, 2) NULL,
	[FINAL_DISC] [decimal](18, 2) NULL,
	[FINAL_DISC_P] [decimal](18, 2) NULL,
	[TOTAL_TAX] [decimal](18, 2) NULL,
	[TOTAL_TAX_P] [decimal](18, 2) NULL,
	[TOTAL_DISC] [decimal](18, 2) NULL,
	[TOTAL_DISC_P] [decimal](18, 2) NULL,
	[R_SERVICE_AMOUNT] [decimal](18, 2) NULL,
	[R_SERVICE_CHARGE] [decimal](18, 2) NULL,
	[R_DR_CHARGE] [decimal](18, 2) NULL,
	[R_H_CHARGE] [decimal](18, 2) NULL,
	[R_OTH_CHARGE] [decimal](18, 2) NULL,
	[R_SERVICE_TAX] [decimal](18, 2) NULL,
	[R_SERVICE_TAX_P] [decimal](18, 2) NULL,
	[R_SERVICE_DISC] [decimal](18, 2) NULL,
	[R_SERVICE_DISC_P] [decimal](18, 2) NULL,
	[ORDER_BY] [int] NULL,
	[ORDER_NOTE] [nvarchar](2024) NULL,
	[DESCRIPTION] [nvarchar](2024) NULL,
	[STATUS] [int] NULL,
	[BRANCH_ID] [int] NULL,
	[CREATED_BY] [int] NULL,
	[CREATED_DT] [datetime] NULL,
	[UPDATED_BY] [int] NULL,
	[UPDATED_DT] [datetime] NULL,
 CONSTRAINT [PK_IPD_BILL_FINAL] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[IPD_CHANGE_PAYER]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[IPD_CHANGE_PAYER](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[PID] [int] NULL,
	[AID] [int] NULL,
	[APPROVAL_ID] [int] NULL,
	[PAYER_ID] [int] NULL,
	[CHANGE_DT] [datetime] NULL,
	[DESCRIPTION] [nvarchar](1024) NULL,
	[STATUS] [int] NULL,
	[BRANCH_ID] [int] NULL,
	[CREATED_BY] [int] NULL,
	[CREATED_DT] [datetime] NULL,
	[UPDATED_BY] [int] NULL,
	[UPDATED_DT] [datetime] NULL,
 CONSTRAINT [PK_IPD_CHANGE_PAYER] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[IPD_DR_TRANSFER]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[IPD_DR_TRANSFER](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[PID] [int] NULL,
	[AID] [int] NULL,
	[APPROVAL_ID] [int] NULL,
	[DR_ID] [int] NULL,
	[TRANSFER_DT] [datetime] NULL,
	[DESCRIPTION] [nvarchar](1024) NULL,
	[STATUS] [int] NULL,
	[BRANCH_ID] [int] NULL,
	[CREATED_BY] [int] NULL,
	[CREATED_DT] [datetime] NULL,
	[UPDATED_BY] [int] NULL,
	[UPDATED_DT] [datetime] NULL,
 CONSTRAINT [PK_IPD_DR_TRANSFER] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[IPD_PATIENT_DISCHARGE]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[IPD_PATIENT_DISCHARGE](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[PID] [int] NULL,
	[AID] [int] NULL,
	[APPROVAL_ID] [int] NULL,
	[DISCHARGE_STATUS_ID] [int] NULL,
	[DISCHARGE_DT] [datetime] NULL,
	[DESCRIPTION] [nvarchar](max) NULL,
	[STATUS] [int] NULL,
	[BRANCH_ID] [int] NULL,
	[CREATED_BY] [int] NULL,
	[CREATED_DT] [datetime] NULL,
	[UPDATED_BY] [int] NULL,
	[UPDATED_DT] [datetime] NULL,
 CONSTRAINT [PK_IPD_PATIENT_DISCHARGE] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[OPD_BILL]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[OPD_BILL](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[YEAR_ID] [nvarchar](56) NULL,
	[CR_ID] [int] NULL,
	[CODE] [nvarchar](56) NULL,
	[BILL_DT] [datetime] NULL,
	[PID] [int] NULL,
	[REG_CODE] [nvarchar](56) NULL,
	[PAYER_ID] [int] NULL,
	[SERVICE_CATEGORY_ID] [int] NULL,
	[PATIENT_AMOUNT] [decimal](18, 2) NULL,
	[PAYER_AMOUNT] [decimal](18, 2) NULL,
	[RECEIVED_AMOUNT] [decimal](18, 2) NULL,
	[PAYBLE_AMOUNT] [decimal](18, 2) NULL,
	[BILL_AMOUNT] [decimal](18, 2) NULL,
	[SERVICE_AMOUNT] [decimal](18, 2) NULL,
	[SERVICE_TAX] [decimal](18, 2) NULL,
	[SERVICE_TAX_P] [decimal](18, 2) NULL,
	[SERVICE_DISC] [decimal](18, 2) NULL,
	[SERVICE_DISC_P] [decimal](18, 2) NULL,
	[BILL_TAX] [decimal](18, 2) NULL,
	[BILL_TAX_P] [decimal](18, 2) NULL,
	[BILL_DISC] [decimal](18, 2) NULL,
	[BILL_DISC_P] [decimal](18, 2) NULL,
	[FINAL_TAX] [decimal](18, 2) NULL,
	[FINAL_TAX_P] [decimal](18, 2) NULL,
	[FINAL_DISC] [decimal](18, 2) NULL,
	[FINAL_DISC_P] [decimal](18, 2) NULL,
	[DESCRIPTION] [nvarchar](1024) NULL,
	[STATUS] [int] NULL,
	[BRANCH_ID] [int] NULL,
	[CREATED_BY] [int] NULL,
	[CREATED_DT] [datetime] NULL,
	[UPDATED_BY] [int] NULL,
	[UPDATED_DT] [datetime] NULL,
 CONSTRAINT [PK_OPD_BILL] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[OPD_BILL_DTL]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[OPD_BILL_DTL](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[BILL_ID] [int] NULL,
	[BILL_CODE] [nvarchar](56) NULL,
	[SERVICE_CHARGE_ID] [int] NULL,
	[SERVICE_ID] [int] NULL,
	[DR_ID] [int] NULL,
	[PATIENT_AMOUNT] [decimal](18, 2) NULL,
	[PAYER_AMOUNT] [decimal](18, 2) NULL,
	[SERVICE_TOTAL] [decimal](18, 2) NULL,
	[QUANTITY] [int] NULL,
	[SERVICE_AMOUNT] [decimal](18, 2) NULL,
	[H_AMOUNT] [decimal](18, 2) NULL,
	[DR_AMOUNT] [decimal](18, 2) NULL,
	[OTH_AMOUNT] [decimal](18, 2) NULL,
	[SERVICE_TAX] [decimal](18, 2) NULL,
	[SERVICE_TAX_P] [decimal](18, 2) NULL,
	[SERVICE_DISC] [decimal](18, 2) NULL,
	[SERVICE_DISC_P] [decimal](18, 2) NULL,
	[BILL_TAX] [decimal](18, 2) NULL,
	[BILL_TAX_P] [decimal](18, 2) NULL,
	[BILL_DISC] [decimal](18, 2) NULL,
	[BILL_DISC_P] [decimal](18, 2) NULL,
	[FINAL_TAX] [decimal](18, 2) NULL,
	[FINAL_TAX_P] [decimal](18, 2) NULL,
	[FINAL_DISC] [decimal](18, 2) NULL,
	[FINAL_DISC_P] [decimal](18, 2) NULL,
	[R_SERVICE_AMOUNT] [decimal](18, 2) NULL,
	[R_DR_AMOUNT] [decimal](18, 2) NULL,
	[R_H_AMOUNT] [decimal](18, 2) NULL,
	[R_OTH_AMOUNT] [decimal](18, 2) NULL,
	[R_SERVICE_CHARGE] [decimal](18, 2) NULL,
	[R_DR_CHARGE] [decimal](18, 2) NULL,
	[R_H_CHARGE] [decimal](18, 2) NULL,
	[R_OTH_CHARGE] [decimal](18, 2) NULL,
	[R_ORG_TAX] [decimal](18, 2) NULL,
	[R_ORG_TAX_P] [decimal](18, 2) NULL,
	[R_ORG_DISC] [decimal](18, 2) NULL,
	[R_ORG_DISC_P] [decimal](18, 2) NULL,
	[DESCRIPTION] [nvarchar](1024) NULL,
	[STATUS] [int] NULL,
	[BRANCH_ID] [int] NULL,
	[CREATED_BY] [int] NULL,
	[CREATED_DT] [datetime] NULL,
	[UPDATED_BY] [int] NULL,
	[UPDATED_DT] [datetime] NULL,
 CONSTRAINT [PK_OPD_BILL_DTL] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PATIENT_ADVANCE]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PATIENT_ADVANCE](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[YEAR_ID] [nvarchar](56) NULL,
	[CR_ID] [int] NULL,
	[CODE] [nvarchar](56) NULL,
	[BILL_DT] [datetime] NULL,
	[PID] [int] NULL,
	[ADVANCE_AMOUNT] [decimal](18, 2) NULL,
	[ADVANCE_STATUS] [int] NULL,
	[REF_BILL] [nvarchar](56) NULL,
	[RECEIVED_BY] [nvarchar](256) NULL,
	[RECEIVED_NOTE] [nvarchar](1024) NULL,
	[DESCRIPTION] [nvarchar](1024) NULL,
	[STATUS] [int] NULL,
	[BRANCH_ID] [int] NULL,
	[CREATED_BY] [int] NULL,
	[CREATED_DT] [datetime] NULL,
	[UPDATED_BY] [int] NULL,
	[UPDATED_DT] [datetime] NULL,
 CONSTRAINT [PK_PATIENT_ADVANCE] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PATIENT_DUES]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PATIENT_DUES](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[YEAR_ID] [nvarchar](56) NULL,
	[CR_ID] [int] NULL,
	[CODE] [nvarchar](56) NULL,
	[BILL_DT] [datetime] NULL,
	[PID] [int] NULL,
	[AID] [int] NULL,
	[DUES_AMOUNT] [decimal](18, 2) NULL,
	[DUES_STATUS] [int] NULL,
	[REF_BILL] [nvarchar](56) NULL,
	[APPROVED_BY] [nvarchar](256) NULL,
	[APPROVED_NOTE] [nvarchar](1024) NULL,
	[DESCRIPTION] [nvarchar](1024) NULL,
	[STATUS] [int] NULL,
	[BRANCH_ID] [int] NULL,
	[CREATED_BY] [int] NULL,
	[CREATED_DT] [datetime] NULL,
	[UPDATED_BY] [int] NULL,
	[UPDATED_DT] [datetime] NULL,
 CONSTRAINT [PK_PATIENT_DUES] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PATIENT_REGISTRATION]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PATIENT_REGISTRATION](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[YEAR_ID] [nvarchar](56) NULL,
	[CR_ID] [int] NULL,
	[CODE] [nvarchar](56) NULL,
	[NAME] [nvarchar](256) NULL,
	[REGISTRATION_DT] [datetime] NULL,
	[PAYER_ID] [int] NULL,
	[GENDER_ID] [int] NULL,
	[AGE] [nvarchar](56) NULL,
	[DOB] [date] NULL,
	[IDENTITY_TYPE_ID] [int] NULL,
	[UID] [nvarchar](56) NULL,
	[MOBILE] [nvarchar](56) NULL,
	[EMAIL] [nvarchar](56) NULL,
	[BLOOD_GROUP_ID] [int] NULL,
	[HEIGHT] [nvarchar](56) NULL,
	[WEIGHT] [nvarchar](56) NULL,
	[OBESITY] [nvarchar](56) NULL,
	[ADDRESS] [nvarchar](1024) NULL,
	[CITY] [nvarchar](256) NULL,
	[STATE_ID] [int] NULL,
	[COUNTRY_ID] [int] NULL,
	[PIN] [nvarchar](56) NULL,
	[KIN_NAME] [nvarchar](256) NULL,
	[KIN_RELATION_ID] [int] NULL,
	[KIN_MOBILE] [nvarchar](56) NULL,
	[MARITAL_STATUS_ID] [int] NULL,
	[RELIGION_ID] [int] NULL,
	[PATIENT_CATEGORY_ID] [int] NULL,
	[P_ADDRESS] [nvarchar](1024) NULL,
	[P_CITY] [nvarchar](256) NULL,
	[P_STATE_ID] [int] NULL,
	[P_COUNTRY_ID] [int] NULL,
	[P_PIN] [nvarchar](56) NULL,
	[NATIONALITY_ID] [int] NULL,
	[F_NAME] [nvarchar](256) NULL,
	[F_MOBILE] [nvarchar](56) NULL,
	[F_EMAIL] [nvarchar](56) NULL,
	[M_NAME] [nvarchar](256) NULL,
	[M_MOBILE] [nvarchar](56) NULL,
	[M_EMAIL] [nvarchar](56) NULL,
	[S_NAME] [nvarchar](256) NULL,
	[S_MOBILE] [nvarchar](56) NULL,
	[S_EMAIL] [nvarchar](56) NULL,
	[G_NAME] [nvarchar](256) NULL,
	[G_MOBILE] [nvarchar](56) NULL,
	[G_EMAIL] [nvarchar](56) NULL,
	[REF_ID] [nvarchar](56) NULL,
	[REF_BY] [nvarchar](256) NULL,
	[REF_HOSPITAL] [nvarchar](256) NULL,
	[ORG_ID] [nvarchar](56) NULL,
	[ORG_NAME] [nvarchar](256) NULL,
	[ORG_EMP_ID] [varchar](56) NULL,
	[ORG_MOBILE] [nvarchar](56) NULL,
	[ORG_EMAIL] [nvarchar](56) NULL,
	[INS_TYPE] [nvarchar](56) NULL,
	[INS_ID] [nvarchar](56) NULL,
	[MATURITY_DT] [date] NULL,
	[MATURITY_PERIOD] [nvarchar](56) NULL,
	[MATURED_AMOUNT] [decimal](18, 2) NULL,
	[RECOV_AMOUNT] [decimal](18, 2) NULL,
	[EMPLOYMENT_CATEGORY_ID] [nvarchar](56) NULL,
	[SPECIALIZATION] [nvarchar](56) NULL,
	[EMPLOYMENT_STATUS_ID] [int] NULL,
	[EMPLOYMENT_DT] [date] NULL,
	[DESCRIPTION] [nvarchar](1024) NULL,
	[STATUS] [int] NULL,
	[BRANCH_ID] [int] NULL,
	[CREATED_BY] [int] NULL,
	[CREATED_DT] [datetime] NULL,
	[UPDATED_BY] [int] NULL,
	[UPDATED_DT] [datetime] NULL,
 CONSTRAINT [PK_PATIENT_REGISTRATION] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PATIENT_REGISTRATION_IMAGE]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PATIENT_REGISTRATION_IMAGE](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[PID] [int] NULL,
	[PIC] [image] NULL,
	[DESCRIPTION] [nvarchar](1024) NULL,
	[STATUS] [int] NULL,
	[BRANCH_ID] [int] NULL,
	[CREATED_BY] [int] NULL,
	[CREATED_DT] [datetime] NULL,
	[UPDATED_BY] [int] NULL,
	[UPDATED_DT] [datetime] NULL,
 CONSTRAINT [PK_PATIENT_REGISTRATION_IMAGE] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[REF_ADMISSION_CATEGORY]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[REF_ADMISSION_CATEGORY](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[CODE] [nvarchar](56) NULL,
	[NAME] [nvarchar](256) NULL,
	[DESCRIPTION] [nvarchar](1024) NULL,
	[STATUS] [int] NULL,
	[BRANCH_ID] [int] NULL,
	[CREATED_BY] [int] NULL,
	[CREATED_DT] [datetime] NULL,
	[UPDATED_BY] [int] NULL,
	[UPDATED_DT] [datetime] NULL,
 CONSTRAINT [PK_REF_ADMISSION_CATEGORY] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[REF_ADMISSION_STATUS]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[REF_ADMISSION_STATUS](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[CODE] [nvarchar](56) NULL,
	[NAME] [nvarchar](256) NULL,
	[DESCRIPTION] [nvarchar](1024) NULL,
	[STATUS] [int] NULL,
	[BRANCH_ID] [int] NULL,
	[CREATED_BY] [int] NULL,
	[CREATED_DT] [datetime] NULL,
	[UPDATED_BY] [int] NULL,
	[UPDATED_DT] [datetime] NULL,
 CONSTRAINT [PK_REF_ADMISSION_STATUS] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[REF_BED]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[REF_BED](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[CODE] [nvarchar](56) NULL,
	[NAME] [nvarchar](256) NULL,
	[BED_CATEGORY_ID] [int] NULL,
	[WARD_ID] [int] NULL,
	[BED_STATUS_ID] [int] NULL,
	[INCLUDE_OCCUPENCY] [bit] NULL,
	[PHONE] [nvarchar](256) NULL,
	[PHONE2] [nvarchar](256) NULL,
	[DESCRIPTION] [nvarchar](1024) NULL,
	[STATUS] [int] NULL,
	[BRANCH_ID] [int] NULL,
	[CREATED_BY] [int] NULL,
	[CREATED_DT] [datetime] NULL,
	[UPDATED_BY] [int] NULL,
	[UPDATED_DT] [datetime] NULL,
 CONSTRAINT [PK_REF_BED] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[REF_BED_CATEGORY]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[REF_BED_CATEGORY](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[CODE] [nvarchar](56) NULL,
	[NAME] [nvarchar](256) NULL,
	[SERVICE_ID] [int] NULL,
	[DESCRIPTION] [nvarchar](1024) NULL,
	[STATUS] [int] NULL,
	[BRANCH_ID] [int] NULL,
	[CREATED_BY] [int] NULL,
	[CREATED_DT] [datetime] NULL,
	[UPDATED_BY] [int] NULL,
	[UPDATED_DT] [datetime] NULL,
 CONSTRAINT [PK_REF_BED_CATEGORY] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[REF_BED_STATUS]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[REF_BED_STATUS](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[CODE] [nvarchar](56) NULL,
	[NAME] [nvarchar](256) NULL,
	[DESCRIPTION] [nvarchar](1024) NULL,
	[STATUS] [int] NULL,
	[BRANCH_ID] [int] NULL,
	[CREATED_BY] [int] NULL,
	[CREATED_DT] [datetime] NULL,
	[UPDATED_BY] [int] NULL,
	[UPDATED_DT] [datetime] NULL,
 CONSTRAINT [PK_REF_BED_STATUS] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[REF_BLOOD_GROUP]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[REF_BLOOD_GROUP](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[CODE] [nvarchar](56) NULL,
	[NAME] [nvarchar](256) NULL,
	[DESCRIPTION] [nvarchar](1024) NULL,
	[STATUS] [int] NULL,
	[BRANCH_ID] [int] NULL,
	[CREATED_BY] [int] NULL,
	[CREATED_DT] [datetime] NULL,
	[UPDATED_BY] [int] NULL,
	[UPDATED_DT] [datetime] NULL,
 CONSTRAINT [PK_REF_BLOOD_GROUP] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[REF_COMPANY]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[REF_COMPANY](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[CODE] [nvarchar](56) NULL,
	[NAME] [nvarchar](256) NULL,
	[TARIFF_ID] [int] NULL,
	[APPROVAL_REQUIRED] [bit] NULL,
	[ADDRESS] [nvarchar](1024) NULL,
	[MOBILE] [nvarchar](256) NULL,
	[EMAIL] [nvarchar](256) NULL,
	[FAX] [nvarchar](256) NULL,
	[WEBSITE] [nvarchar](256) NULL,
	[CONTACT_NAME1] [nvarchar](256) NULL,
	[DESIGNATION1] [nvarchar](256) NULL,
	[MOBILE1] [nvarchar](256) NULL,
	[EMAIL1] [nvarchar](256) NULL,
	[CONTACT_NAME2] [nvarchar](256) NULL,
	[DESIGNATION2] [nvarchar](256) NULL,
	[MOBILE2] [nvarchar](256) NULL,
	[EMAIL2] [nvarchar](256) NULL,
	[DESCRIPTION] [nvarchar](1024) NULL,
	[STATUS] [int] NULL,
	[BRANCH_ID] [int] NULL,
	[CREATED_BY] [int] NULL,
	[CREATED_DT] [datetime] NULL,
	[UPDATED_BY] [int] NULL,
	[UPDATED_DT] [datetime] NULL,
 CONSTRAINT [PK_REF_COMPANY] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[REF_COUNTRY]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[REF_COUNTRY](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[CODE] [nvarchar](56) NULL,
	[NAME] [nvarchar](256) NULL,
	[NATIONALITY] [nvarchar](256) NULL,
	[DESCRIPTION] [nvarchar](1024) NULL,
	[STATUS] [int] NULL,
	[BRANCH_ID] [int] NULL,
	[CREATED_BY] [int] NULL,
	[CREATED_DT] [datetime] NULL,
	[UPDATED_BY] [int] NULL,
	[UPDATED_DT] [datetime] NULL,
 CONSTRAINT [PK_REF_COUNTRY] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[REF_DEPARTMENT]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[REF_DEPARTMENT](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[CODE] [nvarchar](56) NULL,
	[NAME] [nvarchar](256) NULL,
	[DEPARTMENT_CATEGORY_ID] [int] NULL,
	[DESCRIPTION] [nvarchar](1024) NULL,
	[STATUS] [int] NULL,
	[BRANCH_ID] [int] NULL,
	[CREATED_BY] [int] NULL,
	[CREATED_DT] [datetime] NULL,
	[UPDATED_BY] [int] NULL,
	[UPDATED_DT] [datetime] NULL,
 CONSTRAINT [PK_REF_DEPARTMENT] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[REF_DEPARTMENT_CATEGORY]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[REF_DEPARTMENT_CATEGORY](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[CODE] [nvarchar](56) NULL,
	[NAME] [nvarchar](256) NULL,
	[DESCRIPTION] [nvarchar](1024) NULL,
	[STATUS] [int] NULL,
	[BRANCH_ID] [int] NULL,
	[CREATED_BY] [int] NULL,
	[CREATED_DT] [datetime] NULL,
	[UPDATED_BY] [int] NULL,
	[UPDATED_DT] [datetime] NULL,
 CONSTRAINT [PK_REF_DEPARTMENT_CATEGORY] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[REF_DESIGNATION]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[REF_DESIGNATION](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[CODE] [nvarchar](56) NULL,
	[NAME] [nvarchar](256) NULL,
	[DESCRIPTION] [nvarchar](1024) NULL,
	[STATUS] [int] NULL,
	[BRANCH_ID] [int] NULL,
	[CREATED_BY] [int] NULL,
	[CREATED_DT] [datetime] NULL,
	[UPDATED_BY] [int] NULL,
	[UPDATED_DT] [datetime] NULL,
 CONSTRAINT [PK_REF_DESIGNATION] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[REF_EMPLOYEE]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[REF_EMPLOYEE](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[CODE] [nvarchar](56) NULL,
	[NAME] [nvarchar](256) NULL,
	[IDENTITY_TYPE_ID] [int] NULL,
	[UID] [nvarchar](56) NULL,
	[GENDER_ID] [int] NULL,
	[DOB] [date] NULL,
	[DESIGNATION_ID] [int] NULL,
	[DEPARTMENT_ID] [int] NULL,
	[JOB_TITLE_ID] [int] NULL,
	[MANAGER_ID] [int] NULL,
	[EMPLOYMENT_CATEGORY_ID] [int] NULL,
	[SPECIALIZATION_ID] [int] NULL,
	[EMPLOYMENT_STATUS_ID] [int] NULL,
	[DOJ] [date] NULL,
	[MOBILE] [nvarchar](56) NULL,
	[MOBILE2] [nvarchar](56) NULL,
	[EMAIL] [nvarchar](256) NULL,
	[EMAIL2] [nvarchar](256) NULL,
	[C_ADDRESS] [nvarchar](1024) NULL,
	[C_CITY] [nvarchar](256) NULL,
	[C_STATE_ID] [int] NULL,
	[C_COUNTRY_ID] [int] NULL,
	[C_PIN] [nvarchar](56) NULL,
	[P_ADDRESS] [nvarchar](1024) NULL,
	[P_CITY] [nvarchar](256) NULL,
	[P_STATE_ID] [int] NULL,
	[P_COUNTRY_ID] [int] NULL,
	[P_PIN] [nvarchar](56) NULL,
	[NATIONALITY_ID] [int] NULL,
	[RELIGION_ID] [int] NULL,
	[F_NAME] [nvarchar](256) NULL,
	[F_MOBILE] [nvarchar](56) NULL,
	[F_EMAIL] [nvarchar](256) NULL,
	[M_NAME] [nvarchar](256) NULL,
	[M_MOBILE] [nvarchar](56) NULL,
	[M_EMAIL] [nvarchar](256) NULL,
	[S_NAME] [nvarchar](256) NULL,
	[S_MOBILE] [nvarchar](56) NULL,
	[S_EMAIL] [nvarchar](256) NULL,
	[G_NAME] [nvarchar](256) NULL,
	[G_MOBILE] [nvarchar](56) NULL,
	[G_EMAIL] [nvarchar](256) NULL,
	[DESCRIPTION] [nvarchar](1024) NULL,
	[STATUS] [int] NULL,
	[BRANCH_ID] [int] NULL,
	[CREATED_BY] [int] NULL,
	[CREATED_DT] [datetime] NULL,
	[UPDATED_BY] [int] NULL,
	[UPDATED_DT] [datetime] NULL,
 CONSTRAINT [PK_REF_EMPLOYEE] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[REF_EMPLOYEE_H]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[REF_EMPLOYEE_H](
	[H_ID] [int] IDENTITY(1,1) NOT NULL,
	[ID] [int] NULL,
	[CODE] [nvarchar](56) NULL,
	[NAME] [nvarchar](256) NULL,
	[IDENTITY_TYPE_ID] [int] NULL,
	[UID] [nvarchar](56) NULL,
	[GENDER] [int] NULL,
	[DOB] [datetime] NULL,
	[DESIGNATION_ID] [int] NULL,
	[DEPARTMENT_ID] [int] NULL,
	[JOB_TITLE_ID] [int] NULL,
	[MANAGER_ID] [int] NULL,
	[EMPLOYMENT_CATEGORY_ID] [int] NULL,
	[SPECIALIZATION] [int] NULL,
	[EMPLOYMENT_STATUS_ID] [int] NULL,
	[DOJ] [datetime] NULL,
	[MOBILE] [nvarchar](56) NULL,
	[MOBILE2] [nvarchar](56) NULL,
	[EMAIL] [nvarchar](256) NULL,
	[EMAIL2] [nvarchar](256) NULL,
	[C_ADDRESS] [nvarchar](1024) NULL,
	[C_CITY] [nvarchar](256) NULL,
	[C_STATE] [int] NULL,
	[C_COUNTRY] [int] NULL,
	[C_PIN] [nvarchar](56) NULL,
	[P_ADDRESS] [nvarchar](1024) NULL,
	[P_CITY] [nvarchar](256) NULL,
	[P_STATE] [int] NULL,
	[P_COUNTRY] [int] NULL,
	[P_PIN] [nvarchar](56) NULL,
	[NATIONALITY] [int] NULL,
	[RELIGION] [int] NULL,
	[F_NAME] [nvarchar](256) NULL,
	[F_MOBILE] [nvarchar](56) NULL,
	[F_EMAIL] [nvarchar](256) NULL,
	[M_NAME] [nvarchar](256) NULL,
	[M_MOBILE] [nvarchar](56) NULL,
	[M_EMAIL] [nvarchar](256) NULL,
	[S_NAME] [nvarchar](256) NULL,
	[S_MOBILE] [nvarchar](56) NULL,
	[S_EMAIL] [nvarchar](256) NULL,
	[G_NAME] [nvarchar](256) NULL,
	[G_MOBILE] [nvarchar](56) NULL,
	[G_EMAIL] [nvarchar](256) NULL,
	[DESCRIPTION] [nvarchar](1024) NULL,
	[STATUS] [int] NULL,
	[BRANCH_ID] [int] NULL,
	[CREATED_BY] [int] NULL,
	[CREATED_DT] [datetime] NULL,
	[UPDATED_BY] [int] NULL,
	[UPDATED_DT] [datetime] NULL,
 CONSTRAINT [PK_REF_EMPLOYEE_H] PRIMARY KEY CLUSTERED 
(
	[H_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[REF_EMPLOYMENT_CATEGORY]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[REF_EMPLOYMENT_CATEGORY](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[CODE] [nvarchar](56) NULL,
	[NAME] [nvarchar](256) NULL,
	[DESCRIPTION] [nvarchar](1024) NULL,
	[STATUS] [int] NULL,
	[BRANCH_ID] [int] NULL,
	[CREATED_BY] [int] NULL,
	[CREATED_DT] [datetime] NULL,
	[UPDATED_BY] [int] NULL,
	[UPDATED_DT] [datetime] NULL,
 CONSTRAINT [PK_REF_EMPLOYMENT_CATEGORY] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[REF_EMPLOYMENT_CATEGORY_SPECIALIZATION]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[REF_EMPLOYMENT_CATEGORY_SPECIALIZATION](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[EMPLOYMENT_CATEGORY_ID] [int] NULL,
	[CODE] [nvarchar](56) NULL,
	[NAME] [nvarchar](256) NULL,
	[DESCRIPTION] [nvarchar](1024) NULL,
	[STATUS] [int] NULL,
	[BRANCH_ID] [int] NULL,
	[CREATED_BY] [int] NULL,
	[CREATED_DT] [datetime] NULL,
	[UPDATED_BY] [int] NULL,
	[UPDATED_DT] [datetime] NULL,
 CONSTRAINT [PK_REF_EMPLOYMENT_CATEGORY_SPECIALIZATION] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[REF_EMPLOYMENT_STATUS]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[REF_EMPLOYMENT_STATUS](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[CODE] [nvarchar](56) NULL,
	[NAME] [nvarchar](256) NULL,
	[DESCRIPTION] [nvarchar](1024) NULL,
	[STATUS] [int] NULL,
	[BRANCH_ID] [int] NULL,
	[CREATED_BY] [int] NULL,
	[CREATED_DT] [datetime] NULL,
	[UPDATED_BY] [int] NULL,
	[UPDATED_DT] [datetime] NULL,
 CONSTRAINT [PK_REF_EMPLOYMENT_STATUS] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[REF_GENDER]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[REF_GENDER](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[CODE] [nvarchar](56) NULL,
	[NAME] [nvarchar](256) NULL,
	[DESCRIPTION] [nvarchar](1024) NULL,
	[STATUS] [int] NULL,
	[BRANCH_ID] [int] NULL,
	[CREATED_BY] [int] NULL,
	[CREATED_DT] [datetime] NULL,
	[UPDATED_BY] [int] NULL,
	[UPDATED_DT] [datetime] NULL,
 CONSTRAINT [PK_REF_GENDER] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[REF_IDENTITY_TYPE]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[REF_IDENTITY_TYPE](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[CODE] [nvarchar](56) NULL,
	[NAME] [nvarchar](256) NULL,
	[DESCRIPTION] [nvarchar](1024) NULL,
	[STATUS] [int] NULL,
	[BRANCH_ID] [int] NULL,
	[CREATED_BY] [int] NULL,
	[CREATED_DT] [datetime] NULL,
	[UPDATED_BY] [int] NULL,
	[UPDATED_DT] [datetime] NULL,
 CONSTRAINT [PK_REF_IDENTITY_TYPE] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[REF_JOB_TITLE]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[REF_JOB_TITLE](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[CODE] [nvarchar](56) NULL,
	[NAME] [nvarchar](256) NULL,
	[DESCRIPTION] [nvarchar](1024) NULL,
	[STATUS] [int] NULL,
	[BRANCH_ID] [int] NULL,
	[CREATED_BY] [int] NULL,
	[CREATED_DT] [datetime] NULL,
	[UPDATED_BY] [int] NULL,
	[UPDATED_DT] [datetime] NULL,
 CONSTRAINT [PK_REF_JOB_TITLE] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[REF_MARITAL_STATUS]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[REF_MARITAL_STATUS](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[CODE] [nvarchar](56) NULL,
	[NAME] [nvarchar](256) NULL,
	[DESCRIPTION] [nvarchar](1024) NULL,
	[STATUS] [int] NULL,
	[BRANCH_ID] [int] NULL,
	[CREATED_BY] [int] NULL,
	[CREATED_DT] [datetime] NULL,
	[UPDATED_BY] [int] NULL,
	[UPDATED_DT] [datetime] NULL,
 CONSTRAINT [PK_REF_MARITAL_STATUS] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[REF_PATIENT_CATEGORY]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[REF_PATIENT_CATEGORY](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[CODE] [nvarchar](56) NULL,
	[NAME] [nvarchar](256) NULL,
	[DESCRIPTION] [nvarchar](1024) NULL,
	[STATUS] [int] NULL,
	[BRANCH_ID] [int] NULL,
	[CREATED_BY] [int] NULL,
	[CREATED_DT] [datetime] NULL,
	[UPDATED_BY] [int] NULL,
	[UPDATED_DT] [datetime] NULL,
 CONSTRAINT [PK_REF_PATIENT_CATEGORY] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[REF_RELATION]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[REF_RELATION](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[CODE] [nvarchar](56) NULL,
	[NAME] [nvarchar](256) NULL,
	[DESCRIPTION] [nvarchar](1024) NULL,
	[STATUS] [int] NULL,
	[BRANCH_ID] [int] NULL,
	[CREATED_BY] [int] NULL,
	[CREATED_DT] [datetime] NULL,
	[UPDATED_BY] [int] NULL,
	[UPDATED_DT] [datetime] NULL,
 CONSTRAINT [PK_REF_RELATION] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[REF_RELIGION]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[REF_RELIGION](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[CODE] [nvarchar](56) NULL,
	[NAME] [nvarchar](256) NULL,
	[DESCRIPTION] [nvarchar](1024) NULL,
	[STATUS] [int] NULL,
	[BRANCH_ID] [int] NULL,
	[CREATED_BY] [int] NULL,
	[CREATED_DT] [datetime] NULL,
	[UPDATED_BY] [int] NULL,
	[UPDATED_DT] [datetime] NULL,
 CONSTRAINT [PK_REF_RELIGION] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[REF_SERVICE]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[REF_SERVICE](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[DEPARTMENT_ID] [int] NULL,
	[SUB_DEPARTMENT_ID] [int] NULL,
	[CODE] [nvarchar](56) NULL,
	[NAME] [nvarchar](256) NULL,
	[SERVICE_GROUP_ID] [int] NULL,
	[BILLING_MESSAGE] [varchar](1024) NULL,
	[SHOW_MESSAGE] [int] NULL,
	[DR_REQUIRED] [int] NULL,
	[DR_ID] [int] NULL,
	[DESCRIPTION] [nvarchar](1024) NULL,
	[STATUS] [int] NULL,
	[BRANCH_ID] [int] NULL,
	[CREATED_BY] [int] NULL,
	[CREATED_DT] [datetime] NULL,
	[UPDATED_BY] [int] NULL,
	[UPDATED_DT] [datetime] NULL,
 CONSTRAINT [PK_REF_SERVICE] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[REF_SERVICE_CATEGORY]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[REF_SERVICE_CATEGORY](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[CODE] [nvarchar](56) NULL,
	[NAME] [nvarchar](256) NULL,
	[DESCRIPTION] [nvarchar](1024) NULL,
	[STATUS] [int] NULL,
	[BRANCH_ID] [int] NULL,
	[CREATED_BY] [int] NULL,
	[CREATED_DT] [datetime] NULL,
	[UPDATED_BY] [int] NULL,
	[UPDATED_DT] [datetime] NULL,
 CONSTRAINT [PK_REF_SERVICE_CATEGORY] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[REF_SERVICE_CHARGE]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[REF_SERVICE_CHARGE](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[TARIFF_ID] [int] NULL,
	[SERVICE_ID] [int] NULL,
	[SERVICE_CATEGORY_ID] [int] NULL,
	[SERVICE_AMOUNT] [decimal](18, 2) NULL,
	[DR_AMOUNT] [decimal](18, 2) NULL,
	[H_AMOUNT] [decimal](18, 2) NULL,
	[OTH_AMOUNT] [decimal](18, 2) NULL,
	[SERVICE_CHARGE] [decimal](18, 2) NULL,
	[DR_CHARGE] [decimal](18, 2) NULL,
	[H_CHARGE] [decimal](18, 2) NULL,
	[OTH_CHARGE] [decimal](18, 2) NULL,
	[ORG_TAX] [decimal](18, 2) NULL,
	[ORG_TAX_P] [decimal](18, 2) NULL,
	[ORG_DISC] [decimal](18, 2) NULL,
	[ORG_DISC_P] [decimal](18, 2) NULL,
	[DESCRIPTION] [nvarchar](1024) NULL,
	[STATUS] [int] NULL,
	[BRANCH_ID] [int] NULL,
	[CREATED_BY] [int] NULL,
	[CREATED_DT] [datetime] NULL,
	[UPDATED_BY] [int] NULL,
	[UPDATED_DT] [datetime] NULL,
 CONSTRAINT [PK_REF_SERVICE_CHARGE] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[REF_SERVICE_GROUP]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[REF_SERVICE_GROUP](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[CODE] [nvarchar](56) NULL,
	[NAME] [nvarchar](256) NULL,
	[DESCRIPTION] [nvarchar](1024) NULL,
	[STATUS] [int] NULL,
	[BRANCH_ID] [int] NULL,
	[CREATED_BY] [int] NULL,
	[CREATED_DT] [datetime] NULL,
	[UPDATED_BY] [int] NULL,
	[UPDATED_DT] [datetime] NULL,
 CONSTRAINT [PK_REF_SERVICE_GROUP] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[REF_STATE]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[REF_STATE](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[CODE] [nvarchar](56) NULL,
	[NAME] [nvarchar](256) NULL,
	[DESCRIPTION] [nvarchar](1024) NULL,
	[STATUS] [int] NULL,
	[BRANCH_ID] [int] NULL,
	[CREATED_BY] [int] NULL,
	[CREATED_DT] [datetime] NULL,
	[UPDATED_BY] [int] NULL,
	[UPDATED_DT] [datetime] NULL,
 CONSTRAINT [PK_REF_STATE] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[REF_STATUS]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[REF_STATUS](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[CODE] [nvarchar](56) NULL,
	[NAME] [nvarchar](256) NULL,
 CONSTRAINT [PK_SYS_STATUS] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[REF_SUB_DEPARTMENT]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[REF_SUB_DEPARTMENT](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[DEPARTMENT_ID] [int] NULL,
	[CODE] [nvarchar](56) NULL,
	[NAME] [nvarchar](256) NULL,
	[SUB_DEPARTMENT_CATEGORY_ID] [int] NULL,
	[DESCRIPTION] [nvarchar](1024) NULL,
	[STATUS] [int] NULL,
	[BRANCH_ID] [int] NULL,
	[CREATED_BY] [int] NULL,
	[CREATED_DT] [datetime] NULL,
	[UPDATED_BY] [int] NULL,
	[UPDATED_DT] [datetime] NULL,
 CONSTRAINT [PK_REF_SUB_DEPARTMENT] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[REF_SUB_DEPARTMENT_CATEGORY]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[REF_SUB_DEPARTMENT_CATEGORY](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[CODE] [nvarchar](56) NULL,
	[NAME] [nvarchar](256) NULL,
	[DESCRIPTION] [nvarchar](1024) NULL,
	[STATUS] [int] NULL,
	[BRANCH_ID] [int] NULL,
	[CREATED_BY] [int] NULL,
	[CREATED_DT] [datetime] NULL,
	[UPDATED_BY] [int] NULL,
	[UPDATED_DT] [datetime] NULL,
 CONSTRAINT [PK_REF_SUB_DEPARTMENT_CATEGORY] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[REF_TARIFF]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[REF_TARIFF](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[CODE] [nvarchar](56) NULL,
	[NAME] [nvarchar](256) NULL,
	[TARIFF_CATEGORY_ID] [int] NULL,
	[DESCRIPTION] [nvarchar](1024) NULL,
	[STATUS] [int] NULL,
	[BRANCH_ID] [int] NULL,
	[CREATED_BY] [int] NULL,
	[CREATED_DT] [datetime] NULL,
	[UPDATED_BY] [int] NULL,
	[UPDATED_DT] [datetime] NULL,
 CONSTRAINT [PK_REF_TARIFF] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[REF_TARIFF_CATEGORY]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[REF_TARIFF_CATEGORY](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[CODE] [nvarchar](56) NULL,
	[NAME] [nvarchar](256) NULL,
	[DESCRIPTION] [nvarchar](1024) NULL,
	[STATUS] [int] NULL,
	[BRANCH_ID] [int] NULL,
	[CREATED_BY] [int] NULL,
	[CREATED_DT] [datetime] NULL,
	[UPDATED_BY] [int] NULL,
	[UPDATED_DT] [datetime] NULL,
 CONSTRAINT [PK_REF_TARIFF_CATEGORY] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[REF_TEMPLATE]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[REF_TEMPLATE](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[CODE] [nvarchar](56) NULL,
	[NAME] [nvarchar](256) NULL,
	[TEMPLATE_CATEGORY_ID] [int] NULL,
	[TEMPLATE] [nvarchar](max) NULL,
	[DESCRIPTION] [nvarchar](1024) NULL,
	[STATUS] [int] NULL,
	[BRANCH_ID] [int] NULL,
	[CREATED_BY] [int] NULL,
	[CREATED_DT] [datetime] NULL,
	[UPDATED_BY] [int] NULL,
	[UPDATED_DT] [datetime] NULL,
 CONSTRAINT [PK_REF_TEMPLATE] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[REF_TEMPLATE_CATEGORY]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[REF_TEMPLATE_CATEGORY](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[CODE] [nvarchar](56) NULL,
	[NAME] [nvarchar](256) NULL,
	[DESCRIPTION] [nvarchar](1024) NULL,
	[STATUS] [int] NULL,
	[BRANCH_ID] [int] NULL,
	[CREATED_BY] [int] NULL,
	[CREATED_DT] [datetime] NULL,
	[UPDATED_BY] [int] NULL,
	[UPDATED_DT] [datetime] NULL,
 CONSTRAINT [PK_REF_TEMPLATE_CATEGORY] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[REF_WARD]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[REF_WARD](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[CODE] [nvarchar](56) NULL,
	[NAME] [nvarchar](256) NULL,
	[WARD_CATEGORY_ID] [int] NULL,
	[WARD_INCHARGE] [nvarchar](256) NULL,
	[PHONE] [nvarchar](256) NULL,
	[PHONE2] [nvarchar](256) NULL,
	[DESCRIPTION] [nvarchar](1024) NULL,
	[STATUS] [int] NULL,
	[BRANCH_ID] [int] NULL,
	[CREATED_BY] [int] NULL,
	[CREATED_DT] [datetime] NULL,
	[UPDATED_BY] [int] NULL,
	[UPDATED_DT] [datetime] NULL,
 CONSTRAINT [PK_REF_WARD] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[REF_WARD_CATEGORY]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[REF_WARD_CATEGORY](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[CODE] [nvarchar](56) NULL,
	[NAME] [nvarchar](256) NULL,
	[DESCRIPTION] [nvarchar](1024) NULL,
	[STATUS] [int] NULL,
	[BRANCH_ID] [int] NULL,
	[CREATED_BY] [int] NULL,
	[CREATED_DT] [datetime] NULL,
	[UPDATED_BY] [int] NULL,
	[UPDATED_DT] [datetime] NULL,
 CONSTRAINT [PK_REF_WARD_CATEGORY] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[SEC_USER]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SEC_USER](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[LOGIN_ID] [nvarchar](256) NULL,
	[PASSWORD] [nvarchar](256) NULL,
	[USER_GROUP_ID] [int] NULL,
	[EMPLOYEE_ID] [int] NULL,
	[STATUS] [int] NULL,
	[BRANCH_ID] [int] NULL,
	[CREATE_USER] [int] NULL,
	[CREATE_DT] [datetime] NULL,
	[UPDATE_USER] [int] NULL,
	[UPDATE_DT] [datetime] NULL,
 CONSTRAINT [PK_SEC_USER] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[SEC_USER_GROUP]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SEC_USER_GROUP](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[CODE] [nvarchar](56) NULL,
	[NAME] [nvarchar](256) NULL,
	[DESCRIPTION] [nvarchar](4000) NULL,
	[STATUS] [int] NULL,
	[BRANCH_ID] [int] NULL,
	[CREATED_BY] [int] NULL,
	[CREATED_DT] [datetime] NULL,
	[UPDATED_BY] [int] NULL,
	[UPDATED_DT] [datetime] NULL,
 CONSTRAINT [PK_SEC_USER_GROUP] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[SEC_USER_GROUP_MENU]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SEC_USER_GROUP_MENU](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[USER_GROUP_ID] [int] NULL,
	[MODULE_ID] [int] NULL,
	[MENU_ID] [int] NOT NULL,
	[OPEN] [int] NOT NULL,
	[NEW] [int] NOT NULL,
	[EDIT] [int] NOT NULL,
	[CANCEL] [int] NOT NULL,
	[PRINT] [int] NOT NULL,
	[PERMISSION] [int] NULL,
	[STATUS] [int] NULL,
	[BRANCH_ID] [int] NULL,
	[CREATED_BY] [int] NULL,
	[CREATED_DT] [datetime] NULL,
	[UPDATED_BY] [int] NULL,
	[UPDATED_DT] [datetime] NULL,
 CONSTRAINT [PK_SEC_USER_GROUP_MENU] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[SEC_USER_GROUP_MODULE]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SEC_USER_GROUP_MODULE](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[USER_GROUP_ID] [int] NULL,
	[MODULE_ID] [int] NULL,
	[PERMISSION] [int] NULL,
	[STATUS] [int] NULL,
	[BRANCH_ID] [int] NULL,
	[CREATED_BY] [int] NULL,
	[CREATED_DT] [datetime] NULL,
	[UPDATED_BY] [int] NULL,
	[UPDATED_DT] [datetime] NULL,
 CONSTRAINT [PK_SEC_USER_GROUP_MODULE] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[SYS_AUDIT_LOG]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SYS_AUDIT_LOG](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[BRANCH_ID] [int] NULL,
	[CREATED_BY] [int] NULL,
	[CREATED_DT] [datetime] NULL,
	[AUDIT_NUMBER] [nvarchar](256) NULL,
	[OBJ_NAME] [nvarchar](1024) NULL,
	[AUDIT_TITLE] [nvarchar](256) NULL,
	[DESCRIPTION] [nvarchar](4000) NULL,
 CONSTRAINT [PK_SYS_AUDIT_LOG] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[SYS_BRANCH]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SYS_BRANCH](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[CODE] [nvarchar](56) NULL,
	[NAME] [nvarchar](256) NULL,
	[CLIENT_ID] [int] NULL,
	[ADDRESS] [nvarchar](512) NULL,
	[EMAIL] [nvarchar](256) NULL,
	[PHONE] [nvarchar](56) NULL,
	[PHONE2] [nvarchar](56) NULL,
	[RPT_TEMPLATE] [nvarchar](max) NULL,
	[DESCRIPTION] [nvarchar](1024) NULL,
	[STATUS] [int] NULL,
	[CREATED_BY] [int] NULL,
	[CREATED_DT] [datetime] NULL,
	[UPDATED_BY] [int] NULL,
	[UPDATED_DT] [datetime] NULL,
 CONSTRAINT [PK_SYS_BRANCH] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[SYS_CLIENT]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SYS_CLIENT](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[NAME] [nvarchar](256) NULL,
	[DESCRIPTION] [nvarchar](1024) NULL,
	[STATUS] [int] NULL,
	[CREATED_BY] [int] NULL,
	[CREATED_DT] [datetime] NULL,
	[UPDATED_BY] [int] NULL,
	[UPDATED_DT] [datetime] NULL,
 CONSTRAINT [PK_SYS_CLIENT] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[SYS_ERR_LOG]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SYS_ERR_LOG](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[BRANCH_ID] [int] NULL,
	[CREATED_BY] [int] NULL,
	[CREATED_DT] [datetime] NULL,
	[ERR_NUMBER] [nvarchar](256) NULL,
	[OBJ_NAME] [nvarchar](1024) NULL,
	[ERR_TITLE] [nvarchar](256) NULL,
	[DESCRIPTION] [nvarchar](4000) NULL,
 CONSTRAINT [PK_SYS_ERR_LOG] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[SYS_MENU]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SYS_MENU](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[PARENT_MENU] [int] NULL,
	[MENU_LEVEL] [int] NULL,
	[URL] [varchar](256) NULL,
	[DISPLAY_NAME] [varchar](256) NULL,
	[PREFIX] [varchar](500) NULL,
	[SUFFIX] [varchar](500) NULL,
	[CLASS1] [varchar](100) NULL,
	[CLASS2] [varchar](100) NULL,
	[CLASS3] [varchar](100) NULL,
	[DESCRIPTION] [nvarchar](1024) NULL,
	[STATUS] [int] NULL,
	[BRANCH_ID] [int] NULL,
	[CREATED_BY] [int] NULL,
	[CREATED_DT] [datetime] NULL,
	[UPDATED_BY] [int] NULL,
	[UPDATED_DT] [datetime] NULL,
 CONSTRAINT [PK_SYS_MENU] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[SYS_MESSAGE]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SYS_MESSAGE](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[NAME] [nvarchar](1024) NULL,
	[TYPE] [int] NULL,
	[MSG] [nvarchar](1024) NULL,
	[DESCRIPTION] [nvarchar](4000) NULL,
	[STATUS] [int] NULL,
	[BRANCH_ID] [int] NULL,
	[CREATED_BY] [int] NULL,
	[CREATED_DT] [datetime] NULL,
	[UPDATED_BY] [int] NULL,
	[UPDATED_DT] [datetime] NULL,
 CONSTRAINT [PK_SYS_MESSAGE] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[SYS_MODULE]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SYS_MODULE](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[CODE] [nvarchar](56) NULL,
	[NAME] [nvarchar](256) NULL,
	[DISPLAY_NAME] [nvarchar](256) NULL,
	[DESCRIPTION] [nvarchar](4000) NULL,
	[STATUS] [int] NULL,
	[BRANCH_ID] [int] NULL,
	[CREATED_BY] [int] NULL,
	[CREATED_DT] [datetime] NULL,
	[UPDATED_BY] [int] NULL,
	[UPDATED_DT] [datetime] NULL,
 CONSTRAINT [PK_SYS_MODULE] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[SYS_PARAMETER]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SYS_PARAMETER](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[TYPE] [nvarchar](256) NULL,
	[SUB_TYPE] [nvarchar](256) NULL,
	[CODE] [nvarchar](256) NULL,
	[NAME] [nvarchar](256) NULL,
	[VALUE1] [nvarchar](256) NULL,
	[VALUE2] [nvarchar](256) NULL,
	[VALUE3] [nvarchar](256) NULL,
	[DESCRIPTION] [nvarchar](1024) NULL,
	[STATUS] [int] NULL,
	[BRANCH_ID] [int] NULL,
	[CREATED_BY] [int] NULL,
	[CREATED_DT] [datetime] NULL,
	[UPDATED_BY] [int] NULL,
	[UPDATED_DT] [datetime] NULL,
 CONSTRAINT [PK_SYS_PARAMETER] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[SYS_PARAMETER_YEAR]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SYS_PARAMETER_YEAR](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[TYPE] [nvarchar](256) NULL,
	[SUB_TYPE] [nvarchar](256) NULL,
	[CODE] [nvarchar](56) NULL,
	[NAME] [nvarchar](256) NULL,
	[FROM_DT] [date] NULL,
	[TO_DT] [date] NULL,
	[VALUE1] [nvarchar](256) NULL,
	[VALUE2] [nvarchar](256) NULL,
	[VALUE3] [nvarchar](256) NULL,
	[DESCRIPTION] [nvarchar](1024) NULL,
	[STATUS] [int] NULL,
	[BRANCH_ID] [int] NULL,
	[CREATED_BY] [int] NULL,
	[CREATED_DT] [datetime] NULL,
	[UPDATED_BY] [int] NULL,
	[UPDATED_DT] [datetime] NULL,
 CONSTRAINT [PK_SYS_PARAMETER_YEAR] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  StoredProcedure [dbo].[SP_DASHBOARD_DATA_GET]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[SP_DASHBOARD_DATA_GET]
	@IN_USER_ID INT,
	@IN_BRANCH_ID INT
AS     
SET NOCOUNT ON
BEGIN    
	BEGIN TRANSACTION
	BEGIN TRY 
		DECLARE @SQL_STATUS VARCHAR(28),  @SQL_NO VARCHAR(28), @SQL_MSG VARCHAR(1024), @SQL_OBJ VARCHAR(1024)   
		SELECT @SQL_OBJ = 'SP_DASHBOARD_DATE_GET'
		--
		/*SELECT 0 AS ID,  
			5 AS TOTAL_MEMBERCOUNT,  CONVERT(VARCHAR(10),MAX(GETDATE()),101) AS TOTAL_MEMBERDT, 
			15 AS ACTIVE_MEMBERCOUNT,  CONVERT(VARCHAR(10),MAX(GETDATE()),101) AS ACTIVE_MEMBERDT, 
			100 AS PENDING_MEMBERCOUNT, CONVERT(VARCHAR(10),MAX(GETDATE()),101) AS PENDING_MEMBERDT

			Select * from REF_SUPPORT_STATUS*/

			sELECT 1 AS OPEN_COUNT ,2 AS	PROGRESS_COUNT, 3 AS CLOSED_COUNT
	/*
	Select 
		(SELECT COUNT(SH.ID)--,
			--RSC.NAME AS SUPPORT_CATEGORY, SH.TITLE, SH.CREATE_USER AS REQUSETED_BY, SH.CREATE_DT AS REQUEST_DT, 
			-- RSG.NAME AS SUPPORT_GROUP, ASSIGN_TO AS [USER], RSS.NAME AS SUPPORT_STATUS    
		FROM SUPPORT_HEADER SH
		INNER JOIN SUPPORT_DETAILS SD ON SH.ID = SD.SUPPORT_HEADER_ID
		INNER JOIN REF_SUPPORT_CATEGORY RSC ON RSC.ID = SH.SUPPORT_CATEGORY_ID
		INNER JOIN REF_SUPPORT_GROUP RSG ON RSG.ID = SD.SUPPORT_GROUP_ID
		INNER JOIN REF_SUPPORT_STATUS RSS ON RSS.ID = SD.SUPPORT_STATUS_ID
		WHERE SD.ID IN (SELECT MAX(SD.ID) FROM SUPPORT_HEADER SH
						INNER JOIN SUPPORT_DETAILS SD ON SH.ID = SD.SUPPORT_HEADER_ID GROUP BY SH.ID
						)
		AND RSS.NAME = 'OPEN') AS OPEN_COUNT,

(		SELECT COUNT(SH.ID)--,
			--RSC.NAME AS SUPPORT_CATEGORY, SH.TITLE, SH.CREATE_USER AS REQUSETED_BY, SH.CREATE_DT AS REQUEST_DT, 
			-- RSG.NAME AS SUPPORT_GROUP, ASSIGN_TO AS [USER], RSS.NAME AS SUPPORT_STATUS    
		FROM SUPPORT_HEADER SH
		INNER JOIN SUPPORT_DETAILS SD ON SH.ID = SD.SUPPORT_HEADER_ID
		INNER JOIN REF_SUPPORT_CATEGORY RSC ON RSC.ID = SH.SUPPORT_CATEGORY_ID
		INNER JOIN REF_SUPPORT_GROUP RSG ON RSG.ID = SD.SUPPORT_GROUP_ID
		INNER JOIN REF_SUPPORT_STATUS RSS ON RSS.ID = SD.SUPPORT_STATUS_ID
		WHERE SD.ID IN (SELECT MAX(SD.ID) FROM SUPPORT_HEADER SH
						INNER JOIN SUPPORT_DETAILS SD ON SH.ID = SD.SUPPORT_HEADER_ID GROUP BY SH.ID
						)
		AND RSS.NAME = 'PROGESS') AS PROGRESS_COUNT,
		(
		SELECT COUNT(SH.ID)--,
			--RSC.NAME AS SUPPORT_CATEGORY, SH.TITLE, SH.CREATE_USER AS REQUSETED_BY, SH.CREATE_DT AS REQUEST_DT, 
			-- RSG.NAME AS SUPPORT_GROUP, ASSIGN_TO AS [USER], RSS.NAME AS SUPPORT_STATUS    
		FROM SUPPORT_HEADER SH
		INNER JOIN SUPPORT_DETAILS SD ON SH.ID = SD.SUPPORT_HEADER_ID
		INNER JOIN REF_SUPPORT_CATEGORY RSC ON RSC.ID = SH.SUPPORT_CATEGORY_ID
		INNER JOIN REF_SUPPORT_GROUP RSG ON RSG.ID = SD.SUPPORT_GROUP_ID
		INNER JOIN REF_SUPPORT_STATUS RSS ON RSS.ID = SD.SUPPORT_STATUS_ID
		WHERE SD.ID IN (SELECT MAX(SD.ID) FROM SUPPORT_HEADER SH
						INNER JOIN SUPPORT_DETAILS SD ON SH.ID = SD.SUPPORT_HEADER_ID GROUP BY SH.ID
						)
		AND RSS.NAME = 'CLOSED') AS CLOSED_COUNT

		-- WHERE CLIENT_ID IN (SELECT * FROM DBO.UFD_GET_CLIENTS(@IN_USER_ID, @IN_CLIENT_ID, @SQL_OBJ)
		--
		EXEC SP_SYS_AUDIT_LOG @IN_USER_ID, @IN_CLIENT_ID, 0 , 'SP_DASHBOARD_DATE_GET','DASHBOARD', 'GET DASHBOARD DETAILS', 
			@SQL_STATUS = @SQL_STATUS OUTPUT, @SQL_NO = @SQL_NO OUTPUT, @SQL_MSG = @SQL_MSG OUTPUT

		--SELECT @SQL_STATUS AS SQL_STATUS, @SQL_NO AS SQL_NO, @SQL_MSG AS SQL_MSG 
		*/
	COMMIT TRANSACTION
	END TRY
    
	BEGIN CATCH 
		ROLLBACK   

		SET @SQL_NO = ERROR_NUMBER()    
		SET @SQL_MSG = ERROR_MESSAGE()    
		SET @SQL_OBJ = ERROR_PROCEDURE() 
		--
		EXEC SP_SYS_ERR_LOG @IN_USER_ID, @IN_BRANCH_ID, @SQL_NO, @SQL_OBJ, @SQL_OBJ, @SQL_MSG, @SQL_STATUS OUTPUT, @SQL_NO OUTPUT, @SQL_MSG OUTPUT
		SELECT @SQL_STATUS AS SQL_STATUS, @SQL_NO AS SQL_NO, @SQL_MSG  AS SQL_MSG 	
	END CATCH    
END
GO
/****** Object:  StoredProcedure [dbo].[SP_IPD_ADMISSION_BED_TRANSFER]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[SP_IPD_ADMISSION_BED_TRANSFER]
	@IN_USER_ID INT,
	@IN_BRANCH_ID INT,
	@IN_AID INT,	
	@IN_PID INT,
	@IN_DR_ID INT,
	@IN_TRANSFER_DT DATETIME,
	@IN_BED_ID INT,
	@IN_DESCRIPTION NVARCHAR(1024),
	@IN_STATUS INT
AS
SET NOCOUNT ON
BEGIN
	BEGIN TRY
		DECLARE @SQL_STATUS VARCHAR(28),  @SQL_NO VARCHAR(28), @SQL_MSG VARCHAR(1024), @SQL_OBJ VARCHAR(1024)
		DECLARE @CR_ID INT
		SELECT @SQL_OBJ = 'SP_IPD_ADMISSION_BED_TRANSFER', @SQL_STATUS = 'SUCCESS'
		--
		IF EXISTS (SELECT 1 FROM REF_BED WITH(NOLOCK) WHERE ID = @IN_BED_ID 
					AND BED_STATUS_ID = (SELECT ID FROM REF_BED_STATUS WITH(NOLOCK) WHERE CODE = 'V')
					AND BRANCH_ID = @IN_BRANCH_ID)
			BEGIN
				-- INSERT BED TRANSFER
				INSERT INTO IPD_BED_TRANSFER (
					 PID, AID, DR_ID, BED_ID, TRANSFER_DT, 
					DESCRIPTION, STATUS, BRANCH_ID, CREATED_BY, CREATED_DT, UPDATED_BY, UPDATED_DT)
				VALUES(@IN_PID, @IN_AID, @IN_DR_ID, @IN_BED_ID, GETDATE(),
					@IN_DESCRIPTION, @IN_STATUS, @IN_BRANCH_ID, @IN_USER_ID, GETDATE(), @IN_USER_ID, GETDATE()
					)

				SET @SQL_NO = SCOPE_IDENTITY()
				
				-- UPDATE PREVIOUS BED STATUS
				UPDATE REF_BED SET BED_STATUS_ID = (SELECT ID FROM REF_BED_STATUS WITH(NOLOCK) WHERE CODE = 'V')  
					WHERE ID = ( SELECT BED_ID FROM IPD_ADMISSION WITH(NOLOCK) WHERE ID = @IN_AID)
					AND BRANCH_ID = @IN_BRANCH_ID
				
				-- UPDATE NEW BED STATUS
				UPDATE REF_BED SET BED_STATUS_ID = (SELECT ID FROM REF_BED_STATUS WITH(NOLOCK) WHERE CODE = 'O')  
					WHERE ID = @IN_BED_ID AND BRANCH_ID = @IN_BRANCH_ID	

				-- UPDATE BED ID IN ADMISSION
				UPDATE IPD_ADMISSION SET BED_ID = @IN_BED_ID 
					WHERE ID = @IN_AID		
					AND BRANCH_ID = @IN_BRANCH_ID

				SELECT @SQL_MSG = VALUE1 FROM SYS_PARAMETER WITH(NOLOCK) WHERE CODE = 'INSERT_MESSAGE' AND BRANCH_ID = @IN_BRANCH_ID	
			END
		ELSE
			BEGIN 
				SET @SQL_NO = 0
				SET @SQL_MSG = 'INVALID BED'
			END				
		SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG AS SQL_MSG, @SQL_NO AS SQL_NO 
	END TRY

	BEGIN CATCH
		SET @SQL_NO = ERROR_NUMBER()    
		SET @SQL_MSG = ERROR_MESSAGE()    
		SET @SQL_OBJ = ERROR_PROCEDURE()
		--
		EXEC SP_SYS_ERR_LOG @IN_USER_ID, @IN_BRANCH_ID, @SQL_NO, @SQL_OBJ, @SQL_OBJ, @SQL_MSG, @SQL_STATUS OUTPUT, @SQL_NO OUTPUT, @SQL_MSG OUTPUT
		SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG  AS SQL_MSG, @SQL_NO AS SQL_NO
		--
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SP_IPD_ADMISSION_CHANGE_PAYER]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[SP_IPD_ADMISSION_CHANGE_PAYER]
	@IN_USER_ID INT,
	@IN_BRANCH_ID INT,
	@IN_AID INT,	
	@IN_PID INT,
	@IN_APPROVAL_ID INT,
	@IN_PAYER_ID INT,
	@IN_CHANGE_DT DATETIME,
	@IN_DESCRIPTION NVARCHAR(1024),
	@IN_STATUS INT
AS
SET NOCOUNT ON
BEGIN
	BEGIN TRY
		DECLARE @SQL_STATUS VARCHAR(28),  @SQL_NO VARCHAR(28), @SQL_MSG VARCHAR(1024), @SQL_OBJ VARCHAR(1024)
		DECLARE @CR_ID INT
		SELECT @SQL_OBJ = 'SP_IPD_ADMISSION_CHANGE_PAYER', @SQL_STATUS = 'SUCCESS'
		
		-- INSERT IPD_CHANGE_PAYER
		INSERT INTO IPD_CHANGE_PAYER (
				PID, AID, APPROVAL_ID, PAYER_ID, CHANGE_DT, 
			DESCRIPTION, STATUS, BRANCH_ID, CREATED_BY, CREATED_DT, UPDATED_BY, UPDATED_DT)
		VALUES(@IN_PID, @IN_AID, @IN_APPROVAL_ID, @IN_PAYER_ID, GETDATE(),
			@IN_DESCRIPTION, @IN_STATUS, @IN_BRANCH_ID, @IN_USER_ID, GETDATE(), @IN_USER_ID, GETDATE()
			)

		SET @SQL_NO = SCOPE_IDENTITY()

		-- UPDATE PAYER IN ADMISSION
		UPDATE IPD_ADMISSION SET PAYER_ID = @IN_PAYER_ID WHERE ID = @IN_AID AND PID = @IN_PID AND BRANCH_ID = @IN_BRANCH_ID
				
		SELECT @SQL_MSG = VALUE1 FROM SYS_PARAMETER WITH(NOLOCK) WHERE CODE = 'INSERT_MESSAGE' AND BRANCH_ID = @IN_BRANCH_ID	
						
		SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG AS SQL_MSG, @SQL_NO AS SQL_NO 
	END TRY

	BEGIN CATCH
		SET @SQL_NO = ERROR_NUMBER()    
		SET @SQL_MSG = ERROR_MESSAGE()    
		SET @SQL_OBJ = ERROR_PROCEDURE()
		--
		EXEC SP_SYS_ERR_LOG @IN_USER_ID, @IN_BRANCH_ID, @SQL_NO, @SQL_OBJ, @SQL_OBJ, @SQL_MSG, @SQL_STATUS OUTPUT, @SQL_NO OUTPUT, @SQL_MSG OUTPUT
		SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG  AS SQL_MSG, @SQL_NO AS SQL_NO
		--
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SP_IPD_ADMISSION_DR_TRANSFER]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[SP_IPD_ADMISSION_DR_TRANSFER]
	@IN_USER_ID INT,
	@IN_BRANCH_ID INT,
	@IN_AID INT,	
	@IN_PID INT,
	@IN_APPROVAL_ID INT,
	@IN_DR_ID INT,
	@IN_TRANSFER_DT DATETIME,
	@IN_DESCRIPTION NVARCHAR(1024),
	@IN_STATUS INT
AS
SET NOCOUNT ON
BEGIN
	BEGIN TRY
		DECLARE @SQL_STATUS VARCHAR(28),  @SQL_NO VARCHAR(28), @SQL_MSG VARCHAR(1024), @SQL_OBJ VARCHAR(1024)
		DECLARE @CR_ID INT
		SELECT @SQL_OBJ = 'SP_IPD_ADMISSION_DR_TRANSFER', @SQL_STATUS = 'SUCCESS'
		
		-- INSERT IPD_DR_TRANSFER
		INSERT INTO IPD_DR_TRANSFER (
				PID, AID, APPROVAL_ID, DR_ID, TRANSFER_DT, 
			DESCRIPTION, STATUS, BRANCH_ID, CREATED_BY, CREATED_DT, UPDATED_BY, UPDATED_DT)
		VALUES(@IN_PID, @IN_AID, @IN_APPROVAL_ID, @IN_DR_ID, GETDATE(),
			@IN_DESCRIPTION, @IN_STATUS, @IN_BRANCH_ID, @IN_USER_ID, GETDATE(), @IN_USER_ID, GETDATE()
			)

		SET @SQL_NO = SCOPE_IDENTITY()

		-- UPDATE PAYER IN ADMISSION
		UPDATE IPD_ADMISSION SET ADMISSION_DR_ID = @IN_DR_ID WHERE ID = @IN_AID AND PID = @IN_PID AND BRANCH_ID = @IN_BRANCH_ID
				
		SELECT @SQL_MSG = VALUE1 FROM SYS_PARAMETER WITH(NOLOCK) WHERE CODE = 'INSERT_MESSAGE' AND BRANCH_ID = @IN_BRANCH_ID	
						
		SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG AS SQL_MSG, @SQL_NO AS SQL_NO 
	END TRY

	BEGIN CATCH
		SET @SQL_NO = ERROR_NUMBER()    
		SET @SQL_MSG = ERROR_MESSAGE()    
		SET @SQL_OBJ = ERROR_PROCEDURE()
		--
		EXEC SP_SYS_ERR_LOG @IN_USER_ID, @IN_BRANCH_ID, @SQL_NO, @SQL_OBJ, @SQL_OBJ, @SQL_MSG, @SQL_STATUS OUTPUT, @SQL_NO OUTPUT, @SQL_MSG OUTPUT
		SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG  AS SQL_MSG, @SQL_NO AS SQL_NO
		--
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SP_IPD_ADMISSION_INSERT_UPDATE]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[SP_IPD_ADMISSION_INSERT_UPDATE]
	@IN_USER_ID INT,
	@IN_BRANCH_ID INT,
	@IN_ID INT,	
	@IN_YEAR_ID NVARCHAR(56),
	@IN_CODE NVARCHAR(56),
	@IN_PID INT,
	@IN_ADMISSION_DR_ID INT,
	@IN_ADMISSION_DT DATETIME,
	@IN_ADMISSION_CATEGORY_ID INT,
	@IN_SERVICE_CATEGORY_ID INT,
	@IN_PAYER_ID INT,
	@IN_BED_ID INT,
	@IN_KIN_NAME NVARCHAR(256),
	@IN_KIN_RELATION_ID INT,
	@IN_KIN_MOBILE NVARCHAR(56),
	@IN_REF_ID NVARCHAR(56),
	@IN_REF_BY NVARCHAR(256),
	@IN_REF_HOSPITAL NVARCHAR(256),
	@IN_DESCRIPTION NVARCHAR(1024),
	@IN_STATUS INT
AS
BEGIN
	BEGIN TRY
		DECLARE @SQL_STATUS VARCHAR(28),  @SQL_NO VARCHAR(28), @SQL_MSG VARCHAR(1024), @SQL_OBJ VARCHAR(1024)
		DECLARE @CR_ID INT
		SELECT @SQL_OBJ = 'SP_IPD_ADMISSION_INSERT_UPDATE', @SQL_STATUS = 'SUCCESS'
		--		--
		SELECT @IN_YEAR_ID = YEAR_CODE   , @IN_CODE = CODE, @CR_ID = CR_ID FROM UDF_GET_CODE('IPD','ADMISSION','')
		--
		IF NOT EXISTS (SELECT * FROM IPD_ADMISSION WHERE ID = @IN_ID)
		BEGIN
			IF EXISTS (SELECT * FROM REF_BED WHERE ID = @IN_BED_ID AND BED_STATUS_ID = (SELECT ID FROM REF_BED_STATUS WHERE CODE = 'V'))
			BEGIN
				INSERT INTO IPD_ADMISSION 
					(
						YEAR_ID, CR_ID, CODE, PID, ADMISSION_DR_ID, ADMISSION_DT, ADMISSION_STATUS_ID, 
						ADMISSION_CATEGORY_ID, SERVICE_CATEGORY_ID, PAYER_ID, BED_ID, KIN_NAME, 
						KIN_RELATION_ID, KIN_MOBILE, REF_ID, REF_BY, REF_HOSPITAL, DESCRIPTION, 
						STATUS, BRANCH_ID, CREATED_BY, CREATED_DT, UPDATED_BY, UPDATED_DT
					)
				VALUES 
					( 
						@IN_YEAR_ID, @CR_ID, @IN_CODE, @IN_PID, @IN_ADMISSION_DR_ID, GETDATE(), 1, 
						@IN_ADMISSION_CATEGORY_ID, @IN_SERVICE_CATEGORY_ID, @IN_PAYER_ID, @IN_BED_ID, @IN_KIN_NAME, 
						@IN_KIN_RELATION_ID, @IN_KIN_MOBILE, @IN_REF_ID, @IN_REF_BY, @IN_REF_HOSPITAL, @IN_DESCRIPTION, 
						@IN_STATUS, @IN_BRANCH_ID, @IN_USER_ID, GETDATE(), @IN_USER_ID, GETDATE()
					)
				
				SET @SQL_NO = SCOPE_IDENTITY()

				-- UPDATE NEW BED STATUS
				UPDATE REF_BED SET BED_STATUS_ID = (SELECT ID FROM REF_BED_STATUS WHERE CODE = 'O')  WHERE ID = @IN_BED_ID	

				INSERT INTO IPD_BED_TRANSFER (
					PID, AID, DR_ID, BED_ID, TRANSFER_DT, 
					DESCRIPTION, STATUS, BRANCH_ID, CREATED_BY, CREATED_DT, UPDATED_BY, UPDATED_DT)
				VALUES(@IN_PID, @SQL_NO, @IN_ADMISSION_DR_ID, @IN_BED_ID, GETDATE(),
					'NEW', @IN_STATUS, @IN_BRANCH_ID, @IN_USER_ID, GETDATE(), @IN_USER_ID, GETDATE()
					)

				-- INSERT IPD_DR_TRANSFER
				INSERT INTO IPD_DR_TRANSFER (
						PID, AID, APPROVAL_ID, DR_ID, TRANSFER_DT, 
					DESCRIPTION, STATUS, BRANCH_ID, CREATED_BY, CREATED_DT, UPDATED_BY, UPDATED_DT)
				VALUES(@IN_PID, @SQL_NO, 0, @IN_ADMISSION_DR_ID, GETDATE(),
					@IN_DESCRIPTION, @IN_STATUS, @IN_BRANCH_ID, @IN_USER_ID, GETDATE(), @IN_USER_ID, GETDATE()
					)

				-- INSERT IPD_CHANGE_PAYER
				INSERT INTO IPD_CHANGE_PAYER (
						PID, AID, APPROVAL_ID, PAYER_ID, CHANGE_DT, 
					DESCRIPTION, STATUS, BRANCH_ID, CREATED_BY, CREATED_DT, UPDATED_BY, UPDATED_DT)
				VALUES(@IN_PID, @SQL_NO, 0, @IN_PAYER_ID, GETDATE(),
					@IN_DESCRIPTION, @IN_STATUS, @IN_BRANCH_ID, @IN_USER_ID, GETDATE(), @IN_USER_ID, GETDATE()
					)

				SELECT @SQL_MSG = VALUE1 FROM SYS_PARAMETER WHERE CODE = 'INSERT_MESSAGE'	
			END

			ELSE
			BEGIN 
				SET @SQL_STATUS = 'INVALID BED'
				SET @SQL_NO = 0
				SET @SQL_MSG = 'INVALID BED'
			END						
		END
		ELSE
		BEGIN 
			UPDATE IPD_ADMISSION
			SET ADMISSION_DR_ID = @IN_ADMISSION_DR_ID, ADMISSION_CATEGORY_ID = @IN_ADMISSION_CATEGORY_ID, 
				SERVICE_CATEGORY_ID = @IN_SERVICE_CATEGORY_ID, KIN_NAME = @IN_KIN_NAME, 
				KIN_RELATION_ID = @IN_KIN_RELATION_ID, KIN_MOBILE = @IN_KIN_MOBILE, REF_ID = @IN_REF_ID, 
				REF_BY = @IN_REF_BY, REF_HOSPITAL = @IN_REF_HOSPITAL, DESCRIPTION = @IN_DESCRIPTION,
				STATUS = @IN_STATUS, UPDATED_BY = @IN_USER_ID, UPDATED_DT = GETDATE()
			WHERE ID = @IN_ID

			SET @SQL_NO = @IN_ID
			SELECT @SQL_MSG = VALUE1 FROM SYS_PARAMETER WHERE CODE = 'UPDATE_MESSAGE'
		END

		SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG AS SQL_MSG, @SQL_NO AS SQL_NO 
	END TRY

	BEGIN CATCH
		SET @SQL_NO = ERROR_NUMBER()    
		SET @SQL_MSG = ERROR_MESSAGE()    
		SET @SQL_OBJ = ERROR_PROCEDURE()
		--
		EXEC SP_SYS_ERR_LOG @IN_USER_ID, @IN_BRANCH_ID, @SQL_NO, @SQL_OBJ, @SQL_OBJ, @SQL_MSG, @SQL_STATUS OUTPUT, @SQL_NO OUTPUT, @SQL_MSG OUTPUT
		SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG  AS SQL_MSG, @SQL_NO AS SQL_NO
		--
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SP_IPD_ADMISSION_PATIENT_DETAILS_GET]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[SP_IPD_ADMISSION_PATIENT_DETAILS_GET]
	@IN_USER_ID INT,
	@IN_BRANCH_ID INT,
	@IN_ID INT  = 0,
	@IN_CODE NVARCHAR(56) = 0,
	@IN_ADMISSION_STATUS_ID INT = 0 ,
	@IN_STATUS INT = 0 
AS
BEGIN
	BEGIN TRY
		DECLARE @SQL_STATUS VARCHAR(28),  @SQL_NO VARCHAR(28), @SQL_MSG VARCHAR(1024), @SQL_OBJ VARCHAR(1024)
		--	
		SELECT 
			A.ID, A.CODE,  -- ADMISSION DETAILS ID AND CODE
			M.ID AS PID, M.CODE AS PCODE, M.CODE + ' | ' + M.NAME + ' | ' + COALESCE(RB.NAME,'') AS NAME,
			A.ID AS AID, A.CODE AS ACODE,
			COALESCE(A.ADMISSION_DR_ID,0) AS ADMISSION_DR_ID, EM.NAME AS ADMISSION_DR,
			M.NAME AS PATIENT_NAME,
			A.YEAR_ID,CONVERT (DATE, A.ADMISSION_DT) AS ADMISSION_DT,
			A.BED_ID, RB.NAME AS BED, RB.CODE AS BED_CODE,
			COALESCE(RB.BED_CATEGORY_ID,0) AS BED_CATEGORY_ID, BC.NAME AS BED_CATEGORY, BC.CODE AS BED_CATEGORY_CODE,
			COALESCE(RB.WARD_ID,0) AS WARD_ID, RW.NAME AS WARD, RW.CODE AS WARD_CODE,
			A.ADMISSION_STATUS_ID, RAS.NAME AS ADMISSION_STATUS,
			A.ADMISSION_CATEGORY_ID, ACG.NAME AS ADMISSION_CATEGORY, 
			A.SERVICE_CATEGORY_ID, SC.NAME AS SERVICE_CATEGORY,
			CONVERT (DATE, M.REGISTRATION_DT) AS REGISTRATION_DT,
			A.PAYER_ID,C.NAME AS PAYER, M.GENDER_ID,G.NAME AS GENDER,
			M.AGE,M.DOB,M.IDENTITY_TYPE_ID,I.NAME AS IDENTITY_TYPE,M.UID,M.MOBILE,M.EMAIL,
			M.BLOOD_GROUP_ID,BG.NAME AS BLOOD_GROUP,M.HEIGHT,M.WEIGHT,M.OBESITY,M.ADDRESS,
			M.CITY,M.STATE_ID,CS.NAME AS STATE, M.COUNTRY_ID, CC.NAME AS COUNTRY,M.PIN,
			A.KIN_NAME,A.KIN_RELATION_ID,KR.NAME AS KIN_RELATION, A.KIN_MOBILE,
			M.MARITAL_STATUS_ID, KMS.NAME AS MARITAL_STATUS,
			M.RELIGION_ID,R.NAME AS RELIGION,M.PATIENT_CATEGORY_ID,PCT.NAME AS PATIENT_CATEGORY, 
			M.P_ADDRESS,M.P_CITY,M.P_STATE_ID, PS.NAME AS P_STATE,M.P_COUNTRY_ID,PC.NAME AS P_COUNTRY,
			M.P_PIN,M.NATIONALITY_ID,N.NATIONALITY AS NATIONALITY, M.F_NAME,M.F_MOBILE,M.F_EMAIL,
			M.M_NAME,M.M_MOBILE,M.M_EMAIL,M.S_NAME,M.S_MOBILE,M.S_EMAIL,M.G_NAME,
			M.G_MOBILE,M.G_EMAIL,
			A.REF_ID,A.REF_BY,A.REF_HOSPITAL,M.ORG_ID,M.ORG_NAME,
			M.ORG_EMP_ID,M.ORG_MOBILE,M.ORG_EMAIL,M.INS_TYPE,M.INS_ID,M.MATURITY_DT,
			M.MATURITY_PERIOD,M.MATURED_AMOUNT,M.RECOV_AMOUNT,M.EMPLOYMENT_CATEGORY_ID,
			M.SPECIALIZATION,M.EMPLOYMENT_STATUS_ID,ES.NAME AS EMPLOYMENT_STATUS, M.EMPLOYMENT_DT,
			M.DESCRIPTION,A.DESCRIPTION AS ADMISSION_DESCRIPTION,
			M.STATUS AS STATUS_ID, S.NAME AS STATUS,M.BRANCH_ID,M.CREATED_BY,M.CREATED_DT,M.UPDATED_BY,M.UPDATED_DT
			--Testing
			,(SELECT DESCRIPTION FROM IPD_PATIENT_DISCHARGE WHERE ID = 2005) AS DISCHARGE_NOTE
		FROM IPD_ADMISSION A
		INNER JOIN PATIENT_REGISTRATION M ON A.PID = M.ID
		LEFT OUTER JOIN REF_BED RB ON A.BED_ID = RB.ID
		LEFT OUTER JOIN REF_BED_CATEGORY BC ON RB.BED_CATEGORY_ID = BC.ID
		LEFT OUTER JOIN REF_WARD RW ON RB.WARD_ID = RW.ID
		LEFT OUTER JOIN REF_SERVICE_CATEGORY SC ON A.SERVICE_CATEGORY_ID = SC.ID
		LEFT OUTER JOIN REF_COMPANY C ON A.PAYER_ID = C.ID
		LEFT OUTER JOIN REF_STATUS S ON A.STATUS = S.ID
		LEFT OUTER JOIN REF_ADMISSION_CATEGORY ACG ON ACG.ID = A.ADMISSION_CATEGORY_ID
		LEFT OUTER JOIN REF_ADMISSION_STATUS RAS ON RAS.ID = A.ADMISSION_STATUS_ID
		LEFT OUTER JOIN REF_RELATION KR ON KR.ID = A.KIN_RELATION_ID
		LEFT OUTER JOIN REF_GENDER G ON M.GENDER_ID = G.ID
		LEFT OUTER JOIN REF_IDENTITY_TYPE I ON M.IDENTITY_TYPE_ID = I.ID
		LEFT OUTER JOIN REF_BLOOD_GROUP BG ON M.BLOOD_GROUP_ID = BG.ID
		LEFT OUTER JOIN REF_STATE CS ON CS.ID = M.STATE_ID
		LEFT OUTER JOIN REF_COUNTRY CC ON CC.ID = M.COUNTRY_ID		
		LEFT OUTER JOIN REF_MARITAL_STATUS KMS ON KMS.ID = M.MARITAL_STATUS_ID
		LEFT OUTER JOIN REF_RELIGION R ON R.ID = M.RELIGION_ID
		LEFT OUTER JOIN REF_PATIENT_CATEGORY PCT ON PCT.ID = M.PATIENT_CATEGORY_ID
		LEFT OUTER JOIN REF_STATE PS ON PS.ID = M.P_STATE_ID
		LEFT OUTER JOIN REF_COUNTRY PC ON PC.ID = M.P_COUNTRY_ID
		LEFT OUTER JOIN REF_COUNTRY N ON N.ID = M.NATIONALITY_ID
		LEFT OUTER JOIN REF_EMPLOYEE  EM ON EM.ID = A.ADMISSION_DR_ID
		LEFT OUTER JOIN REF_EMPLOYMENT_STATUS ES ON ES.ID = M.EMPLOYMENT_STATUS_ID			
		WHERE A.ID = CASE WHEN @IN_ID = 0 THEN A.ID ELSE @IN_ID END
			AND A.CODE = CASE WHEN @IN_CODE = '0' THEN A.CODE ELSE @IN_CODE END
			AND A.STATUS = CASE WHEN @IN_STATUS = 0 THEN A.STATUS ELSE @IN_STATUS END
			AND A.ADMISSION_STATUS_ID = CASE WHEN @IN_ADMISSION_STATUS_ID = 0 THEN A.ADMISSION_STATUS_ID ELSE @IN_ADMISSION_STATUS_ID END
		ORDER BY A.ADMISSION_DT DESC
	END TRY
	--
	BEGIN CATCH
	SET @SQL_NO = ERROR_NUMBER()    
	SET @SQL_MSG = ERROR_MESSAGE()    
	SET @SQL_OBJ = ERROR_PROCEDURE()
	--
	EXEC SP_SYS_ERR_LOG @IN_USER_ID, @IN_BRANCH_ID, @SQL_NO, @SQL_OBJ, @SQL_OBJ, @SQL_MSG, @SQL_STATUS OUTPUT, @SQL_NO OUTPUT, @SQL_MSG OUTPUT
	--
	SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG  AS SQL_MSG, @SQL_NO AS SQL_NO
	--
	END CATCH
END

GO
/****** Object:  StoredProcedure [dbo].[SP_IPD_BILL_FINAL_GET]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE    PROCEDURE [dbo].[SP_IPD_BILL_FINAL_GET]
	@IN_USER_ID INT,
	@IN_BRANCH_ID NVARCHAR(56),
	@IN_AID INT,
	@IN_TYPE INT = 0
AS
BEGIN
	BEGIN TRY
		DECLARE @SQL_STATUS VARCHAR(28),  @SQL_NO VARCHAR(28), @SQL_MSG VARCHAR(1024), @SQL_OBJ VARCHAR(1024)
		SELECT @SQL_OBJ = 'SP_IPD_BILL_FINAL_GET', @SQL_STATUS = 'SUCCESS'

		DECLARE @DT_FORMAT nVARCHAR(25)
		SELECT @DT_FORMAT = VALUE1 FROM SYS_PARAMETER WHERE TYPE = 'SYS' AND SUB_TYPE = 'SYS' AND CODE = 'DATETIME_FORMAT_UI' AND BRANCH_ID  = @IN_BRANCH_ID
		--		
		SELECT 
			SUM(PATIENT_AMOUNT) AS PATIENT_AMOUNT, SUM(PAYER_AMOUNT) AS PAYER_AMOUNT, 
			SUM(BILL_AMOUNT) AS BILL_AMOUNT, SUM(SERVICE_AMOUNT) AS SERVICE_AMOUNT, 
			SUM(SERVICE_TAX) AS SERVICE_TAX, SUM(SERVICE_TAX_P) AS SERVICE_TAX_P, 
			SUM(SERVICE_DISC) AS SERVICE_DISC, SUM(SERVICE_DISC_P) AS SERVICE_DISC_P, 
			SUM(BILL_TAX) AS BILL_TAX, SUM(BILL_TAX_P) AS BILL_TAX_P, 
			SUM(BILL_DISC) AS BILL_DISC, SUM(BILL_DISC_P) AS BILL_DISC_P, 
			SUM(FINAL_TAX) AS FINAL_TAX, SUM(FINAL_TAX_P) AS FINAL_TAX_P, 
			SUM(FINAL_DISC) AS FINAL_DISC, SUM(FINAL_DISC_P) AS FINAL_DISC_P,
			(SUM(SERVICE_TAX) + SUM(BILL_TAX) + SUM(FINAL_TAX)) AS TOTAL_TAX,
			CONVERT(DECIMAL(18,2),(((SUM(SERVICE_TAX) + SUM(BILL_TAX) + SUM(FINAL_TAX))/SUM(SERVICE_AMOUNT))* 100)) 
				AS TOTAL_TAX_P,
			(SUM(SERVICE_DISC) + SUM(BILL_DISC) + SUM(FINAL_DISC)) AS TOTAL_DISC,
			CONVERT(DECIMAL(18,2),(((SUM(SERVICE_DISC) + SUM(BILL_DISC) + SUM(FINAL_DISC))/SUM(SERVICE_AMOUNT))* 100)) 
				AS TOTAL_DISC_P
		FROM IPD_BILL
		WHERE AID = @IN_AID

		-- SELECT 'SUCCESS' AS SQL_STATUS, 'INSERTED RECORD SUCCESSFULLY' AS SQL_MSG, @@IDENTITY AS SQL_NO 
	END TRY

	BEGIN CATCH
		SET @SQL_NO = ERROR_NUMBER()    
		SET @SQL_MSG = ERROR_MESSAGE()    
		SET @SQL_OBJ = ERROR_PROCEDURE()
		--
		EXEC SP_SYS_ERR_LOG @IN_USER_ID, @IN_BRANCH_ID, @SQL_NO, @SQL_OBJ, @SQL_OBJ, @SQL_MSG, @SQL_STATUS OUTPUT, @SQL_NO OUTPUT, @SQL_MSG OUTPUT
		SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG  AS SQL_MSG, @SQL_NO AS SQL_NO
		--
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SP_IPD_BILL_FINAL_INSERT]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SP_IPD_BILL_FINAL_INSERT]
	@IN_USER_ID INT,
	@IN_BRANCH_ID NVARCHAR(56),
	@IN_YEAR_ID NVARCHAR(56),
	@IN_CODE NVARCHAR(56),
	@IN_PID INT,
	@IN_AID INT,
	@IN_TAX DECIMAL(18,2),
	@IN_DISC DECIMAL(18,2),
	@IN_PATIENT_AMOUNT DECIMAL(18,2),
	@IN_PAYER_AMOUNT DECIMAL(18,2),
	@IN_APPROVER INT,
	@IN_DESCRIPTION NVARCHAR(1024),
	@IN_STATUS INT
AS
BEGIN
	BEGIN TRY
		DECLARE @SQL_STATUS VARCHAR(28),  @SQL_NO VARCHAR(28), @SQL_MSG VARCHAR(1024), @SQL_OBJ VARCHAR(1024)
		SELECT @SQL_OBJ = 'SP_IPD_BILL_FINAL_CALCULATE', @SQL_STATUS = 'SUCCESS'
		DECLARE @CR_ID INT, @YEAR_ID INT, @BILL_CODE NVARCHAR(56), @STATUS INT, @PID INT

		SELECT @YEAR_ID = YEAR_CODE, @BILL_CODE = CODE, @CR_ID = CR_ID FROM UDF_GET_CODE('IPD','IPDBILLFINAL','')
		SET @STATUS = 1
		SET @PID = (SELECT PID FROM IPD_ADMISSION WHERE ID = @IN_AID)

		INSERT INTO IPD_BILL_FINAL
		(	
			YEAR_ID, CR_ID, CODE, BILL_DT, PID, AID, 
			RECEIVED_AMOUNT, PATIENT_AMOUNT, PAYER_AMOUNT, 
			PAYBLE_AMOUNT,
			BILL_AMOUNT, BILL_PATIENT_AMOUNT, 
			BILL_PAYER_AMOUNT, SERVICE_AMOUNT, 
			DR_CHARGE, H_CHARGE, OTH_CHARGE, 
			SERVICE_TAX, 
			SERVICE_TAX_P, 
			SERVICE_DISC, 
			SERVICE_DISC_P, 
			BILL_TAX, 
			BILL_TAX_P, 
			BILL_DISC, 
			BILL_DISC_P, 
			FINAL_TAX, 
			FINAL_TAX_P, 
			FINAL_DISC, 
			FINAL_DISC_P, 
			TOTAL_TAX, 
			TOTAL_TAX_P, 
			TOTAL_DISC, 
			TOTAL_DISC_P,			
			/*			
			R_SERVICE_AMOUNT, R_SERVICE_CHARGE, R_DR_CHARGE, R_H_CHARGE, R_OTH_CHARGE, 
			R_SERVICE_TAX, R_SERVICE_TAX_P, R_SERVICE_DISC, R_SERVICE_DISC_P, 						
			*/
			ORDER_BY, ORDER_NOTE, 
			DESCRIPTION, STATUS, BRANCH_ID, CREATED_BY, CREATED_DT, UPDATED_BY, UPDATED_DT
		)
		SELECT 
			@YEAR_ID, @CR_ID, @BILL_CODE, GETDATE(), @PID, @IN_AID,
			(
				@IN_PATIENT_AMOUNT + @IN_PAYER_AMOUNT) AS RECEIVED_AMOUNT, 
				@IN_PATIENT_AMOUNT, 
				@IN_PAYER_AMOUNT, 
				ROUND(CONVERT(DECIMAL(18,2),(SUM(BILL_AMOUNT)), 2), 0) AS PAYBLE_AMOUNT,
				SUM(BILL_AMOUNT) AS BILL_AMOUNT, 
				SUM(PATIENT_AMOUNT) AS PATIENT_AMOUNT, 
				SUM(PAYER_AMOUNT) AS PAYER_AMOUNT, 
				SUM(SERVICE_AMOUNT) AS SERVICE_AMOUNT, 
				0 as DR_CHARGE, 0 as H_CHARGE, 0 as OTH_CHARGE, 
				SUM(SERVICE_TAX) AS SERVICE_TAX, 
				CONVERT(DECIMAL(18,2),((SUM(SERVICE_TAX)/SUM(SERVICE_AMOUNT))*100)) AS SERVICE_TAX_P, 
				SUM(SERVICE_DISC) AS SERVICE_DISC, 
				CONVERT(DECIMAL(18,2),((SUM(SERVICE_DISC)/SUM(SERVICE_AMOUNT))*100)) AS SERVICE_DISC_P, 
				SUM(BILL_TAX) AS BILL_TAX, 
				CONVERT(DECIMAL(18,2),((SUM(BILL_TAX)/SUM(SERVICE_AMOUNT))*100)) AS BILL_TAX_P, 
				SUM(BILL_DISC) AS BILL_DISC, 
				CONVERT(DECIMAL(18,2),((SUM(BILL_DISC)/SUM(SERVICE_AMOUNT))*100)) AS BILL_DISC_P, 
				SUM(FINAL_TAX) AS FINAL_TAX, 
				CONVERT(DECIMAL(18,2),((SUM(FINAL_TAX)/SUM(SERVICE_AMOUNT))*100)) AS FINAL_TAX_P, 
				SUM(FINAL_DISC) AS FINAL_DISC, 
				CONVERT(DECIMAL(18,2),((SUM(FINAL_DISC)/SUM(SERVICE_AMOUNT))*100)) AS FINAL_DISC_P,
				(SUM(SERVICE_TAX) + SUM(BILL_TAX) + SUM(FINAL_TAX)) AS TOTAL_TAX,
				CONVERT(DECIMAL(18,2),(((SUM(SERVICE_TAX) + SUM(BILL_TAX) + SUM(FINAL_TAX))/SUM(SERVICE_AMOUNT))* 100)) 
					AS TOTAL_TAX_P,
				(SUM(SERVICE_DISC) + SUM(BILL_DISC) + SUM(FINAL_DISC)) AS TOTAL_DISC,
				CONVERT(DECIMAL(18,2),(((SUM(SERVICE_DISC) + SUM(BILL_DISC) + SUM(FINAL_DISC))/SUM(SERVICE_AMOUNT))* 100)) 
					AS TOTAL_DISC_P,			
				/*			
				SUM(R_SERVICE_AMOUNT), SUM(R_SERVICE_CHARGE), SUM(R_DR_CHARGE), SUM(R_H_CHARGE), SUM(R_OTH_CHARGE), 
				SUM(R_SERVICE_TAX), SUM(R_SERVICE_TAX_P), SUM(R_SERVICE_DISC), SUM(R_SERVICE_DISC_P), 			
				*/
				@IN_APPROVER, '' AS ORDER_NOTE,
				@IN_DESCRIPTION, @IN_STATUS, @IN_BRANCH_ID, @IN_USER_ID, GETDATE(), @IN_USER_ID, GETDATE()
		FROM IPD_BILL
		WHERE AID = @IN_AID

		-- Select * from IPD_BILL_DTL

		-- DETAILS
		/*
		IF (@IN_TYPE = 1)
			BEGIN 				

			END	
		*/

		 SELECT 'SUCCESS' AS SQL_STATUS, 'INSERTED RECORD SUCCESSFULLY' AS SQL_MSG, @@IDENTITY AS SQL_NO 
	END TRY

	BEGIN CATCH
		SET @SQL_NO = ERROR_NUMBER()    
		SET @SQL_MSG = ERROR_MESSAGE()    
		SET @SQL_OBJ = ERROR_PROCEDURE()
		--
		EXEC SP_SYS_ERR_LOG @IN_USER_ID, @IN_BRANCH_ID, @SQL_NO, @SQL_OBJ, @SQL_OBJ, @SQL_MSG, @SQL_STATUS OUTPUT, @SQL_NO OUTPUT, @SQL_MSG OUTPUT
		SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG  AS SQL_MSG, @SQL_NO AS SQL_NO
		--
	END CATCH
END


Select ROUND(CONVERT(DECIMAL(18,2),(10.5678), 2) ,0)
GO
/****** Object:  StoredProcedure [dbo].[SP_IPD_BILL_GET]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[SP_IPD_BILL_GET]
	@IN_USER_ID INT,
	@IN_BRANCH_ID NVARCHAR(56),
	@IN_PID INT = 0,
	@IN_AID INT,
	@IN_BILL_ID INT = 0,
	@IN_TYPE INT = 0
AS
BEGIN
	BEGIN TRY
		DECLARE @SQL_STATUS VARCHAR(28),  @SQL_NO VARCHAR(28), @SQL_MSG VARCHAR(1024), @SQL_OBJ VARCHAR(1024)
		SELECT @SQL_OBJ = 'SP_IPD_BILL_GET', @SQL_STATUS = 'SUCCESS'

		DECLARE @DT_FORMAT nVARCHAR(25)
		SELECT @DT_FORMAT = VALUE1 FROM SYS_PARAMETER WHERE TYPE = 'SYS' AND SUB_TYPE = 'SYS' AND CODE = 'DATETIME_FORMAT_UI' AND BRANCH_ID  = @IN_BRANCH_ID
		--
		-- HEADER
		IF (@IN_TYPE = 0)
			BEGIN 
				Select IB.ID, IB.CODE AS BILL_NO, IB.PID, IB.AID, FORMAT(IB.BILL_DT ,@DT_FORMAT) AS BILL_DT, 
				IB.BILL_AMOUNT, IB.PATIENT_AMOUNT, IB.PAYER_AMOUNT,
				IB.SERVICE_AMOUNT, 
				IB.SERVICE_TAX, IB.SERVICE_TAX_P, IB.SERVICE_DISC, IB.SERVICE_DISC_P, 
				IB.BILL_TAX, IB.BILL_TAX_P, IB.BILL_DISC, IB.BILL_DISC_P,
				IB.FINAL_TAX, IB.FINAL_TAX_P, IB.FINAL_DISC, IB.FINAL_DISC_P,
				IB.SERVICE_CATEGORY_ID, SC.NAME AS SERVICE_CATEGORY, 
				IB.PAYER_ID, C.NAME AS PAYER, 
				IB.BED_ID, RB.NAME AS BED, RB.CODE AS BED_CODE, 
				IB.APPROVE_BY, '' AS APPROVE_NAME, IB.APPROVE_NOTE, IB.DESCRIPTION, IB.STATUS 
				from IPD_BILL IB
				LEFT OUTER JOIN REF_BED RB ON IB.BED_ID = RB.ID
				LEFT OUTER JOIN REF_SERVICE_CATEGORY SC ON IB.SERVICE_CATEGORY_ID = SC.ID
				LEFT OUTER JOIN REF_COMPANY C ON IB.PAYER_ID = C.ID
				LEFT OUTER JOIN REF_STATUS S ON IB.STATUS = S.ID
				WHERE IB.AID = @IN_AID
			END


		-- DETAILS
		IF (@IN_TYPE = 1)
			BEGIN 				
				SELECT ID.ID, ID.BILL_ID AS BILL_ID, IB.CODE AS BILL_NO, ID.PACKAGE_ID, 
					ID.SERVICE_ID, S.NAME AS S_NAME, ID.DR_ID, COALESCE(E.NAME,'') AS DR_NAME,
					ID.SERVICE_TOTAL, ID.PATIENT_AMOUNT, ID.PAYER_AMOUNT, 
					ID.QUANTITY, 
					ID.SERVICE_AMOUNT, ID.DR_AMOUNT, ID.H_AMOUNT, ID.OTH_AMOUNT, 
					ID.SERVICE_TAX, ID.SERVICE_TAX_P, ID.SERVICE_DISC, ID.SERVICE_DISC_P,
					ID.BILL_TAX, ID.BILL_TAX_P, ID.BILL_DISC, ID.BILL_DISC_P,
					ID.FINAL_TAX, ID.FINAL_TAX_P, ID.FINAL_DISC, ID.FINAL_DISC_P,				
					ID.R_SERVICE_AMOUNT, ID.R_SERVICE_CHARGE, ID.R_DR_CHARGE, ID.R_H_CHARGE, ID.R_OTH_CHARGE, 
					ID.R_ORG_TAX, ID.R_ORG_TAX_P, ID.R_ORG_DISC, ID.R_ORG_DISC_P, ID.DESCRIPTION, ID.STATUS,
					ID.DISCOUNT_BY, ID.DISCOUNT_DESCRIPTION
				FROM IPD_BILL IB
				INNER JOIN IPD_BILL_DTL ID ON IB.ID = ID.BILL_ID
				INNER JOIN REF_SERVICE S ON ID.SERVICE_ID = S.ID
				LEFT OUTER JOIN REF_EMPLOYEE E ON ID.DR_ID = E.ID
				WHERE ID.BILL_ID = @IN_BILL_ID
			END	
			

		-- SELECT 'SUCCESS' AS SQL_STATUS, 'INSERTED RECORD SUCCESSFULLY' AS SQL_MSG, @@IDENTITY AS SQL_NO 
	END TRY

	BEGIN CATCH
		SET @SQL_NO = ERROR_NUMBER()    
		SET @SQL_MSG = ERROR_MESSAGE()    
		SET @SQL_OBJ = ERROR_PROCEDURE()
		--
		EXEC SP_SYS_ERR_LOG @IN_USER_ID, @IN_BRANCH_ID, @SQL_NO, @SQL_OBJ, @SQL_OBJ, @SQL_MSG, @SQL_STATUS OUTPUT, @SQL_NO OUTPUT, @SQL_MSG OUTPUT
		SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG  AS SQL_MSG, @SQL_NO AS SQL_NO
		--
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SP_IPD_BILL_INSERT]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[SP_IPD_BILL_INSERT]
	@IN_USER_ID INT,
	@IN_BRANCH_ID NVARCHAR(56),
	@IN_YEAR_ID NVARCHAR(56),
	@IN_CODE NVARCHAR(56),
	@IN_PID INT,
	@IN_AID INT,
	@IN_BILL_DT DATETIME,
	@IN_SERVICE_CATEGORY_ID INT,
	@IN_PAYER_ID INT,
	@IN_BED_ID INT,
	@IN_DESCRIPTION NVARCHAR(1024),
	@IN_STATUS INT,
	@IN_IPD_BILL_DTL NVARCHAR(MAX)
AS
BEGIN
	BEGIN TRY
		DECLARE @SQL_STATUS VARCHAR(28),  @SQL_NO VARCHAR(28), @SQL_MSG VARCHAR(1024), @SQL_OBJ VARCHAR(1024)
		DECLARE @CR_ID INT, @IP_ID INT
		SELECT @SQL_OBJ = 'SP_IPD_BILL_INSERT', @SQL_STATUS = 'SUCCESS'
		--
		DECLARE @BILL_AMOUNT DECIMAL(18, 2), @SERVICE_AMOUNT DECIMAL(18, 2), 
				@SERVICE_TAX DECIMAL(18, 2), @SERVICE_TAX_P DECIMAL(18, 2),
				@SERVICE_DISC DECIMAL(18, 2), @SERVICE_DISC_P DECIMAL(18, 2) 

		--
		SELECT @IN_YEAR_ID = YEAR_CODE, @IN_CODE = CODE, @CR_ID = CR_ID FROM UDF_GET_CODE('IPD','IPDBILL','')
		SET @IN_STATUS = 1
		SET @IN_PID = (SELECT PID FROM IPD_ADMISSION WHERE ID = @IN_AID)
		--
		IF (EXISTS(SELECT * FROM IPD_ADMISSION WHERE ID = @IN_AID AND BRANCH_ID = @IN_BRANCH_ID)) 
			BEGIN 
				INSERT INTO IPD_BILL 
					(YEAR_ID, CR_ID, CODE, BILL_DT, PID, AID, ADMISSION_STATUS_ID, ADMISSION_CATEGORY_ID, 
						SERVICE_CATEGORY_ID, PAYER_ID, BED_ID, PATIENT_AMOUNT, PAYER_AMOUNT, BILL_AMOUNT, SERVICE_AMOUNT, 
						SERVICE_TAX, SERVICE_TAX_P, SERVICE_DISC, SERVICE_DISC_P,
						BILL_TAX, BILL_TAX_P, BILL_DISC, BILL_DISC_P, 
						FINAL_TAX, FINAL_TAX_P, FINAL_DISC, FINAL_DISC_P, APPROVE_BY, APPROVE_NOTE, 
						DESCRIPTION, STATUS, BRANCH_ID, CREATED_BY, CREATED_DT, UPDATED_BY, UPDATED_DT)
				VALUES
					(@IN_YEAR_ID, @CR_ID, @IN_CODE, GETDATE(), @IN_PID, @IN_AID, NULL, NULL, 
						@IN_SERVICE_CATEGORY_ID, @IN_PAYER_ID, NULL, 0, 0, 0, 0,
						0, 0, 0, 0, 
						0, 0, 0, 0,
						0, 0, 0, 0, NULL, NULL, 
						@IN_DESCRIPTION, @IN_STATUS, @IN_BRANCH_ID, @IN_USER_ID, GETDATE(), @IN_USER_ID, GETDATE())
		
				SET @IP_ID = SCOPE_IDENTITY()

				--
				;With CTE_JSON
				AS
				(	SELECT
						CASE ISNUMERIC(JSON_VALUE(VALUE,'$.CHARGE_ID')) WHEN 1 THEN JSON_VALUE(VALUE,'$.CHARGE_ID') ELSE '0' END AS SERVICE_CHARGE_ID,
						CASE ISNUMERIC(JSON_VALUE(VALUE,'$.SERVICE_ID')) WHEN 1 THEN JSON_VALUE(VALUE,'$.SERVICE_ID') ELSE '0' END AS SERVICE_ID,
						CASE ISNUMERIC(JSON_VALUE(VALUE,'$.DR_ID')) WHEN 1 THEN JSON_VALUE(VALUE,'$.DR_ID') ELSE '0' END AS DR_ID,
						--0 AS TAX, 0 AS DISCOUNT, 
						CONVERT(DECIMAL(18,2),(CASE ISNUMERIC(JSON_VALUE(VALUE,'$.TAX')) WHEN 1 THEN JSON_VALUE(VALUE,'$.TAX') ELSE '0' END)) AS TAX,						
						CONVERT(DECIMAL(18,2),(CASE ISNUMERIC(JSON_VALUE(VALUE,'$.DISCOUNT')) WHEN 1 THEN JSON_VALUE(VALUE,'$.DISCOUNT') ELSE '0' END)) AS DISCOUNT,
						CASE ISNUMERIC(JSON_VALUE(VALUE,'$.QUANTITY')) WHEN 1 THEN JSON_VALUE(VALUE,'$.QUANTITY') ELSE '0' END AS QUANTITY,
						JSON_VALUE(VALUE,'$.DESCRIPTION') AS DESCRIPTION
					FROM OPENJSON(@IN_IPD_BILL_DTL)
				),
				CTE_CALC
				AS
				(
					SELECT  J.SERVICE_CHARGE_ID, J.SERVICE_ID,J.DR_ID, J.QUANTITY AS QUANTITY,  	 
								CONVERT(DECIMAL(18,2),R.SERVICE_AMOUNT,2) + 
								CONVERT(DECIMAL(18,2),((J.TAX/100)* R.SERVICE_AMOUNT),2) - 
								CONVERT(DECIMAL(18,2),((J.DISCOUNT/100)*R.SERVICE_AMOUNT),2)
							AS SERVICE_AMOUNT, 
								CONVERT(DECIMAL(18,2),R.H_AMOUNT,2) + 
								CONVERT(DECIMAL(18,2),((J.TAX/100)* R.H_AMOUNT),2) - 
								CONVERT(DECIMAL(18,2),((J.DISCOUNT/100)*R.H_AMOUNT),2)
							AS H_AMOUNT,
								CONVERT(DECIMAL(18,2),R.DR_AMOUNT,2) + 
								CONVERT(DECIMAL(18,2),((J.TAX/100)* R.DR_AMOUNT),2)  - 
								CONVERT(DECIMAL(18,2),((J.DISCOUNT/100)*R.DR_AMOUNT),2)
							AS DR_AMOUNT, 
								CONVERT(DECIMAL(18,2),R.OTH_AMOUNT,2) + 
								CONVERT(DECIMAL(18,2),((J.TAX/100)* R.OTH_AMOUNT),2)  - 
								CONVERT(DECIMAL(18,2),((J.DISCOUNT/100)*R.OTH_AMOUNT),2)
							AS OTH_AMOUNT,	
							CONVERT(DECIMAL(18,2),((J.TAX/100)*R.SERVICE_AMOUNT),2) AS SERVICE_TAX, 
							J.TAX AS SERVICE_TAX_P, 
							CONVERT(DECIMAL(18,2),((J.DISCOUNT/100)*R.SERVICE_AMOUNT),2) AS SERVICE_DISC, 
							J.DISCOUNT AS SERVICE_DISC_P,	
							R.SERVICE_AMOUNT AS R_SERVICE_AMOUNT, R.DR_AMOUNT AS R_DR_AMOUNT, R.H_AMOUNT AS R_H_AMOUNT, R.OTH_AMOUNT AS R_OTH_AMOUNT, 
							R.SERVICE_CHARGE AS R_SERVICE_CHARGE, R.DR_CHARGE AS R_DR_CHARGE, R.H_CHARGE AS R_H_CHARGE, R.OTH_CHARGE AS R_OTH_CHARGE, 
							R.ORG_TAX AS R_ORG_TAX, R.ORG_TAX_P AS R_ORG_TAX_P, 
							R.ORG_DISC AS R_ORG_DISC, R.ORG_DISC_P AS R_ORG_DISC_P,
							J.DESCRIPTION AS DESCRIPTION
					FROM CTE_JSON J
					INNER JOIN REF_SERVICE_CHARGE R ON R.ID = J.SERVICE_CHARGE_ID AND R.SERVICE_ID = J.SERVICE_ID
				)
				INSERT INTO IPD_BILL_DTL 
				(
					BILL_ID, BILL_CODE, PACKAGE_ID, SERVICE_DT_FROM, SERVICE_DT_TO, SERVICE_CHARGE_ID, SERVICE_ID, DR_ID, 
					PATIENT_AMOUNT, PAYER_AMOUNT, 
					SERVICE_TOTAL, QUANTITY, 
					SERVICE_AMOUNT, H_AMOUNT, DR_AMOUNT, OTH_AMOUNT, 
					SERVICE_TAX, SERVICE_TAX_P, SERVICE_DISC, SERVICE_DISC_P, 
					BILL_TAX, BILL_TAX_P, BILL_DISC, BILL_DISC_P, 
					FINAL_TAX, FINAL_TAX_P, FINAL_DISC, FINAL_DISC_P,
					R_SERVICE_AMOUNT, R_DR_AMOUNT, R_H_AMOUNT, R_OTH_AMOUNT,
					R_SERVICE_CHARGE, R_DR_CHARGE, R_H_CHARGE, R_OTH_CHARGE, 
					R_ORG_TAX, R_ORG_TAX_P, R_ORG_DISC, R_ORG_DISC_P, DISCOUNT_BY, DISCOUNT_DESCRIPTION,  
					DESCRIPTION, STATUS, BRANCH_ID, CREATED_BY, CREATED_DT, UPDATED_BY, UPDATED_DT
				)
				SELECT @IP_ID, @IN_CODE, NULL, NULL, NULL, C.SERVICE_CHARGE_ID, C.SERVICE_ID,C.DR_ID,  
					C.SERVICE_AMOUNT * C.QUANTITY AS PATIENT_AMOUNT, 0 AS PAYER_AMOUNT, 
					C.SERVICE_AMOUNT * C.QUANTITY AS SERVICE_TOTAL, C.QUANTITY AS QUANTITY, 
					C.SERVICE_AMOUNT, C.H_AMOUNT, C.DR_AMOUNT, C.OTH_AMOUNT,	
					C.SERVICE_TAX, C.SERVICE_TAX_P, C.SERVICE_DISC, C.SERVICE_DISC_P, 
					0 AS BILL_TAX, 0 AS BILL_TAX_P, 0 AS BILL_DISC, 0 AS BILL_DISC_P,
					0 AS FINAL_TAX, 0 AS FINAL_TAX_P, 0 AS FINAL_DISC, 0 AS FINAL_DISC_P,
					C.R_SERVICE_AMOUNT,  C.R_DR_AMOUNT, C.R_H_AMOUNT, C.R_OTH_AMOUNT,
					C.R_SERVICE_CHARGE, C.R_DR_CHARGE, C.R_H_CHARGE, C.R_OTH_CHARGE, 
					C.R_ORG_TAX, C.R_ORG_TAX_P, C.R_ORG_DISC, C.R_ORG_DISC_P, NULL, NULL,
					C.DESCRIPTION, @IN_STATUS, @IN_BRANCH_ID, @IN_USER_ID, GETDATE(), @IN_USER_ID, GETDATE()
				FROM CTE_CALC C
		
				--		
				-- UPDATE HEADER TABLE
				SET @BILL_AMOUNT = (SELECT SUM(SERVICE_TOTAL) FROM IPD_BILL_DTL WHERE BILL_ID = @IP_ID)
				SET @SERVICE_AMOUNT = (SELECT SUM(R_SERVICE_AMOUNT * QUANTITY) FROM IPD_BILL_DTL WHERE BILL_ID = @IP_ID) 

				IF @SERVICE_AMOUNT > 0
				BEGIN
					SET @SERVICE_TAX = (SELECT SUM(SERVICE_TAX * QUANTITY) FROM IPD_BILL_DTL WHERE BILL_ID = @IP_ID) 
					SET @SERVICE_TAX_P =  CONVERT(DECIMAL(18,2),((@SERVICE_TAX/@SERVICE_AMOUNT)*100))
					SET @SERVICE_DISC = (SELECT SUM(SERVICE_DISC * QUANTITY) FROM IPD_BILL_DTL WHERE BILL_ID = @IP_ID) 
					SET @SERVICE_DISC_P =  CONVERT(DECIMAL(18,2),((@SERVICE_DISC/@SERVICE_AMOUNT)*100))
				END
				--
				UPDATE IPD_BILL 
					SET BILL_AMOUNT = @BILL_AMOUNT, SERVICE_AMOUNT = @SERVICE_AMOUNT,
						PATIENT_AMOUNT = @BILL_AMOUNT, PAYER_AMOUNT = 0,
						SERVICE_TAX = @SERVICE_TAX, SERVICE_TAX_P = @SERVICE_TAX_P,  
						SERVICE_DISC = @SERVICE_DISC, SERVICE_DISC_P = @SERVICE_DISC_P
				WHERE ID = @IP_ID				
				
				--
				SELECT 'SUCCESS' AS SQL_STATUS, 'INSERTED RECORD SUCCESSFULLY' AS SQL_MSG, @@IDENTITY AS SQL_NO 
			END
		--
		SELECT 'ERROR' AS SQL_STATUS, 'NOT INSERTED' AS SQL_MSG, 0 AS SQL_NO 
	END TRY

	BEGIN CATCH
		SET @SQL_NO = ERROR_NUMBER()    
		SET @SQL_MSG = ERROR_MESSAGE()    
		SET @SQL_OBJ = ERROR_PROCEDURE()
		--
		EXEC SP_SYS_ERR_LOG @IN_USER_ID, @IN_BRANCH_ID, @SQL_NO, @SQL_OBJ, @SQL_OBJ, @SQL_MSG, @SQL_STATUS OUTPUT, @SQL_NO OUTPUT, @SQL_MSG OUTPUT
		SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG  AS SQL_MSG, @SQL_NO AS SQL_NO
		--
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SP_IPD_BILL_SERVICE_UPDATE]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_IPD_BILL_SERVICE_UPDATE]
	@IN_USER_ID INT,
	@IN_BRANCH_ID NVARCHAR(56),
	@IN_AID INT,
	@IN_BILL_ID INT,
	@IN_BILL_DTL_ID INT,
	@IN_SERVICE_ID INT,
	@IN_DR_ID INT,
	@IN_QUANTITY INT,
	@IN_TAX DECIMAL(18,2),
	@IN_DISC DECIMAL(18,2),
	@IN_APPROVER INT,
	@IN_DESCRIPTION NVARCHAR(1024),
	@IN_STATUS INT
AS
SET NOCOUNT ON
BEGIN
	BEGIN TRY
		DECLARE @SQL_STATUS VARCHAR(28),  @SQL_NO VARCHAR(28), @SQL_MSG VARCHAR(1024), @SQL_OBJ VARCHAR(1024)
		DECLARE @CR_ID INT, @IP_ID INT, @PID INT
		SELECT @SQL_OBJ = 'SP_IPD_BILL_SERVICE_UPDATE', @SQL_STATUS = 'SUCCESS'
		--
		DECLARE @BILL_AMOUNT DECIMAL(18, 2), @SERVICE_AMOUNT DECIMAL(18, 2), @PATIENT_AMOUNT DECIMAL(18,2), 
				@SERVICE_TAX DECIMAL(18, 2), @SERVICE_TAX_P DECIMAL(18, 2),
				@SERVICE_DISC DECIMAL(18, 2), @SERVICE_DISC_P DECIMAL(18, 2) 
		--
		/*
		DECLARE @PATIENT_AMOUNT DECIMAL(18, 2), @SERVICE_TOTAL DECIMAL(18, 2), 
			@SERVICE_AMOUNT DECIMAL(18, 2), @H_AMOUNT DECIMAL(18, 2), @DR_AMOUNT DECIMAL(18, 2), @OTH_AMOUNT DECIMAL(18, 2), 
			@SERVICE_TAX DECIMAL(18, 2), @SERVICE_TAX_P DECIMAL(18, 2), @SERVICE_DISC DECIMAL(18, 2), @SERVICE_DISC_P DECIMAL(18, 2)
		*/
		SET @PID = (SELECT PID FROM IPD_ADMISSION WHERE ID = @IN_AID AND BRANCH_ID = @IN_BRANCH_ID)
		--
		;With CTE_CHARGES
		AS
		(
			SELECT @IN_BILL_DTL_ID AS ID, R_SERVICE_AMOUNT, R_H_AMOUNT, R_DR_AMOUNT, R_OTH_AMOUNT,
				@IN_TAX AS TAX, @IN_DISC AS DISCOUNT, 
				@IN_QUANTITY AS QUANTITY, @IN_DR_ID AS DR_ID 
			FROM IPD_BILL_DTL WITH(NOLOCK) 
			WHERE ID = @IN_BILL_DTL_ID AND BILL_ID = @IN_BILL_ID 
				AND SERVICE_ID = @IN_SERVICE_ID
				AND BRANCH_ID = @IN_BRANCH_ID
		),
		CTE_CALC
		AS
		(
			SELECT ID,
					CONVERT(DECIMAL(18,2),R_SERVICE_AMOUNT,2) +
					CONVERT(DECIMAL(18,2),((TAX/100)* R_SERVICE_AMOUNT),2) - 
					CONVERT(DECIMAL(18,2),((DISCOUNT/100)*R_SERVICE_AMOUNT),2)
				AS SERVICE_AMOUNT, 
					CONVERT(DECIMAL(18,2),R_H_AMOUNT,2) + 
					CONVERT(DECIMAL(18,2),((TAX/100)* R_H_AMOUNT),2) - 
					CONVERT(DECIMAL(18,2),((DISCOUNT/100)*R_H_AMOUNT),2)
				AS H_AMOUNT, 
					CONVERT(DECIMAL(18,2),R_DR_AMOUNT,2) + 
					CONVERT(DECIMAL(18,2),((TAX/100)* R_DR_AMOUNT),2) - 
					CONVERT(DECIMAL(18,2),((DISCOUNT/100)*R_DR_AMOUNT),2)
				AS DR_AMOUNT, 
					CONVERT(DECIMAL(18,2),R_OTH_AMOUNT,2) + 
					CONVERT(DECIMAL(18,2),((TAX/100)* R_OTH_AMOUNT),2) - 
					CONVERT(DECIMAL(18,2),((DISCOUNT/100)*R_OTH_AMOUNT),2)
				AS OTH_AMOUNT,	
				CONVERT(DECIMAL(18,2),((TAX/100)*R_SERVICE_AMOUNT),2) AS SERVICE_TAX, 
				TAX AS SERVICE_TAX_P, 
				CONVERT(DECIMAL(18,2),((DISCOUNT/100)*R_SERVICE_AMOUNT),2) AS SERVICE_DISC, 
				DISCOUNT AS SERVICE_DISC_P,
				QUANTITY
			FROM CTE_CHARGES J			
		)		
		UPDATE D SET
			D.DR_ID = @IN_DR_ID, 
			D.PATIENT_AMOUNT = C.SERVICE_AMOUNT * C.QUANTITY, 
			-- D.PAYER_AMOUNT = 0, 
			D.SERVICE_TOTAL = C.SERVICE_AMOUNT * C.QUANTITY, 
			D.QUANTITY = C.QUANTITY, 
			D.SERVICE_AMOUNT = C.SERVICE_AMOUNT, 
			D.H_AMOUNT = C.H_AMOUNT, 
			D.DR_AMOUNT = C.DR_AMOUNT , 
			D.OTH_AMOUNT = C.OTH_AMOUNT, 
			D.SERVICE_TAX = C.SERVICE_TAX, 
			D.SERVICE_TAX_P = C.SERVICE_TAX_P, 
			D.SERVICE_DISC = C.SERVICE_DISC, 
			D.SERVICE_DISC_P = C.SERVICE_DISC_P, 
			D.DISCOUNT_BY = @IN_APPROVER,
			D.DISCOUNT_DESCRIPTION = @IN_DESCRIPTION + ' ## ' + D.DISCOUNT_DESCRIPTION,   
			D.STATUS = @IN_STATUS, 
			D.UPDATED_BY = @IN_USER_ID, 
			D.UPDATED_DT = GETDATE() 
		FROM IPD_BILL_DTL D
		INNER JOIN CTE_CALC C ON C.ID = D.ID
		AND D.BRANCH_ID = @IN_BRANCH_ID

		-- UPDATE HEADER TABLE
		SET @BILL_AMOUNT = (SELECT SUM(SERVICE_TOTAL) FROM IPD_BILL_DTL WITH(NOLOCK) WHERE BILL_ID = @IN_BILL_ID AND BRANCH_ID = @IN_BRANCH_ID)
		SET @PATIENT_AMOUNT = (SELECT SUM(PATIENT_AMOUNT) FROM IPD_BILL_DTL WITH(NOLOCK) WHERE BILL_ID = @IN_BILL_ID AND BRANCH_ID = @IN_BRANCH_ID)
		SET @SERVICE_AMOUNT = (SELECT SUM(R_SERVICE_AMOUNT * QUANTITY) FROM IPD_BILL_DTL WITH(NOLOCK) WHERE BILL_ID = @IN_BILL_ID AND BRANCH_ID = @IN_BRANCH_ID) 
		IF @SERVICE_AMOUNT > 0
		BEGIN
			SET @SERVICE_TAX = (SELECT SUM(SERVICE_TAX * QUANTITY) FROM IPD_BILL_DTL WITH(NOLOCK) WHERE BILL_ID = @IN_BILL_ID AND BRANCH_ID = @IN_BRANCH_ID) 
			SET @SERVICE_TAX_P =  CONVERT(DECIMAL(18,2),((@SERVICE_TAX/@SERVICE_AMOUNT)*100))
			SET @SERVICE_DISC = (SELECT SUM(SERVICE_DISC * QUANTITY) FROM IPD_BILL_DTL WITH(NOLOCK) WHERE BILL_ID = @IN_BILL_ID AND BRANCH_ID = @IN_BRANCH_ID) 
			SET @SERVICE_DISC_P =  CONVERT(DECIMAL(18,2),((@SERVICE_DISC/@SERVICE_AMOUNT)*100))
		END 
		--
		UPDATE IPD_BILL 
			SET BILL_AMOUNT = @BILL_AMOUNT, SERVICE_AMOUNT = @SERVICE_AMOUNT, PATIENT_AMOUNT = @PATIENT_AMOUNT,
				SERVICE_TAX = @SERVICE_TAX, SERVICE_TAX_P = @SERVICE_TAX_P,  
				SERVICE_DISC = @SERVICE_DISC, SERVICE_DISC_P = @SERVICE_DISC_P
		WHERE ID = @IN_BILL_ID AND BRANCH_ID = @IN_BRANCH_ID

		--
		SELECT 'SUCCESS' AS SQL_STATUS, 'INSERTED RECORD SUCCESSFULLY' AS SQL_MSG, @@IDENTITY AS SQL_NO 
	END TRY

	BEGIN CATCH
		SET @SQL_NO = ERROR_NUMBER()    
		SET @SQL_MSG = ERROR_MESSAGE()    
		SET @SQL_OBJ = ERROR_PROCEDURE()
		--
		EXEC SP_SYS_ERR_LOG @IN_USER_ID, @IN_BRANCH_ID, @SQL_NO, @SQL_OBJ, @SQL_OBJ, @SQL_MSG, @SQL_STATUS OUTPUT, @SQL_NO OUTPUT, @SQL_MSG OUTPUT
		SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG  AS SQL_MSG, @SQL_NO AS SQL_NO
		--
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SP_IPD_BILL_UPDATE]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[SP_IPD_BILL_UPDATE]
	@IN_USER_ID INT,
	@IN_BRANCH_ID NVARCHAR(56),
	@IN_AID INT,
	@IN_BILL_ID INT,
	@IN_TAX DECIMAL(18,2),
	@IN_DISC DECIMAL(18,2),
	@IN_APPROVER INT,
	@IN_DESCRIPTION NVARCHAR(1024),
	@IN_STATUS INT
AS
SET NOCOUNT ON
BEGIN
	BEGIN TRY
		DECLARE @SQL_STATUS VARCHAR(28),  @SQL_NO VARCHAR(28), @SQL_MSG VARCHAR(1024), @SQL_OBJ VARCHAR(1024)
		DECLARE @CR_ID INT, @IP_ID INT, @PID INT
		SELECT @SQL_OBJ = 'SP_IPD_BILL_UPDATE', @SQL_STATUS = 'SUCCESS'
		--
		DECLARE @BILL_AMOUNT DECIMAL(18, 2), @SERVICE_AMOUNT DECIMAL(18, 2), @PATIENT_AMOUNT DECIMAL(18,2), 
				@BILL_TAX DECIMAL(18, 2), @BILL_DISC DECIMAL(18, 2) 

		--NOTE :- -- 1 IS FOR SERVICE AND BILL BOTH APPLICABLE, 2 IS FOR SERVICE ONLY AND 3 IS FOR BILL ONLY
				  --  0 then nothing applicable
		DECLARE @TAX_TYPE INT = 1  
		DECLARE @DISC_TYPE INT = 1  
		--
		/*
		DECLARE @PATIENT_AMOUNT DECIMAL(18, 2), @SERVICE_TOTAL DECIMAL(18, 2), 
			@SERVICE_AMOUNT DECIMAL(18, 2), @H_AMOUNT DECIMAL(18, 2), @DR_AMOUNT DECIMAL(18, 2), @OTH_AMOUNT DECIMAL(18, 2), 
			@SERVICE_TAX DECIMAL(18, 2), @SERVICE_TAX_P DECIMAL(18, 2), @SERVICE_DISC DECIMAL(18, 2), @SERVICE_DISC_P DECIMAL(18, 2)
		*/
		
		SET @PID = (SELECT PID FROM IPD_ADMISSION WITH(NOLOCK) WHERE ID = @IN_AID AND BRANCH_ID = @IN_BRANCH_ID)

		--
		;With CTE_CHARGES
		AS
		(
			SELECT ID, R_SERVICE_AMOUNT, R_H_AMOUNT, R_DR_AMOUNT, R_OTH_AMOUNT,
				CASE WHEN @TAX_TYPE = 1 THEN @IN_TAX + SERVICE_TAX_P
					 WHEN @TAX_TYPE = 2 THEN SERVICE_TAX_P 
					 WHEN @TAX_TYPE = 3 THEN @IN_TAX 
					 ELSE 0 END AS TAX, --		@IN_TAX AS TAX, 
				CASE WHEN @DISC_TYPE = 1 THEN @IN_DISC + SERVICE_DISC_P
					 WHEN @DISC_TYPE = 2 THEN SERVICE_DISC_P 
					 WHEN @DISC_TYPE = 3 THEN @IN_DISC 
					 ELSE 0 END AS DISCOUNT, --		@IN_DISC AS DISCOUNT, 
				QUANTITY
			FROM IPD_BILL_DTL WITH(NOLOCK) WHERE BILL_ID = @IN_BILL_ID AND BRANCH_ID = @IN_BRANCH_ID
		),
		CTE_CALC
		AS
		(
			SELECT ID,
					CONVERT(DECIMAL(18,2),R_SERVICE_AMOUNT,2) +
					CONVERT(DECIMAL(18,2),((TAX/100)* R_SERVICE_AMOUNT),2) - 
					CONVERT(DECIMAL(18,2),((DISCOUNT/100)*R_SERVICE_AMOUNT),2)
				AS SERVICE_AMOUNT, 
					CONVERT(DECIMAL(18,2),R_H_AMOUNT,2) + 
					CONVERT(DECIMAL(18,2),((TAX/100)* R_H_AMOUNT),2) - 
					CONVERT(DECIMAL(18,2),((DISCOUNT/100)*R_H_AMOUNT),2)
				AS H_AMOUNT, 
					CONVERT(DECIMAL(18,2),R_DR_AMOUNT,2) + 
					CONVERT(DECIMAL(18,2),((TAX/100)* R_DR_AMOUNT),2) - 
					CONVERT(DECIMAL(18,2),((DISCOUNT/100)*R_DR_AMOUNT),2)
				AS DR_AMOUNT, 
					CONVERT(DECIMAL(18,2),R_OTH_AMOUNT,2) + 
					CONVERT(DECIMAL(18,2),((TAX/100)* R_OTH_AMOUNT),2) - 
					CONVERT(DECIMAL(18,2),((DISCOUNT/100)*R_OTH_AMOUNT),2)
				AS OTH_AMOUNT,	
				CONVERT(DECIMAL(18,2),((@IN_TAX/100)*R_SERVICE_AMOUNT),2) AS BILL_TAX, 
				@IN_TAX AS BILL_TAX_P, 
				CONVERT(DECIMAL(18,2),((@IN_DISC/100)*R_SERVICE_AMOUNT),2) AS BILL_DISC, 
				@IN_DISC AS BILL_DISC_P,
				QUANTITY
			FROM CTE_CHARGES J			
		)		
		UPDATE D SET
			D.PATIENT_AMOUNT = C.SERVICE_AMOUNT * C.QUANTITY, 
			-- D.PAYER_AMOUNT = 0, 
			D.SERVICE_TOTAL = C.SERVICE_AMOUNT * C.QUANTITY, 
			D.SERVICE_AMOUNT = C.SERVICE_AMOUNT, 
			D.H_AMOUNT = C.H_AMOUNT, 
			D.DR_AMOUNT = C.DR_AMOUNT , 
			D.OTH_AMOUNT = C.OTH_AMOUNT, 
			D.BILL_TAX = C.BILL_TAX, 
			D.BILL_TAX_P = C.BILL_TAX_P, 
			D.BILL_DISC =  C.BILL_DISC, 
			D.BILL_DISC_P = C.BILL_DISC_P, 
			D.DISCOUNT_BY = @IN_APPROVER,
			D.DISCOUNT_DESCRIPTION = @IN_DESCRIPTION + ' ## ' + D.DISCOUNT_DESCRIPTION,   
			D.STATUS = @IN_STATUS, 
			D.UPDATED_BY = @IN_USER_ID, 
			D.UPDATED_DT = GETDATE() 
		FROM IPD_BILL_DTL D WITH(NOLOCK)
		INNER JOIN CTE_CALC C ON C.ID = D.ID
		WHERE D.BRANCH_ID = @IN_BRANCH_ID

		-- UPDATE HEADER TABLE
		SET @BILL_AMOUNT = (SELECT SUM(SERVICE_TOTAL) FROM IPD_BILL_DTL WHERE BILL_ID = @IN_BILL_ID  AND BRANCH_ID = @IN_BRANCH_ID)
		SET @PATIENT_AMOUNT = (SELECT SUM(PATIENT_AMOUNT) FROM IPD_BILL_DTL WHERE BILL_ID = @IN_BILL_ID AND BRANCH_ID = @IN_BRANCH_ID)
		SET @SERVICE_AMOUNT = (SELECT SUM(R_SERVICE_AMOUNT * QUANTITY) FROM IPD_BILL_DTL WHERE BILL_ID = @IN_BILL_ID AND BRANCH_ID = @IN_BRANCH_ID) 
		SET @BILL_TAX = (SELECT SUM(BILL_TAX * QUANTITY) FROM IPD_BILL_DTL WHERE BILL_ID = @IN_BILL_ID AND BRANCH_ID = @IN_BRANCH_ID) 
		SET @BILL_DISC = (SELECT SUM(BILL_DISC * QUANTITY) FROM IPD_BILL_DTL WHERE BILL_ID = @IN_BILL_ID AND BRANCH_ID = @IN_BRANCH_ID) 
		--
		UPDATE IPD_BILL 
			SET BILL_AMOUNT = @BILL_AMOUNT, 
				-- SERVICE_AMOUNT = @SERVICE_AMOUNT, ####THIS WILL NOT CHANGE WHILE UPDATE BILL
				PATIENT_AMOUNT = @PATIENT_AMOUNT,
				BILL_TAX = @BILL_TAX, BILL_TAX_P = @IN_TAX, BILL_DISC = @BILL_DISC, BILL_DISC_P = @IN_DISC
		WHERE ID = @IN_BILL_ID AND BRANCH_ID = @IN_BRANCH_ID
	
		--
		SELECT 'SUCCESS' AS SQL_STATUS, 'INSERTED RECORD SUCCESSFULLY' AS SQL_MSG, @@IDENTITY AS SQL_NO 
	END TRY

	BEGIN CATCH
		SET @SQL_NO = ERROR_NUMBER()    
		SET @SQL_MSG = ERROR_MESSAGE()    
		SET @SQL_OBJ = ERROR_PROCEDURE()
		--
		EXEC SP_SYS_ERR_LOG @IN_USER_ID, @IN_BRANCH_ID, @SQL_NO, @SQL_OBJ, @SQL_OBJ, @SQL_MSG, @SQL_STATUS OUTPUT, @SQL_NO OUTPUT, @SQL_MSG OUTPUT
		SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG  AS SQL_MSG, @SQL_NO AS SQL_NO
		--
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SP_IPD_NURSE_STATION_UPSERT]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE    PROCEDURE [dbo].[SP_IPD_NURSE_STATION_UPSERT]
	@IN_USER_ID INT,
	@IN_BRANCH_ID NVARCHAR(56),
	@IN_AID INT,
	@IN_AID_CODE NVARCHAR(56),
	@IN_TYPE NVARCHAR(56)
AS
BEGIN
	BEGIN TRY
		DECLARE @SQL_STATUS VARCHAR(28),  @SQL_NO VARCHAR(28), @SQL_MSG VARCHAR(1024), @SQL_OBJ VARCHAR(1024)
		SELECT @SQL_OBJ = 'SP_IPD_NURSE_STATION_UPSERT', @SQL_STATUS = 'SUCCESS'
		--
		UPDATE IPD_ADMISSION 
			SET ADMISSION_STATUS_ID = 2 -- Ready for Billing
		WHERE ID = @IN_AID AND ADMISSION_STATUS_ID = 1	AND BRANCH_ID = @IN_BRANCH_ID				
		--
		SELECT 'SUCCESS' AS SQL_STATUS, 'INSERTED RECORD SUCCESSFULLY' AS SQL_MSG, @@IDENTITY AS SQL_NO 
		
	END TRY

	BEGIN CATCH
		SET @SQL_NO = ERROR_NUMBER()    
		SET @SQL_MSG = ERROR_MESSAGE()    
		SET @SQL_OBJ = ERROR_PROCEDURE()
		--
		EXEC SP_SYS_ERR_LOG @IN_USER_ID, @IN_BRANCH_ID, @SQL_NO, @SQL_OBJ, @SQL_OBJ, @SQL_MSG, @SQL_STATUS OUTPUT, @SQL_NO OUTPUT, @SQL_MSG OUTPUT
		SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG  AS SQL_MSG, @SQL_NO AS SQL_NO
		--
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SP_IPD_PATIENT_DISCHARGE_INSERT]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[SP_IPD_PATIENT_DISCHARGE_INSERT]
	@IN_USER_ID INT,
	@IN_BRANCH_ID INT,
	@IN_AID INT,	
	@IN_PID INT,
	@IN_APPROVAL_ID INT,
	@IN_DISCHARGE_STATUS_ID INT,
	@IN_DISCHARGE_DT DATETIME,
	@IN_DESCRIPTION NVARCHAR(MAX),
	@IN_STATUS INT
AS
SET NOCOUNT ON
BEGIN
	BEGIN TRY
		DECLARE @SQL_STATUS VARCHAR(28),  @SQL_NO VARCHAR(28), @SQL_MSG VARCHAR(1024), @SQL_OBJ VARCHAR(1024)
		DECLARE @CR_ID INT
		SELECT @SQL_OBJ = 'SP_IPD_PATIENT_DISCHARGE_INSERT', @SQL_STATUS = 'SUCCESS'
		
		-- INSERT IPD_DR_TRANSFER
		INSERT INTO IPD_PATIENT_DISCHARGE (
				PID, AID, APPROVAL_ID, DISCHARGE_STATUS_ID, DISCHARGE_DT, 
			DESCRIPTION, STATUS, BRANCH_ID, CREATED_BY, CREATED_DT, UPDATED_BY, UPDATED_DT)
		VALUES(@IN_PID, @IN_AID, @IN_APPROVAL_ID, @IN_DISCHARGE_STATUS_ID, GETDATE(),
			@IN_DESCRIPTION, @IN_STATUS, @IN_BRANCH_ID, @IN_USER_ID, GETDATE(), @IN_USER_ID, GETDATE()
			)

		SET @SQL_NO = SCOPE_IDENTITY()

		-- UPDATE PAYER IN ADMISSION
		UPDATE IPD_ADMISSION SET ADMISSION_STATUS_ID = (SELECT ID FROM REF_ADMISSION_STATUS WITH(NOLOCK) WHERE CODE = 'D' AND BRANCH_ID = @IN_BRANCH_ID) WHERE ID = @IN_AID AND PID = @IN_PID AND BRANCH_ID = @IN_BRANCH_ID
		
		SELECT @SQL_MSG = VALUE1 FROM SYS_PARAMETER WITH(NOLOCK) WHERE CODE = 'INSERT_MESSAGE' AND BRANCH_ID = @IN_BRANCH_ID	
						
		SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG AS SQL_MSG, @SQL_NO AS SQL_NO 
	END TRY

	BEGIN CATCH
		SET @SQL_NO = ERROR_NUMBER()    
		SET @SQL_MSG = ERROR_MESSAGE()    
		SET @SQL_OBJ = ERROR_PROCEDURE()
		--
		EXEC SP_SYS_ERR_LOG @IN_USER_ID, @IN_BRANCH_ID, @SQL_NO, @SQL_OBJ, @SQL_OBJ, @SQL_MSG, @SQL_STATUS OUTPUT, @SQL_NO OUTPUT, @SQL_MSG OUTPUT
		SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG  AS SQL_MSG, @SQL_NO AS SQL_NO
		--
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SP_OPD_BILL_GET]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[SP_OPD_BILL_GET]
	@IN_USER_ID INT,
	@IN_BRANCH_ID INT,
	@IN_ID INT,
	@IN_TYPE INT
AS
SET NOCOUNT ON
BEGIN
	BEGIN TRY
		DECLARE @SQL_STATUS VARCHAR(28),  @SQL_NO VARCHAR(28), @SQL_MSG VARCHAR(1024), @SQL_OBJ VARCHAR(1024)
		--
		IF (@IN_TYPE = 0)
			BEGIN 
				SELECT
					B.ID, B.CODE AS BILL_ID, B.PID AS PATIENT_ID, 	PR.NAME AS PATIENT , 
					B.PAYER_ID, C.NAME AS PAYER, 
					PR.GENDER_ID AS GENDER_ID, G.NAME AS GENDER,PR.AGE, PR.AGE + 'Yr. / '  + G.NAME  AS AGE_GENDER, 
					'#A-12, Complete Address' As ADDRESS,
					B.SERVICE_CATEGORY_ID, SC.NAME AS SERVICE_CATEGORY,  PR.DOB, PR.IDENTITY_TYPE_ID, PR.UID, PR.MOBILE, PR.EMAIL,
					B.SERVICE_TAX, B.SERVICE_TAX_P, B.SERVICE_DISC, B.SERVICE_DISC_P,
					B.PAYBLE_AMOUNT,
					B.BILL_AMOUNT, B.BILL_TAX_P, B.BILL_TAX, B.BILL_DISC_P, B.BILL_DISC, 
					B.FINAL_TAX, B.FINAL_TAX_P, B.FINAL_DISC, B.FINAL_DISC_P,
					'Dr. R.T Srivastava' AS DR_NAME,
					B.DESCRIPTION, B.STATUS AS STATUS_ID, S.NAME AS STATUS, B.BRANCH_ID, 
					B.CREATED_BY, B.CREATED_DT, 
					B.UPDATED_BY, B.UPDATED_DT,
					FORMAT(B.CREATED_DT, 'dd/MM/yyyy hh:mm tt') AS BILL_DATE,
					--'2100.00' as Bill_AMOUNT,
					'Bill Description. Total amount paid. Thank You!' as BILL_DESCRIPTION,
					'OPD Visit' as DEPARTMENT
				FROM OPD_BILL AS B WITH(NOLOCK)
				INNER JOIN PATIENT_REGISTRATION PR WITH(NOLOCK) on PR.ID = B.PID
				INNER JOIN REF_STATUS S WITH(NOLOCK) ON B.STATUS = S.ID
				LEFT OUTER JOIN REF_COMPANY C WITH(NOLOCK) ON B.PAYER_ID = C.ID
				LEFT OUTER JOIN REF_GENDER G WITH(NOLOCK) ON PR.GENDER_ID = G.ID
				LEFT OUTER JOIN REF_IDENTITY_TYPE I WITH(NOLOCK) ON PR.IDENTITY_TYPE_ID = I.ID
				LEFT OUTER JOIN REF_SERVICE_CATEGORY SC WITH(NOLOCK) ON B.SERVICE_CATEGORY_ID = SC.ID
				WHERE B.ID = CASE WHEN @IN_ID = 0 THEN B.ID ELSE @IN_ID END
				AND B.BRANCH_ID = @IN_BRANCH_ID
			END
		
		IF (@IN_TYPE = 1)
			BEGIN 
				SELECT
					D.ID, D.BILL_ID, 
					D.SERVICE_ID,S.NAME AS SERVICE, D.QUANTITY, D.SERVICE_TOTAL AS TOTAL_AMOUNT, D.SERVICE_AMOUNT,
					D.DR_AMOUNT, D.H_AMOUNT, D.OTH_AMOUNT, 
					D.SERVICE_TAX, D.SERVICE_TAX_P, D.SERVICE_DISC, D.SERVICE_DISC_P,
					D.R_SERVICE_AMOUNT, D.R_DR_AMOUNT, D.R_H_AMOUNT, D.R_OTH_AMOUNT, 
					D.R_SERVICE_CHARGE, D.R_DR_CHARGE, D.R_H_CHARGE, D.R_OTH_CHARGE, 
					D.R_ORG_TAX, D.R_ORG_TAX_P, D.R_ORG_DISC, D.R_ORG_DISC_P, D.DESCRIPTION, D.STATUS,
					D.BRANCH_ID, D.CREATED_BY, D.CREATED_DT, D.UPDATED_BY, D.UPDATED_DT
				FROM OPD_BILL B WITH(NOLOCK)
				INNER JOIN OPD_BILL_DTL D WITH(NOLOCK) ON B.ID = D.BILL_ID
				INNER JOIN REF_SERVICE S WITH(NOLOCK) ON D.SERVICE_ID = S.ID
				WHERE B.ID = CASE WHEN @IN_ID = 0 THEN B.ID ELSE @IN_ID END	
				AND B.BRANCH_ID = @IN_BRANCH_ID
			END
	END TRY
	--
	BEGIN CATCH
	SET @SQL_NO = ERROR_NUMBER()    
	SET @SQL_MSG = ERROR_MESSAGE()    
	SET @SQL_OBJ = ERROR_PROCEDURE()
	--
	EXEC SP_SYS_ERR_LOG @IN_USER_ID, @IN_BRANCH_ID, @SQL_NO, @SQL_OBJ, @SQL_OBJ, @SQL_MSG, @SQL_STATUS OUTPUT, @SQL_NO OUTPUT, @SQL_MSG OUTPUT
	--
	SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG  AS SQL_MSG, @SQL_NO AS SQL_NO
	--
	END CATCH
END

GO
/****** Object:  StoredProcedure [dbo].[SP_OPD_BILL_INSERT]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_OPD_BILL_INSERT]
	@IN_USER_ID INT,
	@IN_BRANCH_ID INT,
	@IN_YEAR_ID NVARCHAR(56),
	@IN_CODE NVARCHAR(56),
	@IN_PID INT,
	@IN_PAYER_ID INT,
	@IN_SERVICE_CATEGORY_ID INT,
	@IN_NAME NVARCHAR(256),
	@IN_GENDER INT,
	@IN_AGE NVARCHAR(56),
	@IN_DOB DATE,
	@IN_IDENTITY_TYPE_ID INT,
	@IN_UID NVARCHAR(56),
	@IN_MOBILE NVARCHAR(56),	
	@IN_EMAIL NVARCHAR(56),
	@IN_ADDRESS NVARCHAR(1024) ,
	@IN_DESCRIPTION NVARCHAR(1024),
	@IN_STATUS INT,
	@IN_OPD_BILL_DTL NVARCHAR(MAX)
AS
SET NOCOUNT ON
BEGIN
	BEGIN TRY
		DECLARE @SQL_STATUS VARCHAR(28),  @SQL_NO VARCHAR(28), @SQL_MSG VARCHAR(1024), @SQL_OBJ VARCHAR(1024)
		SELECT  @SQL_OBJ = 'SP_OPD_BILL_INSERT', @SQL_STATUS = 'SUCCESS'
		--		
		DECLARE @PAYBLE_AMOUNT DECIMAL(18, 2), @BILL_AMOUNT DECIMAL(18, 2), 
				@RECEIVED_AMOUNT DECIMAL(18, 2), 
				@PATIENT_AMOUNT DECIMAL(18, 2),
				@SERVICE_AMOUNT DECIMAL(18, 2), 
				@SERVICE_TAX DECIMAL(18, 2), @SERVICE_TAX_P DECIMAL(18, 2),
				@SERVICE_DISC DECIMAL(18, 2), @SERVICE_DISC_P DECIMAL(18, 2) 
				
		
		DECLARE @TBL_STATUS TABLE (SQL_STATUS VARCHAR(100),SQL_MSG nVARCHAR(200), SQL_NO VARCHAR(50));
		DECLARE @CODE_REG NVARCHAR(56), @CR_ID_REG INT
		DECLARE @CODE_BILL NVARCHAR(56), @CR_ID_BILL INT, @OP_ID INT
		--
		SELECT @IN_YEAR_ID = YEAR_CODE   , @CODE_REG = CODE, @CR_ID_REG = CR_ID FROM UDF_GET_CODE('OPD','REGISTRATION','')		

		SET @IN_STATUS = 1
		--***********************************************************************
		--Patient Registration Start
		--***********************************************************************
		DECLARE @SQL_STATUS_PR VARCHAR(28),
			@SQL_NO_PR VARCHAR(28),
			@SQL_MSG_PR VARCHAR(1024) 
		IF (NOT EXISTS(SELECT * FROM PATIENT_REGISTRATION WITH(NOLOCK) WHERE ID = @IN_PID AND BRANCH_ID = @IN_BRANCH_ID)) 
			BEGIN 
			IF @IN_NAME <> ''
				BEGIN
				EXEC SP_PATIENT_REGISTRATION_INSERT_UPDATE_RETURN_ID 
						@IN_USER_ID, @IN_BRANCH_ID, @IN_PID, @IN_YEAR_ID, @CODE_REG, @IN_NAME, NULL, 
						0, @IN_GENDER, @IN_AGE, @IN_DOB, @IN_IDENTITY_TYPE_ID, @IN_UID, @IN_MOBILE, 
						@IN_EMAIL, 0, '', '', '', @IN_ADDRESS, 
						'', 0, 0, '', '', 0, 
						'', 0, 0, 0, '', 
						'', 0, 0, '', 0, '', 
						'', '', '', '', '', 
						'', '', '', '', '', 
						'', '', '', '', '', 
						'', '', '', '', '', 
						'', NULL, '', '', '', 
						'', '', 0, 
						NULL, @IN_DESCRIPTION, @IN_STATUS,
						@SQL_STATUS_PR OUTPUT, @SQL_NO_PR OUTPUT, @SQL_MSG_PR OUTPUT				
				END
			END
		ELSE
			BEGIN
				SET @SQL_NO_PR = @IN_PID
				SELECT @CODE_REG = CODE FROM PATIENT_REGISTRATION WITH(NOLOCK) WHERE ID = @IN_PID AND BRANCH_ID = @IN_BRANCH_ID
			END

		/* SP_PATIENT_REGISTRATION_INSERT_UPDATE_RETURN_ID PARAMETERS
		@IN_USER_ID INT,@IN_BRANCH_ID INT,@IN_ID INT,@IN_YEAR_ID NVARCHAR(56),@IN_CODE NVARCHAR(56),@IN_NAME NVARCHAR(256),@IN_REGISTRATION_DT DATETIME,
		@IN_PAYER_ID INT  ,@IN_GENDER_ID INT ,@IN_AGE NVARCHAR(56),@IN_DOB DATE,@IN_IDENTITY_TYPE_ID INT  ,@IN_UID NVARCHAR(56)  ,@IN_MOBILE NVARCHAR(56) ,	
		@IN_EMAIL NVARCHAR(56) ,@IN_BLOOD_GROUP_ID INT ,@IN_HEIGHT NVARCHAR(56),@IN_WEIGHT NVARCHAR(56),@IN_OBESITY NVARCHAR(56),@IN_ADDRESS NVARCHAR(1024) ,
		@IN_CITY NVARCHAR(256),@IN_STATE_ID INT, @IN_COUNTRY_ID INT,@IN_PIN NVARCHAR(56) ,@IN_KIN_NAME NVARCHAR(256) ,@IN_KIN_RELATION_ID INT ,
		@IN_KIN_MOBILE NVARCHAR(56) ,@IN_MARITAL_STATUS_ID INT,@IN_RELIGION_ID INT,	@IN_PATIENT_CATEGORY_ID INT ,@IN_P_ADDRESS NVARCHAR(1024) ,
		@IN_P_CITY NVARCHAR(256) ,@IN_P_STATE_ID INT ,@IN_P_COUNTRY_ID INT ,@IN_P_PIN NVARCHAR(56),@IN_NATIONALITY_ID INT, @IN_F_NAME NVARCHAR(256),
		@IN_F_MOBILE NVARCHAR(56),	@IN_F_EMAIL NVARCHAR(56),@IN_M_NAME NVARCHAR(256),@IN_M_MOBILE NVARCHAR(56),@IN_M_EMAIL NVARCHAR(56),
		@IN_S_NAME NVARCHAR(256),@IN_S_MOBILE NVARCHAR(56),	@IN_S_EMAIL NVARCHAR(56),@IN_G_NAME NVARCHAR(256),@IN_G_MOBILE NVARCHAR(56),	
		@IN_G_EMAIL NVARCHAR(56),@IN_REF_ID NVARCHAR(56),@IN_REF_BY NVARCHAR(256) ,@IN_REF_HOSPITAL NVARCHAR(256) ,@IN_ORG_ID NVARCHAR(56),
		@IN_ORG_NAME NVARCHAR(256),@IN_ORG_EMP_ID VARCHAR(56),@IN_ORG_MOBILE NVARCHAR(56),@IN_ORG_EMAIL NVARCHAR(56),@IN_INS_TYPE NVARCHAR(56) ,
		@IN_INS_ID NVARCHAR(56),@IN_MATURITY_DT DATE,@IN_MATURITY_PERIOD NVARCHAR(56) ,@IN_MATURED_AMOUNT NVARCHAR(56),@IN_RECOV_AMOUNT NVARCHAR(56),
		@IN_EMPLOYMENT_CATEGORY_ID NVARCHAR(56) ,@IN_SPECIALIZATION NVARCHAR(56),@IN_EMPLOYMENT_STATUS_ID INT ,	
		@IN_EMPLOYMENT_DT DATETIME,	@IN_DESCRIPTION NVARCHAR(1024), @IN_STATUS INT,
		@SQL_STATUS VARCHAR(28) OUTPUT,@SQL_NO VARCHAR(28) OUTPUT,@SQL_MSG VARCHAR(1024)  OUTPUT
		*/
		--***********************************************************************
		--Patient Registration End
		--***********************************************************************
		IF @SQL_NO_PR > 0
		BEGIN
			SELECT @IN_YEAR_ID = YEAR_CODE, @IN_CODE = CODE, @CR_ID_BILL = CR_ID FROM UDF_GET_CODE('OPD','OPDBILL','')
		
			INSERT INTO OPD_BILL 
				(YEAR_ID, CR_ID, CODE, BILL_DT, PID, REG_CODE, PAYER_ID, SERVICE_CATEGORY_ID, 
				PATIENT_AMOUNT, PAYER_AMOUNT, RECEIVED_AMOUNT, PAYBLE_AMOUNT, BILL_AMOUNT, SERVICE_AMOUNT, 
				SERVICE_TAX, SERVICE_TAX_P, SERVICE_DISC, SERVICE_DISC_P,
				BILL_TAX, BILL_TAX_P, BILL_DISC, BILL_DISC_P, FINAL_TAX, FINAL_TAX_P, FINAL_DISC, FINAL_DISC_P, 
				DESCRIPTION, STATUS, BRANCH_ID, CREATED_BY, CREATED_DT, UPDATED_BY, UPDATED_DT)
			VALUES
				(@IN_YEAR_ID, @CR_ID_BILL, @IN_CODE, GETDATE(), @SQL_NO_PR, @CODE_REG, @IN_PAYER_ID, @IN_SERVICE_CATEGORY_ID, 
				 0, 0, 0, 0, 0, 0, 
				 0, 0, 0, 0,	
				 0, 0, 0, 0, 0, 0, 0, 0,
				@IN_DESCRIPTION, @IN_STATUS, @IN_BRANCH_ID, @IN_USER_ID, GETDATE(), @IN_USER_ID, GETDATE())
		
			SET @OP_ID = SCOPE_IDENTITY()

			/*
			DECLARE @json NVARCHAR(MAX) =
			'[{"SERVICE_ID" : "6", "DR_ID" : "1", "QUANTITY" : "1", "AMOUNT" : "1275", "SERVICE_AMOUNT" : "1275", 
			"SERVICE_TOTAL" : "1275", "D_AMOUNT" : "0", "H_AMOUNT" : "0", "OTH_AMOUNT" : "0", "TAX" : "0", 
			"DISCOUNT" : "0", "DESCRIPTION" : "", "STATUS" : "1"},{"SERVICE_ID" : "6", "DR_ID" : "1", "QUANTITY" : "5", 
			"AMOUNT" : "1275", "SERVICE_AMOUNT" : "1275", "SERVICE_TOTAL" : "6375", "D_AMOUNT" : "0", "H_AMOUNT" : "0", "OTH_AMOUNT" : "0", 
			"TAX" : "0", "DISCOUNT" : "0", "DESCRIPTION" : "", "STATUS" : "1"}]'
			*/

			;With CTE_JSON
			AS
			(
				/*SELECT *
				FROM OPENJSON(@IN_OPD_BILL_DTL)
					WITH (
							SERVICE_CHARGE_ID int '$.CHARGE_ID',
							SERVICE_ID int '$.SERVICE_ID',
							DR_ID int '$.DR_ID',
							TAX DECIMAL(18, 2) '$.TAX',
							DISCOUNT DECIMAL(18, 2) '$.DISCOUNT',
							QUANTITY int '$.QUANTITY',
							DESCRIPTION nvarchar(1024) '$.DESCRIPTION'
					)
				*/
				SELECT
					CASE ISNUMERIC(JSON_VALUE(VALUE,'$.CHARGE_ID')) WHEN 1 THEN JSON_VALUE(VALUE,'$.CHARGE_ID') ELSE '0' END AS SERVICE_CHARGE_ID,
					CASE ISNUMERIC(JSON_VALUE(VALUE,'$.SERVICE_ID')) WHEN 1 THEN JSON_VALUE(VALUE,'$.SERVICE_ID') ELSE '0' END AS SERVICE_ID,
					CASE ISNUMERIC(JSON_VALUE(VALUE,'$.DR_ID')) WHEN 1 THEN JSON_VALUE(VALUE,'$.DR_ID') ELSE '0' END AS DR_ID,
					CONVERT(DECIMAL(18,2),(CASE ISNUMERIC(JSON_VALUE(VALUE,'$.TAX')) WHEN 1 THEN JSON_VALUE(VALUE,'$.TAX') ELSE '0' END)) AS TAX,
					CONVERT(DECIMAL(18,2),(CASE ISNUMERIC(JSON_VALUE(VALUE,'$.DISCOUNT')) WHEN 1 THEN JSON_VALUE(VALUE,'$.DISCOUNT') ELSE '0' END)) AS DISCOUNT,
					CASE ISNUMERIC(JSON_VALUE(VALUE,'$.QUANTITY')) WHEN 1 THEN JSON_VALUE(VALUE,'$.QUANTITY') ELSE '0' END AS QUANTITY,
					JSON_VALUE(VALUE,'$.DESCRIPTION') AS DESCRIPTION
				FROM OPENJSON(@IN_OPD_BILL_DTL)
			),
			CTE_CALC
			AS
			(
				SELECT  J.SERVICE_CHARGE_ID, J.SERVICE_ID,J.DR_ID, J.QUANTITY AS QUANTITY,  	 
							CONVERT(DECIMAL(18,2),R.SERVICE_AMOUNT,2) + 
							CONVERT(DECIMAL(18,2),((J.TAX/100)* R.SERVICE_AMOUNT),2) - 
							CONVERT(DECIMAL(18,2),((J.DISCOUNT/100)*R.SERVICE_AMOUNT),2)
						AS SERVICE_AMOUNT, 
							CONVERT(DECIMAL(18,2),R.H_AMOUNT,2) + 
							CONVERT(DECIMAL(18,2),((J.TAX/100)* R.H_AMOUNT),2) - 
							CONVERT(DECIMAL(18,2),((J.DISCOUNT/100)*R.H_AMOUNT),2)
						AS H_AMOUNT,
							CONVERT(DECIMAL(18,2),R.DR_AMOUNT,2) + 
							CONVERT(DECIMAL(18,2),((J.TAX/100)* R.DR_AMOUNT),2) - 
							CONVERT(DECIMAL(18,2),((J.DISCOUNT/100)*R.DR_AMOUNT),2)
						AS DR_AMOUNT, 
							CONVERT(DECIMAL(18,2),R.OTH_AMOUNT,2) + 
							CONVERT(DECIMAL(18,2),((J.TAX/100)* R.OTH_AMOUNT),2) - 
							CONVERT(DECIMAL(18,2),((J.DISCOUNT/100)*R.OTH_AMOUNT),2)
						AS OTH_AMOUNT,	
						CONVERT(DECIMAL(18,2),((J.TAX/100)*R.SERVICE_AMOUNT),2) AS SERVICE_TAX, 
						J.TAX AS SERVICE_TAX_P, 
						CONVERT(DECIMAL(18,2),((J.DISCOUNT/100)*R.SERVICE_AMOUNT),2) AS SERVICE_DISC, 
						J.DISCOUNT AS SERVICE_DISC_P,	
						R.SERVICE_AMOUNT AS R_SERVICE_AMOUNT, R.DR_AMOUNT AS R_DR_AMOUNT, R.H_AMOUNT AS R_H_AMOUNT, R.OTH_AMOUNT AS R_OTH_AMOUNT, 
						R.SERVICE_CHARGE AS R_SERVICE_CHARGE, R.DR_CHARGE AS R_DR_CHARGE, R.H_CHARGE AS R_H_CHARGE, R.OTH_CHARGE AS R_OTH_CHARGE, 
						R.ORG_TAX AS R_ORG_TAX, R.ORG_TAX_P AS R_ORG_TAX_P, 
						R.ORG_DISC AS R_ORG_DISC, R.ORG_DISC_P AS R_ORG_DISC_P,
						J.DESCRIPTION AS DESCRIPTION
				FROM CTE_JSON J
				INNER JOIN REF_SERVICE_CHARGE R WITH(NOLOCK) ON R.ID = J.SERVICE_CHARGE_ID AND R.SERVICE_ID = J.SERVICE_ID
				WHERE R.BRANCH_ID = @IN_BRANCH_ID

			)
			INSERT INTO OPD_BILL_DTL 
			(
				BILL_ID, BILL_CODE, SERVICE_CHARGE_ID, SERVICE_ID, DR_ID,
				PATIENT_AMOUNT, PAYER_AMOUNT, 
				SERVICE_TOTAL, QUANTITY, 
				SERVICE_AMOUNT, H_AMOUNT, DR_AMOUNT, OTH_AMOUNT,	
				SERVICE_TAX, SERVICE_TAX_P, SERVICE_DISC, SERVICE_DISC_P, 
				BILL_TAX, BILL_TAX_P, BILL_DISC, BILL_DISC_P,	
				FINAL_TAX, FINAL_TAX_P, FINAL_DISC, FINAL_DISC_P, 
				R_SERVICE_AMOUNT, R_DR_AMOUNT, R_H_AMOUNT, R_OTH_AMOUNT,
				R_SERVICE_CHARGE, R_DR_CHARGE, R_H_CHARGE, R_OTH_CHARGE, 
				R_ORG_TAX, R_ORG_TAX_P, R_ORG_DISC, R_ORG_DISC_P,	
				DESCRIPTION, STATUS, BRANCH_ID, CREATED_BY, CREATED_DT, UPDATED_BY, UPDATED_DT
			)
			SELECT @OP_ID, @IN_CODE, C.SERVICE_CHARGE_ID, C.SERVICE_ID,C.DR_ID,  
				C.SERVICE_AMOUNT * C.QUANTITY AS PATIENT_AMOUNT, 0 AS PAYER_AMOUNT, 
				C.SERVICE_AMOUNT * C.QUANTITY AS SERVICE_TOTAL, C.QUANTITY AS QUANTITY, 
				C.SERVICE_AMOUNT, C.H_AMOUNT, C.DR_AMOUNT, C.OTH_AMOUNT,	
				C.SERVICE_TAX, C.SERVICE_TAX_P, C.SERVICE_DISC, C.SERVICE_DISC_P, 
				0 AS BILL_TAX, 0 AS BILL_TAX_P, 0 AS BILL_DISC, 0 AS BILL_DISC_P,
				0 AS FINAL_TAX, 0 AS FINAL_TAX_P, 0 AS FINAL_DISC, 0 AS FINAL_DISC_P, 
				C.R_SERVICE_AMOUNT, C.R_DR_AMOUNT, C.R_H_AMOUNT, C.R_OTH_AMOUNT,
				C.R_SERVICE_CHARGE, C.R_DR_CHARGE, C.R_H_CHARGE, C.R_OTH_CHARGE, 
				C.R_ORG_TAX, C.R_ORG_TAX_P, C.R_ORG_DISC, C.R_ORG_DISC_P,
				C.DESCRIPTION, @IN_STATUS, @IN_BRANCH_ID, @IN_USER_ID, GETDATE(), @IN_USER_ID, GETDATE()
			FROM CTE_CALC C
			-- UPDATE HEADER TABLE
			SET @BILL_AMOUNT = (SELECT SUM(SERVICE_TOTAL) FROM OPD_BILL_DTL WHERE BILL_ID = @OP_ID)
			SET @PAYBLE_AMOUNT = ROUND(@BILL_AMOUNT,0)
			SET @RECEIVED_AMOUNT = @PAYBLE_AMOUNT
			SET @PATIENT_AMOUNT = @PAYBLE_AMOUNT
			SET @SERVICE_AMOUNT = (SELECT SUM(R_SERVICE_AMOUNT * QUANTITY) FROM OPD_BILL_DTL WHERE BILL_ID = @OP_ID) 

			IF @SERVICE_AMOUNT > 0
			BEGIN
				SET @SERVICE_TAX = (SELECT SUM(SERVICE_TAX * QUANTITY) FROM OPD_BILL_DTL WHERE BILL_ID = @OP_ID)
				SET @SERVICE_TAX_P =  CONVERT(DECIMAL(18,2),((@SERVICE_TAX/@SERVICE_AMOUNT)*100))
				SET @SERVICE_DISC = (SELECT SUM(SERVICE_DISC * QUANTITY) FROM OPD_BILL_DTL WHERE BILL_ID = @OP_ID)
				SET @SERVICE_DISC_P =  CONVERT(DECIMAL(18,2),((@SERVICE_DISC/@SERVICE_AMOUNT)*100))
			END
			--
			UPDATE OPD_BILL 
				SET PATIENT_AMOUNT = @PATIENT_AMOUNT,
				RECEIVED_AMOUNT = @RECEIVED_AMOUNT, 
				PAYBLE_AMOUNT = @PAYBLE_AMOUNT, 
				BILL_AMOUNT = @BILL_AMOUNT,  SERVICE_AMOUNT = @SERVICE_AMOUNT, 
				SERVICE_TAX = @SERVICE_TAX, SERVICE_TAX_P = @SERVICE_TAX_P,  
				SERVICE_DISC = @SERVICE_DISC, SERVICE_DISC_P = @SERVICE_DISC_P
			WHERE ID = @OP_ID

			SELECT 'SUCCESS' AS SQL_STATUS, 'INSERTED RECORD SUCCESSFULLY' AS SQL_MSG, @OP_ID AS SQL_NO 
		END
		--
		SELECT 'ERROR' AS SQL_STATUS, 'NOT INSERTED' AS SQL_MSG, 0 AS SQL_NO 
	END TRY

	BEGIN CATCH
		SET @SQL_NO = ERROR_NUMBER()    
		SET @SQL_MSG = ERROR_MESSAGE()    
		SET @SQL_OBJ = ERROR_PROCEDURE()
		--
		EXEC SP_SYS_ERR_LOG @IN_USER_ID, @IN_BRANCH_ID, @SQL_NO, @SQL_OBJ, @SQL_OBJ, @SQL_MSG, @SQL_STATUS OUTPUT, @SQL_NO OUTPUT, @SQL_MSG OUTPUT
		SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG  AS SQL_MSG, @SQL_NO AS SQL_NO
		--
	END CATCH
END

GO
/****** Object:  StoredProcedure [dbo].[SP_PATIENT_ADVANCE_INSERT]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_PATIENT_ADVANCE_INSERT]
	@IN_USER_ID INT,
	@IN_BRANCH_ID INT,
	@IN_PID INT,
	@IN_ADVANCE_AMOUNT DECIMAL(18,2),
	@IN_RECEIVED_BY INT,
	@IN_RECEIVED_NOTE NVARCHAR(1024) ,
	@IN_DESCRIPTION NVARCHAR(1024),
	@IN_STATUS INT
AS
SET NOCOUNT ON
BEGIN
	BEGIN TRY
		DECLARE @SQL_STATUS VARCHAR(28),  @SQL_NO VARCHAR(28), @SQL_MSG VARCHAR(1024), @SQL_OBJ VARCHAR(1024)
		SELECT  @SQL_OBJ = 'SP_PATIENT_ADVANCE_INSERT', @SQL_STATUS = 'SUCCESS'

		DECLARE @CR_ID INT, @YEAR_ID INT, @CODE NVARCHAR(56), @STATUS INT, @PID INT

		SELECT @YEAR_ID = YEAR_CODE, @CODE = CODE, @CR_ID = CR_ID FROM UDF_GET_CODE('OPD','PATIENTADVANCE','')
		SET @STATUS = 1
	
		INSERT INTO PATIENT_ADVANCE 
			(
				YEAR_ID, CR_ID, CODE, BILL_DT, PID, 
				ADVANCE_AMOUNT, ADVANCE_STATUS, REF_BILL, RECEIVED_BY, RECEIVED_NOTE, 
				DESCRIPTION, STATUS, BRANCH_ID, CREATED_BY, CREATED_DT, UPDATED_BY, UPDATED_DT
			)
		VALUES
			(
				@YEAR_ID, @CR_ID, @CODE, GETDATE(), @IN_PID,
				@IN_ADVANCE_AMOUNT, NULL, NULL,	@IN_RECEIVED_BY, @IN_RECEIVED_NOTE,
				@IN_DESCRIPTION, @IN_STATUS, @IN_BRANCH_ID, @IN_USER_ID, GETDATE(), @IN_USER_ID, GETDATE()
			)
		
		SET @SQL_NO = SCOPE_IDENTITY()

		SELECT 'SUCCESS' AS SQL_STATUS, 'INSERTED RECORD SUCCESSFULLY' AS SQL_MSG, @SQL_NO AS SQL_NO 
		
	END TRY

	BEGIN CATCH
		SET @SQL_NO = ERROR_NUMBER()    
		SET @SQL_MSG = ERROR_MESSAGE()    
		SET @SQL_OBJ = ERROR_PROCEDURE()
		--
		EXEC SP_SYS_ERR_LOG @IN_USER_ID, @IN_BRANCH_ID, @SQL_NO, @SQL_OBJ, @SQL_OBJ, @SQL_MSG, @SQL_STATUS OUTPUT, @SQL_NO OUTPUT, @SQL_MSG OUTPUT
		SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG  AS SQL_MSG, @SQL_NO AS SQL_NO
		--
	END CATCH
END

GO
/****** Object:  StoredProcedure [dbo].[SP_PATIENT_LIST_GET]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[SP_PATIENT_LIST_GET]
	@IN_USER_ID INT,
	@IN_BRANCH_ID INT,
	@IN_PID INT  = 0,
	@IN_PCODE NVARCHAR(56) = 0,
	@IN_AID INT  = 0,
	@IN_ACODE NVARCHAR(56) = 0,
	@IN_STATUS INT = 0, 
	@IN_TYPE INT = 0 -- NOTE 0 FOR ALL PATIENT EXCELP ADMITTED, 1 FOR CURRENT ADMITTED, 3 FOR ALL ADMISSION, 4 ALL PATIENT LIST  
AS
SET NOCOUNT ON
BEGIN
	BEGIN TRY
		DECLARE @SQL_STATUS VARCHAR(28),  @SQL_NO VARCHAR(28), @SQL_MSG VARCHAR(1024), @SQL_OBJ VARCHAR(1024)
		--
		IF @IN_TYPE = 0 -- New Admission
		BEGIN
			SELECT 
				M.ID , M.CODE , M.REGISTRATION_DT AS DT, 
					M.CODE + ' | ' + M.NAME AS NAME
			FROM PATIENT_REGISTRATION M WITH(NOLOCK)		
			INNER JOIN REF_STATUS S WITH(NOLOCK) ON M.STATUS = S.ID
			WHERE M.ID = CASE WHEN @IN_PID = 0 THEN M.ID ELSE @IN_PID END
				AND M.CODE = CASE WHEN @IN_PCODE = '0' THEN M.CODE ELSE @IN_PCODE END
				AND M.STATUS = CASE WHEN @IN_STATUS = 0 THEN M.STATUS ELSE @IN_STATUS END
				AND M.ID NOT IN (SELECT PID FROM IPD_ADMISSION WHERE ADMISSION_STATUS_ID = 1)
				AND M.BRANCH_ID = @IN_BRANCH_ID
			ORDER BY M.REGISTRATION_DT DESC
		END
		ELSE IF @IN_TYPE = 1 -- Current Admitted
		BEGIN
			SELECT 
				A.ID, A.CODE, A.ADMISSION_DT AS DT, 
					M.CODE + ' | ' + COALESCE(A.CODE,'') + ' | ' + COALESCE(RB.NAME,'') + ' | ' + M.NAME  AS NAME
			FROM PATIENT_REGISTRATION M WITH(NOLOCK)
			INNER JOIN IPD_ADMISSION A WITH(NOLOCK) ON M.ID = A.PID				
			INNER JOIN REF_STATUS S WITH(NOLOCK) ON M.STATUS = S.ID
			LEFT OUTER JOIN REF_BED RB WITH(NOLOCK) ON A.BED_ID = RB.ID
			WHERE M.ID = CASE WHEN @IN_PID = 0 THEN M.ID ELSE @IN_PID END
				AND M.CODE = CASE WHEN @IN_PCODE = '0' THEN M.CODE ELSE @IN_PCODE END
				AND M.STATUS = CASE WHEN @IN_STATUS = 0 THEN M.STATUS ELSE @IN_STATUS END
				AND COALESCE(A.ID,'') = CASE WHEN @IN_AID = 0 THEN COALESCE(A.ID,'') ELSE @IN_AID END
				AND COALESCE(A.CODE,'') = CASE WHEN @IN_ACODE = '0' THEN COALESCE(A.CODE,'') ELSE @IN_ACODE END	
				AND A.ADMISSION_STATUS_ID = 1-- IN (SELECT ID FROM IPD_ADMISSION WHERE ADMISSION_STATUS_ID = 1)
				AND M.BRANCH_ID = @IN_BRANCH_ID
			ORDER BY A.ADMISSION_DT, M.REGISTRATION_DT  DESC
		END
		ELSE IF @IN_TYPE = 2 -- ALL Admission
		BEGIN
			SELECT 
				A.ID, A.CODE, A.ADMISSION_DT AS DT, 
					M.CODE + ' | ' + COALESCE(A.CODE,'') + ' | ' + M.NAME + ' | ' + COALESCE(RB.NAME,'') AS NAME
			FROM PATIENT_REGISTRATION M WITH(NOLOCK)
			INNER JOIN IPD_ADMISSION A WITH(NOLOCK) ON M.ID = A.PID		
			INNER JOIN REF_STATUS S WITH(NOLOCK) ON M.STATUS = S.ID
			LEFT OUTER JOIN REF_BED RB WITH(NOLOCK) ON A.BED_ID = RB.ID
			WHERE M.ID = CASE WHEN @IN_PID = 0 THEN M.ID ELSE @IN_PID END
				AND M.CODE = CASE WHEN @IN_PCODE = '0' THEN M.CODE ELSE @IN_PCODE END
				AND M.STATUS = CASE WHEN @IN_STATUS = 0 THEN M.STATUS ELSE @IN_STATUS END
				AND COALESCE(A.ID,'') = CASE WHEN @IN_AID = 0 THEN COALESCE(A.ID,'') ELSE @IN_AID END
				AND COALESCE(A.CODE,'') = CASE WHEN @IN_ACODE = '0' THEN COALESCE(A.CODE,'') ELSE @IN_ACODE END			
				AND M.BRANCH_ID = @IN_BRANCH_ID
			ORDER BY M.ID, A.ADMISSION_DT DESC
		END
		ELSE --Patient List
		BEGIN
			SELECT 
				M.ID , M.CODE , M.REGISTRATION_DT AS DT, 
					M.CODE + ' | ' + M.NAME AS NAME
			FROM PATIENT_REGISTRATION M WITH(NOLOCK)		
			INNER JOIN REF_STATUS S WITH(NOLOCK) ON M.STATUS = S.ID
			WHERE M.ID = CASE WHEN @IN_PID = 0 THEN M.ID ELSE @IN_PID END
				AND M.CODE = CASE WHEN @IN_PCODE = '0' THEN M.CODE ELSE @IN_PCODE END
				AND M.STATUS = CASE WHEN @IN_STATUS = 0 THEN M.STATUS ELSE @IN_STATUS END
				AND M.BRANCH_ID = @IN_BRANCH_ID
			ORDER BY M.REGISTRATION_DT DESC
		END


	END TRY
	--
	BEGIN CATCH
	SET @SQL_NO = ERROR_NUMBER()    
	SET @SQL_MSG = ERROR_MESSAGE()    
	SET @SQL_OBJ = ERROR_PROCEDURE()
	--
	EXEC SP_SYS_ERR_LOG @IN_USER_ID, @IN_BRANCH_ID, @SQL_NO, @SQL_OBJ, @SQL_OBJ, @SQL_MSG, @SQL_STATUS OUTPUT, @SQL_NO OUTPUT, @SQL_MSG OUTPUT
	--
	SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG  AS SQL_MSG, @SQL_NO AS SQL_NO
	--
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SP_PATIENT_REGISTRATION_GET]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[SP_PATIENT_REGISTRATION_GET]
	@IN_USER_ID INT,
	@IN_BRANCH_ID INT,
	@IN_ID INT  = 0,
	@IN_CODE NVARCHAR(56) = 0,
	@IN_STATUS INT = 0 
AS
SET NOCOUNT ON
BEGIN
	BEGIN TRY
		DECLARE @SQL_STATUS VARCHAR(28),  @SQL_NO VARCHAR(28), @SQL_MSG VARCHAR(1024), @SQL_OBJ VARCHAR(1024)
		--
		SELECT 
			M.ID, M.CODE, M.CODE + ' | ' + M.NAME AS NAME, 
			M.NAME AS PATIENT_NAME,
			COALESCE(A.ID,'') AS ADMIISSION_ID, COALESCE(A.CODE,'') AS ADMISSION_CODE,
			M.YEAR_ID,CONVERT (DATE, M.REGISTRATION_DT) AS REGISTRATION_DT,M.PAYER_ID,C.NAME AS PAYER,M.GENDER_ID,G.NAME AS GENDER,
			M.AGE,M.DOB,M.IDENTITY_TYPE_ID,I.NAME AS IDENTITY_TYPE,M.UID,M.MOBILE,M.EMAIL,
			M.BLOOD_GROUP_ID,BG.NAME AS BLOOD_GROUP,M.HEIGHT,M.WEIGHT,M.OBESITY,M.ADDRESS,
			M.CITY,M.STATE_ID,CS.NAME AS STATE, M.COUNTRY_ID, CC.NAME AS COUNTRY,
			M.PIN,M.KIN_NAME,M.KIN_RELATION_ID,KR.NAME AS KIN_RELATION, M.KIN_MOBILE,
			M.MARITAL_STATUS_ID, KMS.NAME AS MARITAL_STATUS,
			M.RELIGION_ID,R.NAME AS RELIGION,M.PATIENT_CATEGORY_ID,PCT.NAME AS PATIENT_CATEGORY, 
			M.P_ADDRESS,M.P_CITY,M.P_STATE_ID, PS.NAME AS P_STATE,M.P_COUNTRY_ID,PC.NAME AS P_COUNTRY,
			M.P_PIN,M.NATIONALITY_ID,N.NATIONALITY AS NATIONALITY, M.F_NAME,M.F_MOBILE,M.F_EMAIL,
			M.M_NAME,M.M_MOBILE,M.M_EMAIL,M.S_NAME,M.S_MOBILE,M.S_EMAIL,M.G_NAME,
			M.G_MOBILE,M.G_EMAIL,M.REF_ID,M.REF_BY,M.REF_HOSPITAL,M.ORG_ID,M.ORG_NAME,
			M.ORG_EMP_ID,M.ORG_MOBILE,M.ORG_EMAIL,M.INS_TYPE,M.INS_ID,M.MATURITY_DT,
			M.MATURITY_PERIOD,M.MATURED_AMOUNT,M.RECOV_AMOUNT,M.EMPLOYMENT_CATEGORY_ID,
			M.SPECIALIZATION,M.EMPLOYMENT_STATUS_ID,ES.NAME AS EMPLOYMENT_STATUS, M.EMPLOYMENT_DT,M.DESCRIPTION,
			M.STATUS AS STATUS_ID, S.NAME AS STATUS,M.BRANCH_ID,M.CREATED_BY,M.CREATED_DT,M.UPDATED_BY,M.UPDATED_DT
		FROM PATIENT_REGISTRATION M WITH(NOLOCK)
		INNER JOIN REF_STATUS S WITH(NOLOCK) ON M.STATUS = S.ID
		LEFT OUTER JOIN REF_COMPANY C WITH(NOLOCK) ON M.PAYER_ID = C.ID
		LEFT OUTER JOIN REF_GENDER G WITH(NOLOCK) ON M.GENDER_ID = G.ID
		LEFT OUTER JOIN REF_IDENTITY_TYPE I WITH(NOLOCK) ON M.IDENTITY_TYPE_ID = I.ID
		LEFT OUTER JOIN REF_BLOOD_GROUP BG WITH(NOLOCK) ON M.BLOOD_GROUP_ID = BG.ID
		LEFT OUTER JOIN REF_STATE CS WITH(NOLOCK) ON CS.ID = M.STATE_ID
		LEFT OUTER JOIN REF_COUNTRY CC WITH(NOLOCK) ON CC.ID = M.COUNTRY_ID
		LEFT OUTER JOIN REF_RELATION KR WITH(NOLOCK) ON KR.ID = M.KIN_RELATION_ID
		LEFT OUTER JOIN REF_MARITAL_STATUS KMS WITH(NOLOCK) ON KMS.ID = M.MARITAL_STATUS_ID
		LEFT OUTER JOIN REF_RELIGION R WITH(NOLOCK) ON R.ID = M.RELIGION_ID
		LEFT OUTER JOIN REF_PATIENT_CATEGORY PCT WITH(NOLOCK) ON PCT.ID = M.PATIENT_CATEGORY_ID
		LEFT OUTER JOIN REF_STATE PS WITH(NOLOCK) ON PS.ID = M.P_STATE_ID
		LEFT OUTER JOIN REF_COUNTRY PC WITH(NOLOCK) ON PC.ID = M.P_COUNTRY_ID
		LEFT OUTER JOIN REF_COUNTRY N WITH(NOLOCK) ON N.ID = M.NATIONALITY_ID
		LEFT OUTER JOIN REF_EMPLOYMENT_STATUS ES WITH(NOLOCK) ON ES.ID = M.EMPLOYMENT_STATUS_ID		
		LEFT OUTER JOIN IPD_ADMISSION A WITH(NOLOCK) ON A.PID = M.ID AND A.ADMISSION_STATUS_ID = 1
		WHERE M.ID = CASE WHEN @IN_ID = 0 THEN M.ID ELSE @IN_ID END
			AND M.CODE = CASE WHEN @IN_CODE = '0' THEN M.CODE ELSE @IN_CODE END
			AND M.STATUS = CASE WHEN @IN_STATUS = 0 THEN M.STATUS ELSE @IN_STATUS END
			AND M.BRANCH_ID = @IN_BRANCH_ID
		ORDER BY M.REGISTRATION_DT DESC
	END TRY
	--
	BEGIN CATCH
	SET @SQL_NO = ERROR_NUMBER()    
	SET @SQL_MSG = ERROR_MESSAGE()    
	SET @SQL_OBJ = ERROR_PROCEDURE()
	--
	EXEC SP_SYS_ERR_LOG @IN_USER_ID, @IN_BRANCH_ID, @SQL_NO, @SQL_OBJ, @SQL_OBJ, @SQL_MSG, @SQL_STATUS OUTPUT, @SQL_NO OUTPUT, @SQL_MSG OUTPUT
	--
	SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG  AS SQL_MSG, @SQL_NO AS SQL_NO
	--
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SP_PATIENT_REGISTRATION_INSERT_UPDATE]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[SP_PATIENT_REGISTRATION_INSERT_UPDATE]
	@IN_USER_ID INT,
	@IN_BRANCH_ID INT,
	@IN_ID INT,
	@IN_YEAR_ID NVARCHAR(56),
	@IN_CODE NVARCHAR(56),
	@IN_NAME NVARCHAR(256),
	@IN_REGISTRATION_DT DATETIME,
	@IN_PAYER_ID INT  ,
	@IN_GENDER_ID INT ,
	@IN_AGE NVARCHAR(56),
	@IN_DOB DATE,
	@IN_IDENTITY_TYPE_ID INT  ,
	@IN_UID NVARCHAR(56)  ,
	@IN_MOBILE NVARCHAR(56) ,	
	@IN_EMAIL NVARCHAR(56) ,
	@IN_BLOOD_GROUP_ID INT ,
	@IN_HEIGHT NVARCHAR(56),
	@IN_WEIGHT NVARCHAR(56),
	@IN_OBESITY NVARCHAR(56),
	@IN_ADDRESS NVARCHAR(1024) ,
	@IN_CITY NVARCHAR(256),
	@IN_STATE_ID INT,
	@IN_COUNTRY_ID INT,
	@IN_PIN NVARCHAR(56) ,
	@IN_KIN_NAME NVARCHAR(256) ,
	@IN_KIN_RELATION_ID INT ,
	@IN_KIN_MOBILE NVARCHAR(56) ,
	@IN_MARITAL_STATUS_ID INT,
	@IN_RELIGION_ID INT,	
	@IN_PATIENT_CATEGORY_ID INT ,
	@IN_P_ADDRESS NVARCHAR(1024) ,
	@IN_P_CITY NVARCHAR(256) ,
	@IN_P_STATE_ID INT ,
	@IN_P_COUNTRY_ID INT ,
	@IN_P_PIN NVARCHAR(56),
	@IN_NATIONALITY_ID INT, 		
	@IN_F_NAME NVARCHAR(256),
	@IN_F_MOBILE NVARCHAR(56),	
	@IN_F_EMAIL NVARCHAR(56),
	@IN_M_NAME NVARCHAR(256),
	@IN_M_MOBILE NVARCHAR(56),	
	@IN_M_EMAIL NVARCHAR(56),
	@IN_S_NAME NVARCHAR(256),
	@IN_S_MOBILE NVARCHAR(56),	
	@IN_S_EMAIL NVARCHAR(56),
	@IN_G_NAME NVARCHAR(256),
	@IN_G_MOBILE NVARCHAR(56),	
	@IN_G_EMAIL NVARCHAR(56),
	@IN_REF_ID NVARCHAR(56),
	@IN_REF_BY NVARCHAR(256) ,
	@IN_REF_HOSPITAL NVARCHAR(256) ,
	@IN_ORG_ID NVARCHAR(56),
	@IN_ORG_NAME NVARCHAR(256),
	@IN_ORG_EMP_ID VARCHAR(56),
	@IN_ORG_MOBILE NVARCHAR(56),
	@IN_ORG_EMAIL NVARCHAR(56),		
	@IN_INS_TYPE NVARCHAR(56) ,
	@IN_INS_ID NVARCHAR(56),
	@IN_MATURITY_DT DATE,
	@IN_MATURITY_PERIOD NVARCHAR(56) ,
	@IN_MATURED_AMOUNT NVARCHAR(56),
	@IN_RECOV_AMOUNT NVARCHAR(56),
	@IN_EMPLOYMENT_CATEGORY_ID NVARCHAR(56) ,		
	@IN_SPECIALIZATION NVARCHAR(56),
	@IN_EMPLOYMENT_STATUS_ID INT ,	
	@IN_EMPLOYMENT_DT DATETIME,	
	@IN_DESCRIPTION NVARCHAR(1024),
	@IN_STATUS INT
AS
SET NOCOUNT ON
BEGIN
	BEGIN TRY
		DECLARE @SQL_STATUS VARCHAR(28),  @SQL_NO VARCHAR(28), @SQL_MSG nVARCHAR(1024), @SQL_OBJ VARCHAR(1024)
		DECLARE @CR_ID INT
		SELECT @SQL_OBJ = 'SP_PATIENT_REGISTRATION_INSERT_UPDATE', @SQL_STATUS = 'SUCCESS'
		--
		SELECT @IN_MATURED_AMOUNT = CASE ISNUMERIC(@IN_MATURED_AMOUNT) WHEN 1 THEN @IN_MATURED_AMOUNT ELSE '0.00' END
		SELECT @IN_RECOV_AMOUNT = CASE ISNUMERIC(@IN_RECOV_AMOUNT) WHEN 1 THEN @IN_RECOV_AMOUNT ELSE '0.00' END
		--
		SELECT @IN_YEAR_ID = YEAR_CODE   , @IN_CODE = CODE, @CR_ID = CR_ID FROM UDF_GET_CODE('OPD','REGISTRATION','')

		IF NOT EXISTS (SELECT 1 FROM PATIENT_REGISTRATION WITH(NOLOCK) WHERE ID = @IN_ID AND BRANCH_ID = @IN_BRANCH_ID)
			BEGIN
				INSERT INTO PATIENT_REGISTRATION (YEAR_ID, CR_ID, CODE,NAME,REGISTRATION_DT,PAYER_ID,GENDER_ID,AGE,DOB,
						IDENTITY_TYPE_ID,UID,MOBILE,	EMAIL,BLOOD_GROUP_ID,HEIGHT,WEIGHT,OBESITY,
						ADDRESS,CITY,STATE_ID,COUNTRY_ID,PIN,KIN_NAME,KIN_RELATION_ID,KIN_MOBILE,
						MARITAL_STATUS_ID,RELIGION_ID,PATIENT_CATEGORY_ID,P_ADDRESS,
						P_CITY,P_STATE_ID,P_COUNTRY_ID,P_PIN,NATIONALITY_ID,
						F_NAME,F_MOBILE,F_EMAIL,M_NAME,M_MOBILE,M_EMAIL,
						S_NAME,S_MOBILE,S_EMAIL,G_NAME,G_MOBILE,G_EMAIL,
						REF_ID,REF_BY,REF_HOSPITAL,ORG_ID,ORG_NAME,ORG_EMP_ID,
						ORG_MOBILE,ORG_EMAIL,INS_TYPE,INS_ID,MATURITY_DT,
						MATURITY_PERIOD,MATURED_AMOUNT,RECOV_AMOUNT,
						EMPLOYMENT_CATEGORY_ID,SPECIALIZATION,EMPLOYMENT_STATUS_ID,	
						EMPLOYMENT_DT,DESCRIPTION,STATUS,
						BRANCH_ID,CREATED_BY,CREATED_DT,UPDATED_BY,UPDATED_DT)
				VALUES ( @IN_YEAR_ID, @CR_ID, @IN_CODE, @IN_NAME, GETDATE(), @IN_PAYER_ID, @IN_GENDER_ID, @IN_AGE, @IN_DOB, 
						@IN_IDENTITY_TYPE_ID, @IN_UID, @IN_MOBILE, @IN_EMAIL, @IN_BLOOD_GROUP_ID, @IN_HEIGHT, @IN_WEIGHT, @IN_OBESITY, 
						@IN_ADDRESS, @IN_CITY, @IN_STATE_ID, @IN_COUNTRY_ID, @IN_PIN, @IN_KIN_NAME, @IN_KIN_RELATION_ID, @IN_KIN_MOBILE, 
						@IN_MARITAL_STATUS_ID, @IN_RELIGION_ID, @IN_PATIENT_CATEGORY_ID, @IN_P_ADDRESS, 
						@IN_P_CITY, @IN_P_STATE_ID, @IN_P_COUNTRY_ID, @IN_P_PIN, @IN_NATIONALITY_ID, 
						@IN_F_NAME, @IN_F_MOBILE, @IN_F_EMAIL, @IN_M_NAME, @IN_M_MOBILE, @IN_M_EMAIL, 
						@IN_S_NAME, @IN_S_MOBILE, @IN_S_EMAIL, @IN_G_NAME, @IN_G_MOBILE, @IN_G_EMAIL, 
						@IN_REF_ID, @IN_REF_BY, @IN_REF_HOSPITAL, @IN_ORG_ID, @IN_ORG_NAME, @IN_ORG_EMP_ID, 
						@IN_ORG_MOBILE, @IN_ORG_EMAIL, @IN_INS_TYPE, @IN_INS_ID, @IN_MATURITY_DT, 
						@IN_MATURITY_PERIOD, @IN_MATURED_AMOUNT, @IN_RECOV_AMOUNT, 
						@IN_EMPLOYMENT_CATEGORY_ID, @IN_SPECIALIZATION, @IN_EMPLOYMENT_STATUS_ID, 
						@IN_EMPLOYMENT_DT, @IN_DESCRIPTION, 1, 
						@IN_BRANCH_ID, @IN_USER_ID, GETDATE(), @IN_USER_ID, GETDATE())			
				--
				SET @SQL_NO = SCOPE_IDENTITY()
				--
				SET @SQL_MSG = 'INSERTED RECORD SUCCESSFULLY'
			END
		ELSE
			BEGIN
				UPDATE PATIENT_REGISTRATION SET
					NAME = @IN_NAME,
					REGISTRATION_DT = @IN_REGISTRATION_DT,
					PAYER_ID = @IN_PAYER_ID,
					GENDER_ID = @IN_GENDER_ID,
					AGE = @IN_AGE,
					DOB = @IN_DOB,
					IDENTITY_TYPE_ID = @IN_IDENTITY_TYPE_ID,
					UID = @IN_UID,
					MOBILE = @IN_MOBILE,
					EMAIL = @IN_EMAIL,
					BLOOD_GROUP_ID = @IN_BLOOD_GROUP_ID,
					HEIGHT = @IN_HEIGHT,
					WEIGHT = @IN_WEIGHT,
					OBESITY = @IN_OBESITY,
					ADDRESS = @IN_ADDRESS,
					CITY = @IN_CITY,
					STATE_ID = @IN_STATE_ID,
					COUNTRY_ID = @IN_COUNTRY_ID,
					PIN = @IN_PIN,
					KIN_NAME = @IN_KIN_NAME,
					KIN_RELATION_ID = @IN_KIN_RELATION_ID,
					KIN_MOBILE = @IN_KIN_MOBILE,
					MARITAL_STATUS_ID = @IN_MARITAL_STATUS_ID,
					RELIGION_ID = @IN_RELIGION_ID,
					PATIENT_CATEGORY_ID = @IN_PATIENT_CATEGORY_ID,
					P_ADDRESS = @IN_P_ADDRESS,
					P_CITY = @IN_P_CITY,
					P_STATE_ID = @IN_P_STATE_ID,
					P_COUNTRY_ID = @IN_P_COUNTRY_ID,
					P_PIN = @IN_P_PIN,
					NATIONALITY_ID = @IN_NATIONALITY_ID,
					F_NAME = @IN_F_NAME,
					F_MOBILE = @IN_F_MOBILE,
					F_EMAIL = @IN_F_EMAIL,
					M_NAME = @IN_M_NAME,
					M_MOBILE = @IN_M_MOBILE,
					M_EMAIL = @IN_M_EMAIL,
					S_NAME = @IN_S_NAME,
					S_MOBILE = @IN_S_MOBILE,
					S_EMAIL = @IN_S_EMAIL,
					G_NAME = @IN_G_NAME,
					G_MOBILE = @IN_G_MOBILE,
					G_EMAIL = @IN_G_EMAIL,
					REF_ID = @IN_REF_ID,
					REF_BY = @IN_REF_BY,
					REF_HOSPITAL = @IN_REF_HOSPITAL,
					ORG_ID = @IN_ORG_ID,
					ORG_NAME = @IN_ORG_NAME,
					ORG_EMP_ID = @IN_ORG_EMP_ID,
					ORG_MOBILE = @IN_ORG_MOBILE,
					ORG_EMAIL = @IN_ORG_EMAIL,
					INS_TYPE = @IN_INS_TYPE,
					INS_ID = @IN_INS_ID,
					MATURITY_DT = @IN_MATURITY_DT,
					MATURITY_PERIOD = @IN_MATURITY_PERIOD,
					MATURED_AMOUNT = @IN_MATURED_AMOUNT,
					RECOV_AMOUNT = @IN_RECOV_AMOUNT,
					EMPLOYMENT_CATEGORY_ID = @IN_EMPLOYMENT_CATEGORY_ID,
					SPECIALIZATION = @IN_SPECIALIZATION,
					EMPLOYMENT_STATUS_ID = @IN_EMPLOYMENT_STATUS_ID,
					EMPLOYMENT_DT = @IN_EMPLOYMENT_DT,
					DESCRIPTION = @IN_DESCRIPTION,
					STATUS = @IN_STATUS,
					BRANCH_ID = @IN_BRANCH_ID,
					UPDATED_BY = @IN_USER_ID,
					UPDATED_DT = GETDATE()					
				WHERE ID = @IN_ID AND BRANCH_ID = @IN_BRANCH_ID
				--
				SET @SQL_NO = @IN_ID
				--
				SET @SQL_MSG = 'UPDATED RECORD SUCCESSFULLY'
			END
		--
		--
		EXEC SP_SYS_AUDIT_LOG @IN_USER_ID, @IN_BRANCH_ID, @SQL_NO, @SQL_OBJ , @SQL_OBJ, @SQL_MSG, 
			@SQL_STATUS = @SQL_STATUS OUTPUT, @SQL_NO = @SQL_NO OUTPUT, @SQL_MSG = @SQL_MSG OUTPUT
		--

		SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG AS SQL_MSG, @SQL_NO AS SQL_NO

	END TRY

	BEGIN CATCH
		SET @SQL_NO = ERROR_NUMBER()    
		SET @SQL_MSG = ERROR_MESSAGE()    
		SET @SQL_OBJ = ERROR_PROCEDURE()
		--
		EXEC SP_SYS_ERR_LOG @IN_USER_ID, @IN_BRANCH_ID, @SQL_NO, @SQL_OBJ, @SQL_OBJ, @SQL_MSG, @SQL_STATUS OUTPUT, @SQL_NO OUTPUT, @SQL_MSG OUTPUT
		SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG  AS SQL_MSG, @SQL_NO AS SQL_NO
		--
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SP_PATIENT_REGISTRATION_INSERT_UPDATE_RETURN_ID]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[SP_PATIENT_REGISTRATION_INSERT_UPDATE_RETURN_ID]
@IN_USER_ID INT,
@IN_BRANCH_ID INT,
@IN_ID INT,
@IN_YEAR_ID NVARCHAR(56),
@IN_CODE NVARCHAR(56),
@IN_NAME NVARCHAR(256),
@IN_REGISTRATION_DT DATETIME,
@IN_PAYER_ID INT  ,
@IN_GENDER_ID INT ,
@IN_AGE NVARCHAR(56),
@IN_DOB DATE,
@IN_IDENTITY_TYPE_ID INT  ,
@IN_UID NVARCHAR(56)  ,
@IN_MOBILE NVARCHAR(56) ,	
@IN_EMAIL NVARCHAR(56) ,
@IN_BLOOD_GROUP_ID INT ,
@IN_HEIGHT NVARCHAR(56),
@IN_WEIGHT NVARCHAR(56),
@IN_OBESITY NVARCHAR(56),
@IN_ADDRESS NVARCHAR(1024) ,
@IN_CITY NVARCHAR(256),
@IN_STATE_ID INT,
@IN_COUNTRY_ID INT,
@IN_PIN NVARCHAR(56) ,
@IN_KIN_NAME NVARCHAR(256) ,
@IN_KIN_RELATION_ID INT ,
@IN_KIN_MOBILE NVARCHAR(56) ,
@IN_MARITAL_STATUS_ID INT,
@IN_RELIGION_ID INT,	
@IN_PATIENT_CATEGORY_ID INT ,
@IN_P_ADDRESS NVARCHAR(1024) ,
@IN_P_CITY NVARCHAR(256) ,
@IN_P_STATE_ID INT ,
@IN_P_COUNTRY_ID INT ,
@IN_P_PIN NVARCHAR(56),
@IN_NATIONALITY_ID INT, 		
@IN_F_NAME NVARCHAR(256),
@IN_F_MOBILE NVARCHAR(56),	
@IN_F_EMAIL NVARCHAR(56),
@IN_M_NAME NVARCHAR(256),
@IN_M_MOBILE NVARCHAR(56),	
@IN_M_EMAIL NVARCHAR(56),
@IN_S_NAME NVARCHAR(256),
@IN_S_MOBILE NVARCHAR(56),	
@IN_S_EMAIL NVARCHAR(56),
@IN_G_NAME NVARCHAR(256),
@IN_G_MOBILE NVARCHAR(56),	
@IN_G_EMAIL NVARCHAR(56),
@IN_REF_ID NVARCHAR(56),
@IN_REF_BY NVARCHAR(256) ,
@IN_REF_HOSPITAL NVARCHAR(256) ,
@IN_ORG_ID NVARCHAR(56),
@IN_ORG_NAME NVARCHAR(256),
@IN_ORG_EMP_ID VARCHAR(56),
@IN_ORG_MOBILE NVARCHAR(56),
@IN_ORG_EMAIL NVARCHAR(56),		
@IN_INS_TYPE NVARCHAR(56) ,
@IN_INS_ID NVARCHAR(56),
@IN_MATURITY_DT DATE,
@IN_MATURITY_PERIOD NVARCHAR(56) ,
@IN_MATURED_AMOUNT NVARCHAR(56),
@IN_RECOV_AMOUNT NVARCHAR(56),
@IN_EMPLOYMENT_CATEGORY_ID NVARCHAR(56) ,		
@IN_SPECIALIZATION NVARCHAR(56),
@IN_EMPLOYMENT_STATUS_ID INT ,	
@IN_EMPLOYMENT_DT DATETIME,	
@IN_DESCRIPTION NVARCHAR(1024),
@IN_STATUS INT,
@SQL_STATUS VARCHAR(28) OUTPUT,
@SQL_NO VARCHAR(28) OUTPUT,
@SQL_MSG VARCHAR(1024)  OUTPUT
AS
SET NOCOUNT ON
BEGIN
	BEGIN TRY
		DECLARE @SQL_OBJ VARCHAR(1024)
		DECLARE @CR_ID INT
		SELECT @SQL_OBJ = 'SP_PATIENT_REGISTRATION_INSERT_UPDATE_RETURN_ID', @SQL_STATUS = 'SUCCESS'
		--
		SELECT @IN_MATURED_AMOUNT = CASE ISNUMERIC(@IN_MATURED_AMOUNT) WHEN 1 THEN @IN_MATURED_AMOUNT ELSE '0.00' END
		SELECT @IN_RECOV_AMOUNT = CASE ISNUMERIC(@IN_RECOV_AMOUNT) WHEN 1 THEN @IN_RECOV_AMOUNT ELSE '0.00' END
		--
		SELECT @IN_YEAR_ID = YEAR_CODE   , @IN_CODE = CODE, @CR_ID = CR_ID FROM UDF_GET_CODE('OPD','REGISTRATION','')
		--
		IF (NOT EXISTS(SELECT 1 FROM PATIENT_REGISTRATION WITH(NOLOCK) WHERE ID = @IN_ID AND BRANCH_ID = @IN_BRANCH_ID)) 
			BEGIN 
				INSERT INTO PATIENT_REGISTRATION 
					(YEAR_ID, CR_ID, CODE,NAME,REGISTRATION_DT,PAYER_ID,GENDER_ID,AGE,DOB,
					IDENTITY_TYPE_ID,UID,MOBILE,	EMAIL,BLOOD_GROUP_ID,HEIGHT,WEIGHT,OBESITY,
					ADDRESS,CITY,STATE_ID,COUNTRY_ID,PIN,KIN_NAME,KIN_RELATION_ID,KIN_MOBILE,
					MARITAL_STATUS_ID,RELIGION_ID,PATIENT_CATEGORY_ID,P_ADDRESS,
					P_CITY,P_STATE_ID,P_COUNTRY_ID,P_PIN,NATIONALITY_ID,
					F_NAME,F_MOBILE,F_EMAIL,M_NAME,M_MOBILE,M_EMAIL,
					S_NAME,S_MOBILE,S_EMAIL,G_NAME,G_MOBILE,G_EMAIL,
					REF_ID,REF_BY,REF_HOSPITAL,ORG_ID,ORG_NAME,ORG_EMP_ID,
					ORG_MOBILE,ORG_EMAIL,INS_TYPE,INS_ID,MATURITY_DT,
					MATURITY_PERIOD,MATURED_AMOUNT,RECOV_AMOUNT,
					EMPLOYMENT_CATEGORY_ID,SPECIALIZATION,EMPLOYMENT_STATUS_ID,	
					EMPLOYMENT_DT,DESCRIPTION,STATUS,
					BRANCH_ID,CREATED_BY,CREATED_DT,UPDATED_BY,UPDATED_DT)
				VALUES ( 
					@IN_YEAR_ID, @CR_ID, @IN_CODE, @IN_NAME, GETDATE(), @IN_PAYER_ID, @IN_GENDER_ID, @IN_AGE, @IN_DOB, 
					@IN_IDENTITY_TYPE_ID, @IN_UID, @IN_MOBILE, @IN_EMAIL, @IN_BLOOD_GROUP_ID, @IN_HEIGHT, @IN_WEIGHT, @IN_OBESITY, 
					@IN_ADDRESS, @IN_CITY, @IN_STATE_ID, @IN_COUNTRY_ID, @IN_PIN, @IN_KIN_NAME, @IN_KIN_RELATION_ID, @IN_KIN_MOBILE, 
					@IN_MARITAL_STATUS_ID, @IN_RELIGION_ID, @IN_PATIENT_CATEGORY_ID, @IN_P_ADDRESS, 
					@IN_P_CITY, @IN_P_STATE_ID, @IN_P_COUNTRY_ID, @IN_P_PIN, @IN_NATIONALITY_ID, 
					@IN_F_NAME, @IN_F_MOBILE, @IN_F_EMAIL, @IN_M_NAME, @IN_M_MOBILE, @IN_M_EMAIL, 
					@IN_S_NAME, @IN_S_MOBILE, @IN_S_EMAIL, @IN_G_NAME, @IN_G_MOBILE, @IN_G_EMAIL, 
					@IN_REF_ID, @IN_REF_BY, @IN_REF_HOSPITAL, @IN_ORG_ID, @IN_ORG_NAME, @IN_ORG_EMP_ID, 
					@IN_ORG_MOBILE, @IN_ORG_EMAIL, @IN_INS_TYPE, @IN_INS_ID, @IN_MATURITY_DT, 
					@IN_MATURITY_PERIOD, @IN_MATURED_AMOUNT, @IN_RECOV_AMOUNT, 
					@IN_EMPLOYMENT_CATEGORY_ID, @IN_SPECIALIZATION, @IN_EMPLOYMENT_STATUS_ID, 
					@IN_EMPLOYMENT_DT, @IN_DESCRIPTION, 1, 
					@IN_BRANCH_ID, @IN_USER_ID, GETDATE(), @IN_USER_ID, GETDATE()) 
					--
					SET @SQL_NO = SCOPE_IDENTITY()
					SET @SQL_MSG = 'INSERTED RECORD SUCCESSFULLY'
			END 
		ELSE 
			BEGIN 
				UPDATE PATIENT_REGISTRATION 
						SET NAME = @IN_NAME,
							--REGISTRATION_DT = @IN_REGISTRATION_DT,
							PAYER_ID = @IN_PAYER_ID,
							GENDER_ID = @IN_GENDER_ID,
							AGE = @IN_AGE,
							DOB = @IN_DOB,
							IDENTITY_TYPE_ID = @IN_IDENTITY_TYPE_ID,
							UID = @IN_UID,
							MOBILE = @IN_MOBILE,
							EMAIL = @IN_EMAIL,
							BLOOD_GROUP_ID = @IN_BLOOD_GROUP_ID,
							HEIGHT = @IN_HEIGHT,
							WEIGHT = @IN_WEIGHT,
							OBESITY = @IN_OBESITY,
							ADDRESS = @IN_ADDRESS,
							CITY = @IN_CITY,
							STATE_ID = @IN_STATE_ID,
							COUNTRY_ID = @IN_COUNTRY_ID,
							PIN = @IN_PIN,
							KIN_NAME = @IN_KIN_NAME,
							KIN_RELATION_ID = @IN_KIN_RELATION_ID,
							KIN_MOBILE = @IN_KIN_MOBILE,
							MARITAL_STATUS_ID = @IN_MARITAL_STATUS_ID,
							RELIGION_ID = @IN_RELIGION_ID,
							PATIENT_CATEGORY_ID = @IN_PATIENT_CATEGORY_ID,
							P_ADDRESS = @IN_P_ADDRESS,
							P_CITY = @IN_P_CITY,
							P_STATE_ID = @IN_P_STATE_ID,
							P_COUNTRY_ID = @IN_P_COUNTRY_ID,
							P_PIN = @IN_P_PIN,
							NATIONALITY_ID = @IN_NATIONALITY_ID,
							F_NAME = @IN_F_NAME,
							F_MOBILE = @IN_F_MOBILE,
							F_EMAIL = @IN_F_EMAIL,
							M_NAME = @IN_M_NAME,
							M_MOBILE = @IN_M_MOBILE,
							M_EMAIL = @IN_M_EMAIL,
							S_NAME = @IN_S_NAME,
							S_MOBILE = @IN_S_MOBILE,
							S_EMAIL = @IN_S_EMAIL,
							G_NAME = @IN_G_NAME,
							G_MOBILE = @IN_G_MOBILE,
							G_EMAIL = @IN_G_EMAIL,
							REF_ID = @IN_REF_ID,
							REF_BY = @IN_REF_BY,
							REF_HOSPITAL = @IN_REF_HOSPITAL,
							ORG_ID = @IN_ORG_ID,
							ORG_NAME = @IN_ORG_NAME,
							ORG_EMP_ID = @IN_ORG_EMP_ID,
							ORG_MOBILE = @IN_ORG_MOBILE,
							ORG_EMAIL = @IN_ORG_EMAIL,
							INS_TYPE = @IN_INS_TYPE,
							INS_ID = @IN_INS_ID,
							MATURITY_DT = @IN_MATURITY_DT,
							MATURITY_PERIOD = @IN_MATURITY_PERIOD,
							MATURED_AMOUNT = @IN_MATURED_AMOUNT,
							RECOV_AMOUNT = @IN_RECOV_AMOUNT,
							EMPLOYMENT_CATEGORY_ID = @IN_EMPLOYMENT_CATEGORY_ID,
							SPECIALIZATION = @IN_SPECIALIZATION,
							EMPLOYMENT_STATUS_ID = @IN_EMPLOYMENT_STATUS_ID,
							EMPLOYMENT_DT = @IN_EMPLOYMENT_DT,
							DESCRIPTION = @IN_DESCRIPTION,
							STATUS = @IN_STATUS,
							BRANCH_ID = @IN_BRANCH_ID,
							UPDATED_BY = @IN_USER_ID,
							UPDATED_DT = GETDATE()
				WHERE ID = @IN_ID
					AND BRANCH_ID = @IN_BRANCH_ID

				SET @SQL_NO = @IN_ID
				SET @SQL_MSG = 'UPDATED RECORD SUCCESSFULLY'
			END 
		--		
		--
		EXEC SP_SYS_AUDIT_LOG @IN_USER_ID, @IN_BRANCH_ID, @SQL_NO, @SQL_OBJ , @SQL_OBJ, @SQL_MSG, 
			@SQL_STATUS = @SQL_STATUS OUTPUT, @SQL_NO = @SQL_NO OUTPUT, @SQL_MSG = @SQL_MSG OUTPUT
		--
	END TRY

	BEGIN CATCH
		SET @SQL_NO = ERROR_NUMBER()    
		SET @SQL_MSG = ERROR_MESSAGE()    
		SET @SQL_OBJ = ERROR_PROCEDURE()
		--
		EXEC SP_SYS_ERR_LOG @IN_USER_ID, @IN_BRANCH_ID, @SQL_NO, @SQL_OBJ, @SQL_OBJ, @SQL_MSG, @SQL_STATUS OUTPUT, @SQL_NO OUTPUT, @SQL_MSG OUTPUT
		SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG  AS SQL_MSG, @SQL_NO AS SQL_NO
		--
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SP_PATIENT_REGISTRATION_LIMIT_GET]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[SP_PATIENT_REGISTRATION_LIMIT_GET]
	@IN_USER_ID INT,
	@IN_BRANCH_ID INT,
	@IN_ID INT  = 0,
	@IN_CODE NVARCHAR(56)  = 0,
	@IN_STATUS INT = 0 
AS
SET NOCOUNT ON
BEGIN
	BEGIN TRY
		DECLARE @SQL_STATUS VARCHAR(28),  @SQL_NO VARCHAR(28), @SQL_MSG VARCHAR(1024), @SQL_OBJ VARCHAR(1024)
		--
		SELECT TOP 200
			M.ID, M.CODE, M.CODE + ' | ' + M.NAME AS NAME, 
			M.NAME AS PATIENT_NAME,
			M.YEAR_ID,CONVERT (DATE, M.REGISTRATION_DT) AS REGISTRATION_DT,M.PAYER_ID,C.NAME AS PAYER,M.GENDER_ID,G.NAME AS GENDER,
			M.AGE,M.DOB,M.IDENTITY_TYPE_ID,I.NAME AS IDENTITY_TYPE,M.UID,M.MOBILE,M.EMAIL,
			M.BLOOD_GROUP_ID,BG.NAME AS BLOOD_GROUP,M.HEIGHT,M.WEIGHT,M.OBESITY,M.ADDRESS,
			M.CITY,M.STATE_ID,CS.NAME AS STATE, M.COUNTRY_ID, CC.NAME AS COUNTRY,
			M.PIN,M.KIN_NAME,M.KIN_RELATION_ID,KR.NAME AS KIN_RELATION, M.KIN_MOBILE,
			M.MARITAL_STATUS_ID, KMS.NAME AS MARITAL_STATUS,
			M.RELIGION_ID,R.NAME AS RELIGION,M.PATIENT_CATEGORY_ID,PCT.NAME AS PATIENT_CATEGORY, 
			M.P_ADDRESS,M.P_CITY,M.P_STATE_ID, PS.NAME AS P_STATE,M.P_COUNTRY_ID,PC.NAME AS P_COUNTRY,
			M.P_PIN,M.NATIONALITY_ID,N.NATIONALITY AS NATIONALITY, M.F_NAME,M.F_MOBILE,M.F_EMAIL,
			M.M_NAME,M.M_MOBILE,M.M_EMAIL,M.S_NAME,M.S_MOBILE,M.S_EMAIL,M.G_NAME,
			M.G_MOBILE,M.G_EMAIL,M.REF_ID,M.REF_BY,M.REF_HOSPITAL,M.ORG_ID,M.ORG_NAME,
			M.ORG_EMP_ID,M.ORG_MOBILE,M.ORG_EMAIL,M.INS_TYPE,M.INS_ID,M.MATURITY_DT,
			M.MATURITY_PERIOD,M.MATURED_AMOUNT,M.RECOV_AMOUNT,M.EMPLOYMENT_CATEGORY_ID,
			M.SPECIALIZATION,M.EMPLOYMENT_STATUS_ID,ES.NAME AS EMPLOYMENT_STATUS, M.EMPLOYMENT_DT,M.DESCRIPTION,
			M.STATUS AS STATUS_ID, S.NAME AS STATUS,M.BRANCH_ID,M.CREATED_BY,M.CREATED_DT,M.UPDATED_BY,M.UPDATED_DT
		FROM PATIENT_REGISTRATION M WITH(NOLOCK)
		LEFT OUTER JOIN REF_COMPANY C WITH(NOLOCK) ON M.PAYER_ID = C.ID
		LEFT OUTER JOIN REF_GENDER G WITH(NOLOCK) ON M.GENDER_ID = G.ID
		LEFT OUTER JOIN REF_IDENTITY_TYPE I WITH(NOLOCK) ON M.IDENTITY_TYPE_ID = I.ID
		LEFT OUTER JOIN REF_BLOOD_GROUP BG WITH(NOLOCK) ON M.BLOOD_GROUP_ID = BG.ID
		LEFT OUTER JOIN REF_STATE CS WITH(NOLOCK) ON CS.ID = M.STATE_ID
		LEFT OUTER JOIN REF_COUNTRY CC WITH(NOLOCK) ON CC.ID = M.COUNTRY_ID
		LEFT OUTER JOIN REF_RELATION KR WITH(NOLOCK) ON KR.ID = M.KIN_RELATION_ID
		LEFT OUTER JOIN REF_MARITAL_STATUS KMS WITH(NOLOCK) ON KMS.ID = M.MARITAL_STATUS_ID
		LEFT OUTER JOIN REF_RELIGION R WITH(NOLOCK) ON R.ID = M.RELIGION_ID
		LEFT OUTER JOIN REF_PATIENT_CATEGORY PCT WITH(NOLOCK) ON PCT.ID = M.PATIENT_CATEGORY_ID
		LEFT OUTER JOIN REF_STATE PS WITH(NOLOCK) ON PS.ID = M.P_STATE_ID
		LEFT OUTER JOIN REF_COUNTRY PC WITH(NOLOCK) ON PC.ID = M.P_COUNTRY_ID
		LEFT OUTER JOIN REF_COUNTRY N WITH(NOLOCK) ON N.ID = M.NATIONALITY_ID
		LEFT OUTER JOIN REF_EMPLOYMENT_STATUS ES WITH(NOLOCK) ON ES.ID = M.EMPLOYMENT_STATUS_ID		
		INNER JOIN REF_STATUS S WITH(NOLOCK) ON M.STATUS = S.ID
		WHERE M.ID = CASE WHEN @IN_ID = 0 THEN M.ID ELSE @IN_ID END
			AND M.CODE = CASE WHEN @IN_CODE = 0 THEN M.CODE ELSE @IN_CODE END
			AND M.STATUS = CASE WHEN @IN_STATUS = 0 THEN M.STATUS ELSE @IN_STATUS END
			AND M.BRANCH_ID = @IN_BRANCH_ID
		ORDER BY M.REGISTRATION_DT DESC
	END TRY
	--
	BEGIN CATCH
	SET @SQL_NO = ERROR_NUMBER()    
	SET @SQL_MSG = ERROR_MESSAGE()    
	SET @SQL_OBJ = ERROR_PROCEDURE()
	--
	EXEC SP_SYS_ERR_LOG @IN_USER_ID, @IN_BRANCH_ID, @SQL_NO, @SQL_OBJ, @SQL_OBJ, @SQL_MSG, @SQL_STATUS OUTPUT, @SQL_NO OUTPUT, @SQL_MSG OUTPUT
	--
	SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG  AS SQL_MSG, @SQL_NO AS SQL_NO
	--
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SP_REF_ADMISSION_CATEGORY_GET]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[SP_REF_ADMISSION_CATEGORY_GET]
	@IN_USER_ID INT,
	@IN_BRANCH_ID INT,
	@IN_ID INT  = 0,
	@IN_STATUS INT = 0 
AS
SET NOCOUNT ON
BEGIN
	BEGIN TRY
		DECLARE @SQL_STATUS VARCHAR(28),  @SQL_NO VARCHAR(28), @SQL_MSG VARCHAR(1024), @SQL_OBJ VARCHAR(1024)
		--
		SELECT
			DC.ID, DC.NAME, DC.CODE, DC.DESCRIPTION,
			S.ID AS STATUS_ID, S.NAME AS STATUS, DC.BRANCH_ID, DC.CREATED_BY, DC.CREATED_DT, DC.UPDATED_BY, DC.UPDATED_DT
		FROM REF_ADMISSION_CATEGORY DC WITH(NOLOCK)
		INNER JOIN REF_STATUS S WITH(NOLOCK) ON DC.STATUS = S.ID
		WHERE DC.ID = CASE WHEN @IN_ID = 0 THEN DC.ID ELSE @IN_ID END
			AND DC.STATUS = CASE WHEN @IN_STATUS = 0 THEN DC.STATUS ELSE @IN_STATUS END
			AND DC.BRANCH_ID = @IN_BRANCH_ID
	END TRY
	--
	BEGIN CATCH
	SET @SQL_NO = ERROR_NUMBER()    
	SET @SQL_MSG = ERROR_MESSAGE()    
	SET @SQL_OBJ = ERROR_PROCEDURE()
	--
	EXEC SP_SYS_ERR_LOG @IN_USER_ID, @IN_BRANCH_ID, @SQL_NO, @SQL_OBJ, @SQL_OBJ, @SQL_MSG, @SQL_STATUS OUTPUT, @SQL_NO OUTPUT, @SQL_MSG OUTPUT
	--
	SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG  AS SQL_MSG, @SQL_NO AS SQL_NO
	--
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SP_REF_BED_CATEGORY_GET]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[SP_REF_BED_CATEGORY_GET]
	@IN_USER_ID INT,
	@IN_BRANCH_ID INT,
	@IN_ID INT  = 0,
	@IN_STATUS INT = 0 
AS
SET NOCOUNT ON
BEGIN
	BEGIN TRY
		DECLARE @SQL_STATUS VARCHAR(28),  @SQL_NO VARCHAR(28), @SQL_MSG VARCHAR(1024), @SQL_OBJ VARCHAR(1024)
		--
		SELECT
			D.ID, D.NAME, D.CODE, D.SERVICE_ID, SV.NAME AS DEPARTMENT_CATEGORY, D.DESCRIPTION,
			S.ID AS STATUS_ID, S.NAME AS STATUS, D.BRANCH_ID, D.CREATED_BY, D.CREATED_DT, D.UPDATED_BY, D.UPDATED_DT
		FROM REF_BED_CATEGORY D WITH(NOLOCK)
		INNER JOIN REF_SERVICE SV WITH(NOLOCK) ON D.SERVICE_ID = SV.ID
		INNER JOIN REF_STATUS S WITH(NOLOCK) ON D.STATUS = S.ID
		WHERE D.ID = CASE WHEN @IN_ID = 0 THEN D.ID ELSE @IN_ID END
			AND D.STATUS = CASE WHEN @IN_STATUS = 0 THEN D.STATUS ELSE @IN_STATUS END
			AND D.BRANCH_ID = @IN_BRANCH_ID
	END TRY
	--
	BEGIN CATCH
	SET @SQL_NO = ERROR_NUMBER()    
	SET @SQL_MSG = ERROR_MESSAGE()    
	SET @SQL_OBJ = ERROR_PROCEDURE()
	--
	EXEC SP_SYS_ERR_LOG @IN_USER_ID, @IN_BRANCH_ID, @SQL_NO, @SQL_OBJ, @SQL_OBJ, @SQL_MSG, @SQL_STATUS OUTPUT, @SQL_NO OUTPUT, @SQL_MSG OUTPUT
	--
	SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG  AS SQL_MSG, @SQL_NO AS SQL_NO
	--
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SP_REF_BED_CATEGORY_INSERT_UPDATE]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[SP_REF_BED_CATEGORY_INSERT_UPDATE]
	@IN_USER_ID INT,
	@IN_BRANCH_ID INT,
	@IN_ID INT,
	@IN_CODE NVARCHAR(24),
	@IN_NAME NVARCHAR(256),
	@IN_SERVICE_ID INT,
	@IN_DESCRIPTION NVARCHAR(1024),
	@IN_STATUS INT
AS
SET NOCOUNT ON
BEGIN
	BEGIN TRY
		DECLARE @SQL_STATUS VARCHAR(28),  @SQL_NO VARCHAR(28), @SQL_MSG VARCHAR(1024), @SQL_OBJ VARCHAR(1024)
		SELECT @SQL_OBJ = 'SP_REF_BED_CATEGORY_INSERT_UPDATE', @SQL_STATUS = 'SUCCESS'
		--
		IF NOT EXISTS (SELECT 1 FROM REF_BED_CATEGORY WITH(NOLOCK) WHERE ID = @IN_ID AND BRANCH_ID = @IN_BRANCH_ID)
			BEGIN
				INSERT INTO REF_BED_CATEGORY (CODE, NAME, SERVICE_ID, DESCRIPTION,
					STATUS, BRANCH_ID, CREATED_BY, CREATED_DT, UPDATED_BY, UPDATED_DT)
				VALUES ( @IN_CODE, @IN_NAME,  @IN_SERVICE_ID, @IN_DESCRIPTION,
					@IN_STATUS, @IN_BRANCH_ID, @IN_USER_ID, GETDATE(), @IN_USER_ID, GETDATE())				
				--
				SET @SQL_NO = SCOPE_IDENTITY()
				--
				SET @SQL_MSG = 'INSERTED RECORD SUCCESSFULLY'
			END
		ELSE
			BEGIN
				UPDATE REF_BED_CATEGORY SET
					CODE = @IN_CODE,
					NAME = @IN_NAME,
					SERVICE_ID = @IN_SERVICE_ID,
					DESCRIPTION = @IN_DESCRIPTION,
					STATUS = @IN_STATUS,
					UPDATED_BY = @IN_USER_ID,
					UPDATED_DT = GETDATE()					
				WHERE ID = @IN_ID AND BRANCH_ID = @IN_BRANCH_ID
				--
				SET @SQL_NO = @IN_ID
				--
				SET @SQL_MSG = 'UPDATED RECORD SUCCESSFULLY'
			END
		--
		SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG AS SQL_MSG, @SQL_NO AS SQL_NO
	END TRY

	BEGIN CATCH
		SET @SQL_NO = ERROR_NUMBER()    
		SET @SQL_MSG = ERROR_MESSAGE()    
		SET @SQL_OBJ = ERROR_PROCEDURE()
		--
		EXEC SP_SYS_ERR_LOG @IN_USER_ID, @IN_BRANCH_ID, @SQL_NO, @SQL_OBJ, @SQL_OBJ, @SQL_MSG, @SQL_STATUS OUTPUT, @SQL_NO OUTPUT, @SQL_MSG OUTPUT
		SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG  AS SQL_MSG, @SQL_NO AS SQL_NO
		--
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SP_REF_BED_GET]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[SP_REF_BED_GET]
	@IN_USER_ID INT,
	@IN_BRANCH_ID INT,
	@IN_ID INT  = 0,
	@IN_STATUS INT = 0,
	@IN_WARD_ID INT = 0,
	@IN_BED_CATEGORY_ID INT = 0,
	@IN_BED_STATUS_ID INT = 0
AS
SET NOCOUNT ON
BEGIN
	BEGIN TRY
		DECLARE @SQL_STATUS VARCHAR(28),  @SQL_NO VARCHAR(28), @SQL_MSG VARCHAR(1024), @SQL_OBJ VARCHAR(1024)
		--
		IF @IN_BED_STATUS_ID = 1
			BEGIN
				SET @IN_BED_STATUS_ID = (SELECT ID FROM REF_BED_STATUS WHERE CODE = 'V') 
			END
		ELSE
			SET @IN_BED_STATUS_ID = 0

		SELECT
			D.ID, D.NAME, D.CODE, 
			D.BED_CATEGORY_ID, BC.NAME AS BED_CATEGORY, D.WARD_ID, W.NAME AS WARD, 
			D.BED_STATUS_ID, BS.NAME AS BED_STATUS, D.INCLUDE_OCCUPENCY,
			D.PHONE, D.PHONE2,			
			D.DESCRIPTION,
			S.ID AS STATUS_ID, S.NAME AS STATUS, D.BRANCH_ID, D.CREATED_BY, D.CREATED_DT, D.UPDATED_BY, D.UPDATED_DT
		FROM REF_BED D WITH(NOLOCK)
		INNER JOIN REF_BED_CATEGORY BC WITH(NOLOCK) ON D.BED_CATEGORY_ID = BC.ID
		INNER JOIN REF_WARD W WITH(NOLOCK) ON D.WARD_ID = W.ID
		INNER JOIN REF_BED_STATUS BS WITH(NOLOCK) ON D.BED_STATUS_ID = BS.ID
		INNER JOIN REF_STATUS S WITH(NOLOCK) ON D.STATUS = S.ID
		WHERE D.ID = CASE WHEN @IN_ID = 0 THEN D.ID ELSE @IN_ID END
			AND D.STATUS = CASE WHEN @IN_STATUS = 0 THEN D.STATUS ELSE @IN_STATUS END
			AND D.WARD_ID = CASE WHEN @IN_WARD_ID = 0 THEN D.WARD_ID ELSE @IN_WARD_ID END
			AND D.BED_CATEGORY_ID = CASE WHEN @IN_BED_CATEGORY_ID = 0 THEN D.BED_CATEGORY_ID ELSE @IN_BED_CATEGORY_ID END
			AND D.BED_STATUS_ID = CASE WHEN @IN_BED_STATUS_ID = 0 THEN D.BED_STATUS_ID ELSE @IN_BED_STATUS_ID END
			AND D.BRANCH_ID = @IN_BRANCH_ID
	END TRY
	--
	BEGIN CATCH
	SET @SQL_NO = ERROR_NUMBER()    
	SET @SQL_MSG = ERROR_MESSAGE()    
	SET @SQL_OBJ = ERROR_PROCEDURE()
	--
	EXEC SP_SYS_ERR_LOG @IN_USER_ID, @IN_BRANCH_ID, @SQL_NO, @SQL_OBJ, @SQL_OBJ, @SQL_MSG, @SQL_STATUS OUTPUT, @SQL_NO OUTPUT, @SQL_MSG OUTPUT
	--
	SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG  AS SQL_MSG, @SQL_NO AS SQL_NO
	--
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SP_REF_BED_INSERT_UPDATE]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE    PROCEDURE [dbo].[SP_REF_BED_INSERT_UPDATE]
	@IN_USER_ID INT,
	@IN_BRANCH_ID INT,
	@IN_ID INT,
	@IN_CODE NVARCHAR(24),
	@IN_NAME NVARCHAR(256),
	@IN_BED_CATEGORY_ID INT,
	@IN_WARD_ID INT,
	@IN_BED_STATUS_ID INT,
	@IN_INCLUDE_OCCUPENCY BIT,
	@IN_PHONE NVARCHAR(256),
	@IN_PHONE2 NVARCHAR(256),
	@IN_DESCRIPTION NVARCHAR(1024),
	@IN_STATUS INT
AS
SET NOCOUNT ON
BEGIN
	BEGIN TRY
		DECLARE @SQL_STATUS VARCHAR(28),  @SQL_NO VARCHAR(28), @SQL_MSG VARCHAR(1024), @SQL_OBJ VARCHAR(1024)
		SELECT @SQL_OBJ = 'PKG_REF_BED_INSERT_UPDATE', @SQL_STATUS = 'SUCCESS'
		--
		IF NOT EXISTS (SELECT 1 FROM REF_BED WITH(NOLOCK) WHERE ID = @IN_ID AND BRANCH_ID = @IN_BRANCH_ID)
			BEGIN
				INSERT INTO REF_BED ( CODE, NAME, BED_CATEGORY_ID, WARD_ID, BED_STATUS_ID, 
					INCLUDE_OCCUPENCY, PHONE, PHONE2,
					DESCRIPTION, STATUS, BRANCH_ID, CREATED_BY, CREATED_DT, UPDATED_BY, UPDATED_DT)
				VALUES ( @IN_CODE, @IN_NAME,  @IN_BED_CATEGORY_ID, @IN_WARD_ID, @IN_BED_STATUS_ID, 
					@IN_INCLUDE_OCCUPENCY, @IN_PHONE, @IN_PHONE2,
					@IN_DESCRIPTION, @IN_STATUS, @IN_BRANCH_ID, @IN_USER_ID, GETDATE(), @IN_USER_ID, GETDATE())		
				--
				SET @SQL_NO = SCOPE_IDENTITY()
				--
				SET @SQL_MSG = 'INSERTED RECORD SUCCESSFULLY'
			END
		ELSE
			BEGIN
				UPDATE REF_BED SET
					CODE = @IN_CODE,
					NAME = @IN_NAME,
					BED_CATEGORY_ID = @IN_BED_CATEGORY_ID,
					WARD_ID = @IN_WARD_ID,
					BED_STATUS_ID = @IN_BED_STATUS_ID,
					INCLUDE_OCCUPENCY = @IN_INCLUDE_OCCUPENCY,
					PHONE = @IN_PHONE,
					PHONE2 = @IN_PHONE2,
					DESCRIPTION = @IN_DESCRIPTION,
					STATUS = @IN_STATUS,
					UPDATED_BY = @IN_USER_ID,
					UPDATED_DT = GETDATE()
				WHERE ID = @IN_ID AND BRANCH_ID = @IN_BRANCH_ID
				--
				SET @SQL_NO = @IN_ID
				--
				SET @SQL_MSG = 'UPDATED RECORD SUCCESSFULLY'
			END
		--
		SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG AS SQL_MSG, @SQL_NO AS SQL_NO

	END TRY

	BEGIN CATCH
		SET @SQL_NO = ERROR_NUMBER()    
		SET @SQL_MSG = ERROR_MESSAGE()    
		SET @SQL_OBJ = ERROR_PROCEDURE()
		--
		EXEC SP_SYS_ERR_LOG @IN_USER_ID, @IN_BRANCH_ID, @SQL_NO, @SQL_OBJ, @SQL_OBJ, @SQL_MSG, @SQL_STATUS OUTPUT, @SQL_NO OUTPUT, @SQL_MSG OUTPUT
		SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG  AS SQL_MSG, @SQL_NO AS SQL_NO
		--
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SP_REF_BED_STATUS_GET]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE    PROCEDURE [dbo].[SP_REF_BED_STATUS_GET]
	@IN_USER_ID INT,
	@IN_BRANCH_ID INT,
	@IN_ID INT  = 0,
	@IN_STATUS INT = 0 
AS
SET NOCOUNT ON
BEGIN
	BEGIN TRY
		DECLARE @SQL_STATUS VARCHAR(28),  @SQL_NO VARCHAR(28), @SQL_MSG VARCHAR(1024), @SQL_OBJ VARCHAR(1024)
		--
		SELECT
			D.ID, D.NAME, D.CODE, D.DESCRIPTION,
			S.ID AS STATUS_ID, S.NAME AS STATUS, D.BRANCH_ID, D.CREATED_BY, D.CREATED_DT, D.UPDATED_BY, D.UPDATED_DT
		FROM REF_BED_STATUS D WITH(NOLOCK) 
		INNER JOIN REF_STATUS S WITH(NOLOCK) ON D.STATUS = S.ID
		WHERE D.ID = CASE WHEN @IN_ID = 0 THEN D.ID ELSE @IN_ID END
			AND D.STATUS = CASE WHEN @IN_STATUS = 0 THEN D.STATUS ELSE @IN_STATUS END
			AND D.BRANCH_ID = @IN_BRANCH_ID
	END TRY
	--
	BEGIN CATCH
	SET @SQL_NO = ERROR_NUMBER()    
	SET @SQL_MSG = ERROR_MESSAGE()    
	SET @SQL_OBJ = ERROR_PROCEDURE()
	--
	EXEC SP_SYS_ERR_LOG @IN_USER_ID, @IN_BRANCH_ID, @SQL_NO, @SQL_OBJ, @SQL_OBJ, @SQL_MSG, @SQL_STATUS OUTPUT, @SQL_NO OUTPUT, @SQL_MSG OUTPUT
	--
	SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG  AS SQL_MSG, @SQL_NO AS SQL_NO
	--
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SP_REF_BED_STATUS_INSERT_UPDATE]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[SP_REF_BED_STATUS_INSERT_UPDATE]
	@IN_USER_ID INT,
	@IN_BRANCH_ID INT,
	@IN_ID INT,
	@IN_CODE NVARCHAR(24),
	@IN_NAME NVARCHAR(256),
	@IN_DESCRIPTION NVARCHAR(1024),
	@IN_STATUS INT
AS
BEGIN
	BEGIN TRY
		DECLARE @SQL_STATUS VARCHAR(28),  @SQL_NO VARCHAR(28), @SQL_MSG VARCHAR(1024), @SQL_OBJ VARCHAR(1024)
		SELECT @SQL_OBJ = 'SP_REF_BED_STATUS_INSERT_UPDATE', @SQL_STATUS = 'SUCCESS'
		--
		IF NOT EXISTS (SELECT 1 FROM REF_BED_STATUS WITH(NOLOCK) WHERE ID = @IN_ID AND BRANCH_ID = @IN_BRANCH_ID)
			BEGIN
				INSERT INTO REF_BED_STATUS ( CODE, NAME, DESCRIPTION,
					STATUS, BRANCH_ID, CREATED_BY, CREATED_DT, UPDATED_BY, UPDATED_DT)
				VALUES ( @IN_CODE, @IN_NAME,  @IN_DESCRIPTION,
					@IN_STATUS, @IN_BRANCH_ID, @IN_USER_ID, GETDATE(), @IN_USER_ID, GETDATE())			
				--
				SET @SQL_NO = SCOPE_IDENTITY()
				--
				SET @SQL_MSG = 'INSERTED RECORD SUCCESSFULLY'
			END
		ELSE
			BEGIN
				UPDATE REF_BED_STATUS SET
					CODE = @IN_CODE,
					NAME = @IN_NAME,
					DESCRIPTION = @IN_DESCRIPTION,
					STATUS = @IN_STATUS,
					UPDATED_BY = @IN_USER_ID,
					UPDATED_DT = GETDATE()
				WHERE ID = @IN_ID AND BRANCH_ID = @IN_BRANCH_ID
				--
				SET @SQL_NO = @IN_ID
				--
				SET @SQL_MSG = 'UPDATED RECORD SUCCESSFULLY'
			END
		--
		SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG AS SQL_MSG, @SQL_NO AS SQL_NO
	END TRY

	BEGIN CATCH
		SET @SQL_NO = ERROR_NUMBER()    
		SET @SQL_MSG = ERROR_MESSAGE()    
		SET @SQL_OBJ = ERROR_PROCEDURE()
		--
		EXEC SP_SYS_ERR_LOG @IN_USER_ID, @IN_BRANCH_ID, @SQL_NO, @SQL_OBJ, @SQL_OBJ, @SQL_MSG, @SQL_STATUS OUTPUT, @SQL_NO OUTPUT, @SQL_MSG OUTPUT
		SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG  AS SQL_MSG, @SQL_NO AS SQL_NO
		--
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SP_REF_BLOOD_GROUP_GET]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[SP_REF_BLOOD_GROUP_GET]
	@IN_USER_ID INT,
	@IN_BRANCH_ID INT,
	@IN_ID INT  = 0,
	@IN_STATUS INT = 0 
AS
SET NOCOUNT ON
BEGIN
	BEGIN TRY
		DECLARE @SQL_STATUS VARCHAR(28),  @SQL_NO VARCHAR(28), @SQL_MSG VARCHAR(1024), @SQL_OBJ VARCHAR(1024)
		--
		SELECT
			M.ID, M.NAME AS BLOOD_GROUP,
			M.CODE AS NAME, --M.NAME + ' (' + M.CODE + ') ' AS NAME, 
			M.CODE, M.DESCRIPTION,
			S.ID AS STATUS_ID, S.NAME AS STATUS, M.BRANCH_ID, M.CREATED_BY, M.CREATED_DT, M.UPDATED_BY, M.UPDATED_DT
		FROM REF_BLOOD_GROUP M WITH(NOLOCK)
		INNER JOIN REF_STATUS S WITH(NOLOCK) ON M.STATUS = S.ID
		WHERE M.ID = CASE WHEN @IN_ID = 0 THEN M.ID ELSE @IN_ID END
			AND M.STATUS = CASE WHEN @IN_STATUS = 0 THEN M.STATUS ELSE @IN_STATUS END
			AND M.BRANCH_ID = @IN_BRANCH_ID
	END TRY
	--
	BEGIN CATCH
	SET @SQL_NO = ERROR_NUMBER()    
	SET @SQL_MSG = ERROR_MESSAGE()    
	SET @SQL_OBJ = ERROR_PROCEDURE()
	--
	EXEC SP_SYS_ERR_LOG @IN_USER_ID, @IN_BRANCH_ID, @SQL_NO, @SQL_OBJ, @SQL_OBJ, @SQL_MSG, @SQL_STATUS OUTPUT, @SQL_NO OUTPUT, @SQL_MSG OUTPUT
	--
	SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG  AS SQL_MSG, @SQL_NO AS SQL_NO
	--
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SP_REF_COMPANY_GET]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SP_REF_COMPANY_GET]
	@IN_USER_ID INT,
	@IN_BRANCH_ID INT,
	@IN_ID INT  = 0,
	@IN_STATUS INT = 0 
AS
SET NOCOUNT ON
BEGIN
	BEGIN TRY
		DECLARE @SQL_STATUS VARCHAR(28),  @SQL_NO VARCHAR(28), @SQL_MSG VARCHAR(1024), @SQL_OBJ VARCHAR(1024)
		--
		SELECT
			M.ID, M.CODE, M.NAME, M.TARIFF_ID, T.NAME AS TARIFF, M.APPROVAL_REQUIRED,	
			M.ADDRESS, M.MOBILE, M.EMAIL, M.FAX, M.WEBSITE, 
			M.CONTACT_NAME1, M.DESIGNATION1, M.MOBILE1, M.EMAIL1,			
			M.CONTACT_NAME2, M.DESIGNATION2, M.MOBILE2, M.EMAIL2, 
			M.DESCRIPTION, S.ID AS STATUS_ID, S.NAME AS STATUS, M.BRANCH_ID, 
			M.CREATED_BY, M.CREATED_DT, M.UPDATED_BY, M.UPDATED_DT
		FROM REF_COMPANY M WITH(NOLOCK)
		INNER JOIN REF_TARIFF T WITH(NOLOCK) ON M.TARIFF_ID = T.ID
		INNER JOIN REF_STATUS S WITH(NOLOCK) ON M.STATUS = S.ID
		WHERE M.ID = CASE WHEN @IN_ID = 0 THEN M.ID ELSE @IN_ID END
			AND M.STATUS = CASE WHEN @IN_STATUS = 0 THEN M.STATUS ELSE @IN_STATUS END
			AND M.BRANCH_ID = @IN_BRANCH_ID
	END TRY
	--
	BEGIN CATCH
	SET @SQL_NO = ERROR_NUMBER()    
	SET @SQL_MSG = ERROR_MESSAGE()    
	SET @SQL_OBJ = ERROR_PROCEDURE()
	--
	EXEC SP_SYS_ERR_LOG @IN_USER_ID, @IN_BRANCH_ID, @SQL_NO, @SQL_OBJ, @SQL_OBJ, @SQL_MSG, @SQL_STATUS OUTPUT, @SQL_NO OUTPUT, @SQL_MSG OUTPUT
	--
	SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG  AS SQL_MSG, @SQL_NO AS SQL_NO
	--
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SP_REF_COMPANY_INSERT_UPDATE]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_REF_COMPANY_INSERT_UPDATE]
	@IN_USER_ID INT,
	@IN_BRANCH_ID INT,
	@IN_ID INT,
	@IN_CODE NVARCHAR(56),
	@IN_NAME NVARCHAR(256),
	@IN_TARIFF_ID INT,
	@IN_APPROVAL_REQUIRED BIT,		
	@IN_ADDRESS NVARCHAR(1024),
	@IN_MOBILE NVARCHAR(256),
	@IN_EMAIL NVARCHAR(256),		
	@IN_FAX NVARCHAR(256),
	@IN_WEBSITE NVARCHAR(256),
	@IN_CONTACT_NAME1 NVARCHAR(256),
	@IN_DESIGNATION1 NVARCHAR(256),
	@IN_MOBILE1 NVARCHAR(256),	
	@IN_EMAIL1 NVARCHAR(256),			
	@IN_CONTACT_NAME2 NVARCHAR(256),
	@IN_DESIGNATION2 NVARCHAR(256),
	@IN_MOBILE2 NVARCHAR(256),	
	@IN_EMAIL2 NVARCHAR(256),			
	@IN_DESCRIPTION NVARCHAR(1024),
	@IN_STATUS INT
AS
SET NOCOUNT ON
BEGIN
	BEGIN TRY
		DECLARE @SQL_STATUS VARCHAR(28),  @SQL_NO VARCHAR(28), @SQL_MSG VARCHAR(1024), @SQL_OBJ VARCHAR(1024)
		SELECT @SQL_OBJ = 'SP_REF_COMPANY_INSERT_UPDATE', @SQL_STATUS = 'SUCCESS'
		--
		IF NOT EXISTS (SELECT 1 FROM REF_COMPANY WITH(NOLOCK) WHERE ID = @IN_ID AND BRANCH_ID = @IN_BRANCH_ID)
			BEGIN
				INSERT INTO REF_COMPANY (CODE, NAME, TARIFF_ID, APPROVAL_REQUIRED,	
						ADDRESS, MOBILE, EMAIL, FAX, WEBSITE, 
						CONTACT_NAME1, DESIGNATION1, MOBILE1, EMAIL1,			
						CONTACT_NAME2, DESIGNATION2, MOBILE2, EMAIL2, 
						DESCRIPTION, STATUS, 
						BRANCH_ID, CREATED_BY, CREATED_DT, UPDATED_BY, UPDATED_DT)
				VALUES ( @IN_CODE, @IN_NAME, @IN_TARIFF_ID, @IN_APPROVAL_REQUIRED,
						@IN_ADDRESS, @IN_MOBILE, @IN_EMAIL,	 @IN_FAX, @IN_WEBSITE,
						@IN_CONTACT_NAME1, @IN_DESIGNATION1, @IN_MOBILE1, @IN_EMAIL1,		
						@IN_CONTACT_NAME2, @IN_DESIGNATION2, @IN_MOBILE2, @IN_EMAIL2,
						@IN_DESCRIPTION, @IN_STATUS, 
						@IN_BRANCH_ID, @IN_USER_ID, GETDATE(), @IN_USER_ID, GETDATE())			
				--
				SET @SQL_NO = SCOPE_IDENTITY()
				--
				SET @SQL_MSG = 'INSERTED RECORD SUCCESSFULLY'
			END
		ELSE
			BEGIN
				UPDATE REF_COMPANY SET
					CODE = @IN_CODE,
					NAME = @IN_NAME,
					TARIFF_ID = @IN_TARIFF_ID,
					APPROVAL_REQUIRED = @IN_APPROVAL_REQUIRED,	
					ADDRESS = @IN_ADDRESS, 
					MOBILE = @IN_MOBILE, 
					EMAIL = @IN_EMAIL,	 
					FAX = @IN_FAX, 
					WEBSITE = @IN_WEBSITE,
					CONTACT_NAME1 = @IN_CONTACT_NAME1, 
					DESIGNATION1 = @IN_DESIGNATION1, 
					MOBILE1 = @IN_MOBILE1, 
					EMAIL1 = @IN_EMAIL1,		
					CONTACT_NAME2 = @IN_CONTACT_NAME2, 
					DESIGNATION2 = @IN_DESIGNATION2, 
					MOBILE2 = @IN_MOBILE2,
					EMAIL2 = @IN_EMAIL2, 
					DESCRIPTION = @IN_DESCRIPTION,
					STATUS = @IN_STATUS,
					UPDATED_BY = @IN_USER_ID,
					UPDATED_DT = GETDATE()
				WHERE ID = @IN_ID AND BRANCH_ID = @IN_BRANCH_ID
				--
				SET @SQL_NO = @IN_ID
				--
				SET @SQL_MSG = 'UPDATED RECORD SUCCESSFULLY'
			END
		--
		SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG AS SQL_MSG, @SQL_NO AS SQL_NO
	END TRY

	BEGIN CATCH
		SET @SQL_NO = ERROR_NUMBER()    
		SET @SQL_MSG = ERROR_MESSAGE()    
		SET @SQL_OBJ = ERROR_PROCEDURE()
		--
		EXEC SP_SYS_ERR_LOG @IN_USER_ID, @IN_BRANCH_ID, @SQL_NO, @SQL_OBJ, @SQL_OBJ, @SQL_MSG, @SQL_STATUS OUTPUT, @SQL_NO OUTPUT, @SQL_MSG OUTPUT
		SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG  AS SQL_MSG, @SQL_NO AS SQL_NO
		--
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SP_REF_COUNTRY_GET]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[SP_REF_COUNTRY_GET]
	@IN_USER_ID INT,
	@IN_BRANCH_ID INT,
	@IN_ID INT  = 0,
	@IN_STATUS INT = 0 
AS
SET NOCOUNT ON
BEGIN
	BEGIN TRY
		DECLARE @SQL_STATUS VARCHAR(28),  @SQL_NO VARCHAR(28), @SQL_MSG VARCHAR(1024), @SQL_OBJ VARCHAR(1024)
		--
		SELECT
			M.ID, M.NAME, M.CODE, M.DESCRIPTION,
			S.ID AS STATUS_ID, S.NAME AS STATUS, M.BRANCH_ID, M.CREATED_BY, M.CREATED_DT, M.UPDATED_BY, M.UPDATED_DT
		FROM REF_COUNTRY M  WITH(NOLOCK)
		INNER JOIN REF_STATUS S WITH(NOLOCK) ON M.STATUS = S.ID
		WHERE M.ID = CASE WHEN @IN_ID = 0 THEN M.ID ELSE @IN_ID END
			AND M.STATUS = CASE WHEN @IN_STATUS = 0 THEN M.STATUS ELSE @IN_STATUS END
			AND M.BRANCH_ID = @IN_BRANCH_ID
	END TRY
	--
	BEGIN CATCH
	SET @SQL_NO = ERROR_NUMBER()    
	SET @SQL_MSG = ERROR_MESSAGE()    
	SET @SQL_OBJ = ERROR_PROCEDURE()
	--
	EXEC SP_SYS_ERR_LOG @IN_USER_ID, @IN_BRANCH_ID, @SQL_NO, @SQL_OBJ, @SQL_OBJ, @SQL_MSG, @SQL_STATUS OUTPUT, @SQL_NO OUTPUT, @SQL_MSG OUTPUT
	--
	SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG  AS SQL_MSG, @SQL_NO AS SQL_NO
	--
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SP_REF_DEPARTMENT_CATEGORY_GET]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[SP_REF_DEPARTMENT_CATEGORY_GET]
	@IN_USER_ID INT,
	@IN_BRANCH_ID INT,
	@IN_ID INT  = 0,
	@IN_STATUS INT = 0 
AS
SET NOCOUNT ON
BEGIN
	BEGIN TRY
		DECLARE @SQL_STATUS VARCHAR(28),  @SQL_NO VARCHAR(28), @SQL_MSG VARCHAR(1024), @SQL_OBJ VARCHAR(1024)
		--
		SELECT
			DC.ID, DC.NAME, DC.CODE, DC.DESCRIPTION,
			S.ID AS STATUS_ID, S.NAME AS STATUS, DC.BRANCH_ID, DC.CREATED_BY, DC.CREATED_DT, DC.UPDATED_BY, DC.UPDATED_DT
		FROM REF_DEPARTMENT_CATEGORY DC WITH(NOLOCK)
		INNER JOIN REF_STATUS S WITH(NOLOCK) ON DC.STATUS = S.ID
		WHERE DC.ID = CASE WHEN @IN_ID = 0 THEN DC.ID ELSE @IN_ID END
			AND DC.STATUS = CASE WHEN @IN_STATUS = 0 THEN DC.STATUS ELSE @IN_STATUS END
			AND DC.BRANCH_ID = @IN_BRANCH_ID
	END TRY
	--
	BEGIN CATCH
	SET @SQL_NO = ERROR_NUMBER()    
	SET @SQL_MSG = ERROR_MESSAGE()    
	SET @SQL_OBJ = ERROR_PROCEDURE()
	--
	EXEC SP_SYS_ERR_LOG @IN_USER_ID, @IN_BRANCH_ID, @SQL_NO, @SQL_OBJ, @SQL_OBJ, @SQL_MSG, @SQL_STATUS OUTPUT, @SQL_NO OUTPUT, @SQL_MSG OUTPUT
	--
	SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG  AS SQL_MSG, @SQL_NO AS SQL_NO
	--
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SP_REF_DEPARTMENT_GET]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[SP_REF_DEPARTMENT_GET]
	@IN_USER_ID INT,
	@IN_BRANCH_ID INT,
	@IN_ID INT  = 0,
	@IN_STATUS INT = 0 
AS
SET NOCOUNT ON
BEGIN
	BEGIN TRY
		DECLARE @SQL_STATUS VARCHAR(28),  @SQL_NO VARCHAR(28), @SQL_MSG VARCHAR(1024), @SQL_OBJ VARCHAR(1024)
		--
		SELECT
			D.ID, D.NAME, D.CODE, D.DEPARTMENT_CATEGORY_ID, DC.NAME AS DEPARTMENT_CATEGORY, D.DESCRIPTION,
			S.ID AS STATUS_ID, S.NAME AS STATUS, D.BRANCH_ID, D.CREATED_BY, D.CREATED_DT, D.UPDATED_BY, D.UPDATED_DT
		FROM REF_DEPARTMENT D WITH(NOLOCK) 
		INNER JOIN REF_DEPARTMENT_CATEGORY DC WITH(NOLOCK) ON D.DEPARTMENT_CATEGORY_ID = DC.ID
		INNER JOIN REF_STATUS S WITH(NOLOCK) ON D.STATUS = S.ID
		WHERE D.ID = CASE WHEN @IN_ID = 0 THEN D.ID ELSE @IN_ID END
			AND D.STATUS = CASE WHEN @IN_STATUS = 0 THEN D.STATUS ELSE @IN_STATUS END
			AND D.BRANCH_ID = @IN_BRANCH_ID
	END TRY
	--
	BEGIN CATCH
	SET @SQL_NO = ERROR_NUMBER()    
	SET @SQL_MSG = ERROR_MESSAGE()    
	SET @SQL_OBJ = ERROR_PROCEDURE()
	--
	EXEC SP_SYS_ERR_LOG @IN_USER_ID, @IN_BRANCH_ID, @SQL_NO, @SQL_OBJ, @SQL_OBJ, @SQL_MSG, @SQL_STATUS OUTPUT, @SQL_NO OUTPUT, @SQL_MSG OUTPUT
	--
	SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG  AS SQL_MSG, @SQL_NO AS SQL_NO
	--
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SP_REF_DEPARTMENT_INSERT_UPDATE]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SP_REF_DEPARTMENT_INSERT_UPDATE]
	@IN_USER_ID INT,
	@IN_BRANCH_ID INT,
	@IN_ID INT,
	@IN_CODE NVARCHAR(24),
	@IN_NAME NVARCHAR(256),
	@IN_DEPARTMENT_CATEGORY_ID INT,
	@IN_DESCRIPTION NVARCHAR(1024),
	@IN_STATUS INT
AS
SET NOCOUNT ON
BEGIN
	BEGIN TRY
		DECLARE @SQL_STATUS VARCHAR(28),  @SQL_NO VARCHAR(28), @SQL_MSG VARCHAR(1024), @SQL_OBJ VARCHAR(1024)
		SELECT @SQL_OBJ = 'SP_REF_DEPARTMENT_INSERT_UPDATE', @SQL_STATUS = 'SUCCESS'
		--
		IF NOT EXISTS (SELECT 1 FROM REF_DEPARTMENT WITH(NOLOCK) WHERE ID = @IN_ID AND BRANCH_ID = @IN_BRANCH_ID)
			BEGIN
				INSERT INTO REF_DEPARTMENT (CODE, NAME, DEPARTMENT_CATEGORY_ID, DESCRIPTION,
						STATUS, BRANCH_ID, CREATED_BY, CREATED_DT, UPDATED_BY, UPDATED_DT)
					VALUES ( @IN_CODE, @IN_NAME,  @IN_DEPARTMENT_CATEGORY_ID, @IN_DESCRIPTION,
						@IN_STATUS, @IN_BRANCH_ID, @IN_USER_ID, GETDATE(), @IN_USER_ID, GETDATE())
				--
				SET @SQL_NO = SCOPE_IDENTITY()
				--
				SET @SQL_MSG = 'INSERTED RECORD SUCCESSFULLY'
			END
		ELSE
			BEGIN
				UPDATE REF_DEPARTMENT SET 
					CODE = @IN_CODE,
					NAME = @IN_NAME,
					DEPARTMENT_CATEGORY_ID = @IN_DEPARTMENT_CATEGORY_ID,
					DESCRIPTION = @IN_DESCRIPTION,
					STATUS = @IN_STATUS,
					UPDATED_BY = @IN_USER_ID,
					UPDATED_DT = GETDATE()
				WHERE ID = @IN_ID AND BRANCH_ID = @IN_BRANCH_ID
				--
				SET @SQL_NO = @IN_ID
				--
				SET @SQL_MSG = 'UPDATED RECORD SUCCESSFULLY'

			END
		--
		/*
		SP_SYS_AUDIT_LOG - input Param.
			@IN_USER_ID INT, @IN_BRANCH_ID INT, @IN_AUDIT_NUMBER VARCHAR(256), @IN_OBJ_NAME NVARCHAR(1024), 
			@IN_AUDIT_TITLE NVARCHAR(256), @IN_DESCRIPTION NVARCHAR(1024),
			@SQL_STATUS VARCHAR(28) OUTPUT, @SQL_NO VARCHAR(28) OUTPUT, @SQL_MSG VARCHAR(1024)  OUTPUT
		*/
		/*
		EXEC SP_SYS_AUDIT_LOG @IN_USER_ID, @IN_BRANCH_ID, @SQL_NO, @SQL_OBJ , @SQL_OBJ, @SQL_MSG, 
			@SQL_STATUS = @SQL_STATUS OUTPUT, @SQL_NO = @SQL_NO OUTPUT, @SQL_MSG = @SQL_MSG OUTPUT
		*/
		--
		SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG AS SQL_MSG, @SQL_NO AS SQL_NO
	END TRY

	BEGIN CATCH
		SET @SQL_NO = ERROR_NUMBER()    
		SET @SQL_MSG = ERROR_MESSAGE()    
		SET @SQL_OBJ = ERROR_PROCEDURE()
		--
		EXEC SP_SYS_ERR_LOG @IN_USER_ID, @IN_BRANCH_ID, @SQL_NO, @SQL_OBJ, @SQL_OBJ, @SQL_MSG, @SQL_STATUS OUTPUT, @SQL_NO OUTPUT, @SQL_MSG OUTPUT
		SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG  AS SQL_MSG, @SQL_NO AS SQL_NO
		--
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SP_REF_DESIGNATION_GET]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[SP_REF_DESIGNATION_GET]
	@IN_USER_ID INT,
	@IN_BRANCH_ID INT,
	@IN_ID INT  = 0,
	@IN_STATUS INT = 0 
AS
SET NOCOUNT ON
BEGIN
	BEGIN TRY
		DECLARE @SQL_STATUS VARCHAR(28),  @SQL_NO VARCHAR(28), @SQL_MSG VARCHAR(1024), @SQL_OBJ VARCHAR(1024)
		--
		SELECT
			M.ID, M.NAME, M.CODE, M.DESCRIPTION,
			S.ID AS STATUS_ID, S.NAME AS STATUS, M.BRANCH_ID, M.CREATED_BY, M.CREATED_DT, M.UPDATED_BY, M.UPDATED_DT
		FROM REF_DESIGNATION M WITH(NOLOCK)
		INNER JOIN REF_STATUS S WITH(NOLOCK) ON M.STATUS = S.ID
		WHERE M.ID = CASE WHEN @IN_ID = 0 THEN M.ID ELSE @IN_ID END
			AND M.STATUS = CASE WHEN @IN_STATUS = 0 THEN M.STATUS ELSE @IN_STATUS END
			AND M.BRANCH_ID = @IN_BRANCH_ID
	END TRY
	--
	BEGIN CATCH
	SET @SQL_NO = ERROR_NUMBER()    
	SET @SQL_MSG = ERROR_MESSAGE()    
	SET @SQL_OBJ = ERROR_PROCEDURE()
	--
	EXEC SP_SYS_ERR_LOG @IN_USER_ID, @IN_BRANCH_ID, @SQL_NO, @SQL_OBJ, @SQL_OBJ, @SQL_MSG, @SQL_STATUS OUTPUT, @SQL_NO OUTPUT, @SQL_MSG OUTPUT
	--
	SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG  AS SQL_MSG, @SQL_NO AS SQL_NO
	--
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SP_REF_EMPLOYEE_GET]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SP_REF_EMPLOYEE_GET]
	@IN_USER_ID INT,
	@IN_BRANCH_ID INT,
	@IN_ID INT  = 0,
	@IN_CATEGORY_ID INT = 0,
	@IN_STATUS INT = 0 
AS
SET NOCOUNT ON
BEGIN
	BEGIN TRY
		DECLARE @SQL_STATUS VARCHAR(28),  @SQL_NO VARCHAR(28), @SQL_MSG VARCHAR(1024), @SQL_OBJ VARCHAR(1024)
		--
		DECLARE @EMPLOYMENT_CATEGORY_ID INT
		IF @IN_CATEGORY_ID = 1 -- THIS IS FOR Doctor Employee List
			SELECT @EMPLOYMENT_CATEGORY_ID = ID FROM  REF_EMPLOYMENT_CATEGORY WHERE CODE = 'DR'
		Else 
			SET @EMPLOYMENT_CATEGORY_ID = @IN_CATEGORY_ID


		SELECT 
			E.ID, E.CODE, E.CODE + ' | ' + E.NAME AS NAME, 
			E.NAME AS EMPLOYEE_NAME, E.IDENTITY_TYPE_ID, I.NAME AS IDENTITY_TYPE, E.UID, 
			E.GENDER_ID, G.NAME AS GENDER, 
			E.DOB, 
			E.DESIGNATION_ID, DG.NAME AS DESIGNATION, 
			E.DEPARTMENT_ID, D.NAME AS DEPARTMENT, 
			E.JOB_TITLE_ID, T.NAME AS JOB_TITLE, E.MANAGER_ID, M.NAME AS MANAGER, 
			E.EMPLOYMENT_CATEGORY_ID, EC.NAME AS EMPLOYMENT_CATEGORY, 
			E.SPECIALIZATION_ID,SP.NAME AS SPECIALIZATION, 
			E.EMPLOYMENT_STATUS_ID, ES.NAME AS EMPLOYMENT_STATUS, 
			E.DOJ, E.MOBILE, E.MOBILE2, E.EMAIL, E.EMAIL2, 
			E.C_ADDRESS, E.C_CITY, E.C_STATE_ID, CS.NAME AS C_STATE, E.C_COUNTRY_ID, CC.NAME AS C_COUNTRY, E.C_PIN, 
			E.P_ADDRESS, E.P_CITY, E.P_STATE_ID, PS.NAME AS P_STATE, E.P_COUNTRY_ID, PC.NAME AS P_COUNTRY, E.P_PIN, 
			E.NATIONALITY_ID, N.NATIONALITY, E.RELIGION_ID, R.NAME AS RELIGION, 
			E.F_NAME, E.F_MOBILE, E.F_EMAIL, E.M_NAME, E.M_MOBILE, E.M_EMAIL, 
			E.S_NAME, E.S_MOBILE, E.S_EMAIL, E.G_NAME, E.G_MOBILE, E.G_EMAIL, 
			E.DESCRIPTION, E.STATUS AS STATUS_ID, S.NAME AS STATUS, E.BRANCH_ID, 
			E.CREATED_BY, E.CREATED_DT, E.UPDATED_BY, E.UPDATED_DT
		FROM REF_EMPLOYEE E WITH(NOLOCK)
		LEFT OUTER JOIN REF_IDENTITY_TYPE I WITH(NOLOCK) ON E.IDENTITY_TYPE_ID = I.ID
		LEFT OUTER JOIN REF_GENDER G WITH(NOLOCK) ON E.GENDER_ID = G.ID
		LEFT OUTER JOIN REF_DESIGNATION DG WITH(NOLOCK) ON E.DESIGNATION_ID = DG.ID
		LEFT OUTER JOIN REF_DEPARTMENT D WITH(NOLOCK) ON E.DEPARTMENT_ID = D.ID
		LEFT OUTER JOIN REF_JOB_TITLE T WITH(NOLOCK) ON T.ID = E.JOB_TITLE_ID
		LEFT OUTER JOIN REF_EMPLOYEE M WITH(NOLOCK) ON E.MANAGER_ID = M.ID
		LEFT OUTER JOIN REF_EMPLOYMENT_CATEGORY EC WITH(NOLOCK) ON EC.ID = E.EMPLOYMENT_CATEGORY_ID
		LEFT OUTER JOIN REF_EMPLOYMENT_CATEGORY_SPECIALIZATION SP WITH(NOLOCK) ON SP.ID = E.SPECIALIZATION_ID
		LEFT OUTER JOIN REF_EMPLOYMENT_STATUS ES WITH(NOLOCK) ON ES.ID = E.EMPLOYMENT_STATUS_ID
		LEFT OUTER JOIN REF_STATE CS WITH(NOLOCK) ON CS.ID = E.C_STATE_ID
		LEFT OUTER JOIN REF_COUNTRY CC WITH(NOLOCK) ON CC.ID = E.C_COUNTRY_ID
		LEFT OUTER JOIN REF_STATE PS WITH(NOLOCK) ON PS.ID = E.P_STATE_ID
		LEFT OUTER JOIN REF_COUNTRY PC WITH(NOLOCK) ON PC.ID = E.P_COUNTRY_ID
		LEFT OUTER JOIN REF_COUNTRY N WITH(NOLOCK) ON N.ID = E.NATIONALITY_ID
		LEFT OUTER JOIN REF_RELIGION R WITH(NOLOCK) ON R.ID = E.RELIGION_ID
		INNER JOIN REF_STATUS S WITH(NOLOCK) ON E.STATUS = S.ID
		WHERE E.ID = CASE WHEN @IN_ID = 0 THEN E.ID ELSE @IN_ID END
			AND E.EMPLOYMENT_CATEGORY_ID = CASE WHEN @EMPLOYMENT_CATEGORY_ID = 0 THEN E.EMPLOYMENT_CATEGORY_ID ELSE @EMPLOYMENT_CATEGORY_ID END
			AND E.STATUS = CASE WHEN @IN_STATUS = 0 THEN E.STATUS ELSE @IN_STATUS END
			AND E.BRANCH_ID = @IN_BRANCH_ID
	END TRY
	--
	BEGIN CATCH
	SET @SQL_NO = ERROR_NUMBER()    
	SET @SQL_MSG = ERROR_MESSAGE()    
	SET @SQL_OBJ = ERROR_PROCEDURE()
	--
	EXEC SP_SYS_ERR_LOG @IN_USER_ID, @IN_BRANCH_ID, @SQL_NO, @SQL_OBJ, @SQL_OBJ, @SQL_MSG, @SQL_STATUS OUTPUT, @SQL_NO OUTPUT, @SQL_MSG OUTPUT
	--
	SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG  AS SQL_MSG, @SQL_NO AS SQL_NO
	--
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SP_REF_EMPLOYEE_INSERT_UPDATE]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[SP_REF_EMPLOYEE_INSERT_UPDATE]
	@IN_USER_ID INT,
	@IN_BRANCH_ID INT,
	@IN_ID INT,
	@IN_CODE NVARCHAR(56) ,
	@IN_NAME NVARCHAR(256) ,		
	@IN_IDENTITY_TYPE_ID INT ,
	@IN_UID NVARCHAR(56) ,
	@IN_GENDER_ID INT ,
	@IN_DOB DATETIME,
	@IN_DESIGNATION_ID INT,
	@IN_DEPARTMENT_ID INT,
	@IN_JOB_TITLE_ID INT,
	@IN_MANAGER_ID INT,
	@IN_EMPLOYMENT_CATEGORY_ID INT,
	@IN_SPECIALIZATION_ID INT,
	@IN_EMPLOYMENT_STATUS_ID INT,
	@IN_DOJ DATETIME,
	@IN_MOBILE NVARCHAR(56),
	@IN_MOBILE2 NVARCHAR(56),
	@IN_EMAIL NVARCHAR(256),
	@IN_EMAIL2 NVARCHAR(256),
	@IN_C_ADDRESS NVARCHAR(1024),
	@IN_C_CITY NVARCHAR(256),
	@IN_C_STATE_ID INT,
	@IN_C_COUNTRY_ID INT,
	@IN_C_PIN NVARCHAR(56),
	@IN_P_ADDRESS NVARCHAR(1024),
	@IN_P_CITY NVARCHAR(256),
	@IN_P_STATE_ID INT,
	@IN_P_COUNTRY_ID INT,
	@IN_P_PIN NVARCHAR(56),
	@IN_NATIONALITY_ID INT,
	@IN_RELIGION_ID INT,
	@IN_F_NAME NVARCHAR(256),
	@IN_F_MOBILE NVARCHAR(56),
	@IN_F_EMAIL NVARCHAR(256),
	@IN_M_NAME NVARCHAR(256),
	@IN_M_MOBILE NVARCHAR(56),
	@IN_M_EMAIL NVARCHAR(256),
	@IN_S_NAME NVARCHAR(256),
	@IN_S_MOBILE NVARCHAR(56),
	@IN_S_EMAIL NVARCHAR(256),
	@IN_G_NAME NVARCHAR(256),
	@IN_G_MOBILE NVARCHAR(56),
	@IN_G_EMAIL NVARCHAR(256),	
	@IN_DESCRIPTION NVARCHAR(1024),
	@IN_STATUS INT
AS
SET NOCOUNT ON
BEGIN
	BEGIN TRY
		DECLARE @SQL_STATUS VARCHAR(28),  @SQL_NO VARCHAR(28), @SQL_MSG VARCHAR(1024), @SQL_OBJ VARCHAR(1024)
		SELECT @SQL_OBJ = 'SP_REF_EMPLOYEE_INSERT_UPDATE', @SQL_STATUS = 'SUCCESS'
		--
		--
		IF NOT EXISTS (SELECT 1 FROM REF_EMPLOYEE WITH(NOLOCK) WHERE ID = @IN_ID AND BRANCH_ID = @IN_BRANCH_ID)
			BEGIN
				INSERT INTO REF_EMPLOYEE ( CODE, NAME, IDENTITY_TYPE_ID, UID, GENDER_ID, 
							DOB, DESIGNATION_ID, DEPARTMENT_ID, JOB_TITLE_ID, 
							MANAGER_ID, EMPLOYMENT_CATEGORY_ID, SPECIALIZATION_ID, EMPLOYMENT_STATUS_ID, DOJ, 
							MOBILE, MOBILE2, EMAIL, EMAIL2, 
							C_ADDRESS, C_CITY, C_STATE_ID, C_COUNTRY_ID, C_PIN,
							P_ADDRESS, P_CITY, P_STATE_ID, P_COUNTRY_ID, P_PIN,
							NATIONALITY_ID, RELIGION_ID,
							F_NAME, F_MOBILE, F_EMAIL, M_NAME, M_MOBILE, M_EMAIL,
							S_NAME, S_MOBILE, S_EMAIL, G_NAME, G_MOBILE, G_EMAIL,							
							DESCRIPTION, 
							STATUS, BRANCH_ID, CREATED_BY, CREATED_DT, UPDATED_BY, UPDATED_DT
						)
				VALUES ( @IN_CODE, @IN_NAME, @IN_IDENTITY_TYPE_ID, @IN_UID, @IN_GENDER_ID, 
							@IN_DOB, @IN_DESIGNATION_ID, @IN_DEPARTMENT_ID, @IN_JOB_TITLE_ID, 
							@IN_MANAGER_ID, @IN_EMPLOYMENT_CATEGORY_ID, @IN_SPECIALIZATION_ID, @IN_EMPLOYMENT_STATUS_ID, @IN_DOJ, 
							@IN_MOBILE, @IN_MOBILE2, @IN_EMAIL, @IN_EMAIL2, 
							@IN_C_ADDRESS, @IN_C_CITY, @IN_C_STATE_ID, @IN_C_COUNTRY_ID, @IN_C_PIN,
							@IN_P_ADDRESS, @IN_P_CITY, @IN_P_STATE_ID, @IN_P_COUNTRY_ID, @IN_P_PIN,
							@IN_NATIONALITY_ID, @IN_RELIGION_ID, 
							@IN_F_NAME, @IN_F_MOBILE, @IN_F_EMAIL, @IN_M_NAME, @IN_M_MOBILE, @IN_M_EMAIL, 
							@IN_S_NAME, @IN_S_MOBILE, @IN_S_EMAIL, @IN_G_NAME, @IN_G_MOBILE, @IN_G_EMAIL,							
							@IN_DESCRIPTION,
					@IN_STATUS, @IN_BRANCH_ID, @IN_USER_ID, GETDATE(), @IN_USER_ID, GETDATE())
				
				--
				SET @SQL_NO = SCOPE_IDENTITY()
				--
				SET @SQL_MSG = 'INSERTED RECORD SUCCESSFULLY'
			END
		ELSE
			BEGIN
				UPDATE REF_EMPLOYEE SET
					CODE = @IN_CODE,
					NAME = @IN_NAME,
					IDENTITY_TYPE_ID = @IN_IDENTITY_TYPE_ID,
					UID = @IN_UID,
					GENDER_ID = @IN_GENDER_ID,
					DOB = @IN_DOB,
					DESIGNATION_ID = @IN_DESIGNATION_ID,
					DEPARTMENT_ID = @IN_DEPARTMENT_ID,
					JOB_TITLE_ID = @IN_JOB_TITLE_ID,
					MANAGER_ID = @IN_MANAGER_ID,
					EMPLOYMENT_CATEGORY_ID = @IN_EMPLOYMENT_CATEGORY_ID,
					SPECIALIZATION_ID = @IN_SPECIALIZATION_ID,
					EMPLOYMENT_STATUS_ID = @IN_EMPLOYMENT_STATUS_ID,
					DOJ = @IN_DOJ,
					MOBILE = @IN_MOBILE,
					MOBILE2 = @IN_MOBILE2,
					EMAIL = @IN_EMAIL,
					EMAIL2 = @IN_EMAIL2,
					C_ADDRESS = @IN_C_ADDRESS,
					C_CITY = @IN_C_CITY,
					C_STATE_ID = @IN_C_STATE_ID,
					C_COUNTRY_ID = @IN_C_COUNTRY_ID,
					C_PIN = @IN_C_PIN,
					P_ADDRESS = @IN_P_ADDRESS,
					P_CITY = @IN_P_CITY,
					P_STATE_ID = @IN_P_STATE_ID,
					P_COUNTRY_ID = @IN_P_COUNTRY_ID,
					P_PIN = @IN_P_PIN,
					NATIONALITY_ID = @IN_NATIONALITY_ID,
					RELIGION_ID = @IN_RELIGION_ID,
					F_NAME = @IN_F_NAME,
					F_MOBILE = @IN_F_MOBILE,
					F_EMAIL = @IN_F_EMAIL,
					M_NAME = @IN_M_NAME,
					M_MOBILE = @IN_M_MOBILE,
					M_EMAIL = @IN_M_EMAIL,
					S_NAME = @IN_S_NAME,
					S_MOBILE = @IN_S_MOBILE,
					S_EMAIL = @IN_S_EMAIL,
					G_NAME = @IN_G_NAME,
					G_MOBILE = @IN_G_MOBILE,
					G_EMAIL = @IN_G_EMAIL,
					-- BRANCH_ID = @IN_BRANCH_ID,
					DESCRIPTION = @IN_DESCRIPTION,
					STATUS = @IN_STATUS,
					UPDATED_BY = @IN_USER_ID,
					UPDATED_DT = GETDATE()
				WHERE ID = @IN_ID AND BRANCH_ID = @IN_BRANCH_ID
				--
				SET @SQL_NO = @IN_ID
				--
				SET @SQL_MSG = 'UPDATED RECORD SUCCESSFULLY'
			END
		--
		SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG AS SQL_MSG, @SQL_NO AS SQL_NO

	END TRY

	BEGIN CATCH
		SET @SQL_NO = ERROR_NUMBER()    
		SET @SQL_MSG = ERROR_MESSAGE()    
		SET @SQL_OBJ = ERROR_PROCEDURE()
		--
		EXEC SP_SYS_ERR_LOG @IN_USER_ID, @IN_BRANCH_ID, @SQL_NO, @SQL_OBJ, @SQL_OBJ, @SQL_MSG, @SQL_STATUS OUTPUT, @SQL_NO OUTPUT, @SQL_MSG OUTPUT
		SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG  AS SQL_MSG, @SQL_NO AS SQL_NO
		--
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SP_REF_EMPLOYMENT_CATEGORY_GET]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[SP_REF_EMPLOYMENT_CATEGORY_GET]
	@IN_USER_ID INT,
	@IN_BRANCH_ID INT,
	@IN_ID INT  = 0,
	@IN_STATUS INT = 0 
AS
SET NOCOUNT ON
BEGIN
	BEGIN TRY
		DECLARE @SQL_STATUS VARCHAR(28),  @SQL_NO VARCHAR(28), @SQL_MSG VARCHAR(1024), @SQL_OBJ VARCHAR(1024)
		--
		SELECT
			M.ID, M.NAME, M.CODE, M.DESCRIPTION,
			S.ID AS STATUS_ID, S.NAME AS STATUS, M.BRANCH_ID, M.CREATED_BY, M.CREATED_DT, M.UPDATED_BY, M.UPDATED_DT
		FROM REF_EMPLOYMENT_CATEGORY M WITH(NOLOCK)
		INNER JOIN REF_STATUS S WITH(NOLOCK) ON M.STATUS = S.ID
		WHERE M.ID = CASE WHEN @IN_ID = 0 THEN M.ID ELSE @IN_ID END
			AND M.STATUS = CASE WHEN @IN_STATUS = 0 THEN M.STATUS ELSE @IN_STATUS END
			AND M.BRANCH_ID = @IN_BRANCH_ID
	END TRY
	--
	BEGIN CATCH
	SET @SQL_NO = ERROR_NUMBER()    
	SET @SQL_MSG = ERROR_MESSAGE()    
	SET @SQL_OBJ = ERROR_PROCEDURE()
	--
	EXEC SP_SYS_ERR_LOG @IN_USER_ID, @IN_BRANCH_ID, @SQL_NO, @SQL_OBJ, @SQL_OBJ, @SQL_MSG, @SQL_STATUS OUTPUT, @SQL_NO OUTPUT, @SQL_MSG OUTPUT
	--
	SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG  AS SQL_MSG, @SQL_NO AS SQL_NO
	--
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SP_REF_EMPLOYMENT_CATEGORY_SPECIALIZATION_GET]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[SP_REF_EMPLOYMENT_CATEGORY_SPECIALIZATION_GET]
	@IN_USER_ID INT,
	@IN_BRANCH_ID INT,
	@IN_ID INT  = 0,
	@IN_STATUS INT = 0 
AS
SET NOCOUNT ON
BEGIN
	BEGIN TRY
		DECLARE @SQL_STATUS VARCHAR(28),  @SQL_NO VARCHAR(28), @SQL_MSG VARCHAR(1024), @SQL_OBJ VARCHAR(1024)
		--
		SELECT
			D.ID, D.EMPLOYMENT_CATEGORY_ID, R.NAME AS EMPLOYMENT_CATEGORY, D.NAME, D.CODE, D.DESCRIPTION,
			S.ID AS STATUS_ID, S.NAME AS STATUS, D.BRANCH_ID, D.CREATED_BY, D.CREATED_DT, D.UPDATED_BY, D.UPDATED_DT
		FROM REF_EMPLOYMENT_CATEGORY_SPECIALIZATION D WITH(NOLOCK)
		LEFT OUTER JOIN REF_EMPLOYMENT_CATEGORY R WITH(NOLOCK) ON D.EMPLOYMENT_CATEGORY_ID = R.ID
		INNER JOIN REF_STATUS S WITH(NOLOCK) ON D.STATUS = S.ID
		WHERE D.ID = CASE WHEN @IN_ID = 0 THEN D.ID ELSE @IN_ID END
			AND D.STATUS = CASE WHEN @IN_STATUS = 0 THEN D.STATUS ELSE @IN_STATUS END
			AND D.BRANCH_ID = @IN_BRANCH_ID
	END TRY
	--
	BEGIN CATCH
	SET @SQL_NO = ERROR_NUMBER()    
	SET @SQL_MSG = ERROR_MESSAGE()    
	SET @SQL_OBJ = ERROR_PROCEDURE()
	--
	EXEC SP_SYS_ERR_LOG @IN_USER_ID, @IN_BRANCH_ID, @SQL_NO, @SQL_OBJ, @SQL_OBJ, @SQL_MSG, @SQL_STATUS OUTPUT, @SQL_NO OUTPUT, @SQL_MSG OUTPUT
	--
	SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG  AS SQL_MSG, @SQL_NO AS SQL_NO
	--
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SP_REF_EMPLOYMENT_STATUS_GET]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[SP_REF_EMPLOYMENT_STATUS_GET]
	@IN_USER_ID INT,
	@IN_BRANCH_ID INT,
	@IN_ID INT  = 0,
	@IN_STATUS INT = 0 
AS
SET NOCOUNT ON
BEGIN
	BEGIN TRY
		DECLARE @SQL_STATUS VARCHAR(28),  @SQL_NO VARCHAR(28), @SQL_MSG VARCHAR(1024), @SQL_OBJ VARCHAR(1024)
		--
		SELECT
			M.ID, M.NAME, M.CODE, M.DESCRIPTION,
			S.ID AS STATUS_ID, S.NAME AS STATUS, M.BRANCH_ID, M.CREATED_BY, M.CREATED_DT, M.UPDATED_BY, M.UPDATED_DT
		FROM REF_EMPLOYMENT_STATUS M WITH(NOLOCK)
		INNER JOIN REF_STATUS S WITH(NOLOCK) ON M.STATUS = S.ID
		WHERE M.ID = CASE WHEN @IN_ID = 0 THEN M.ID ELSE @IN_ID END
			AND M.STATUS = CASE WHEN @IN_STATUS = 0 THEN M.STATUS ELSE @IN_STATUS END
			AND M.BRANCH_ID = @IN_BRANCH_ID
	END TRY
	--
	BEGIN CATCH
	SET @SQL_NO = ERROR_NUMBER()    
	SET @SQL_MSG = ERROR_MESSAGE()    
	SET @SQL_OBJ = ERROR_PROCEDURE()
	--
	EXEC SP_SYS_ERR_LOG @IN_USER_ID, @IN_BRANCH_ID, @SQL_NO, @SQL_OBJ, @SQL_OBJ, @SQL_MSG, @SQL_STATUS OUTPUT, @SQL_NO OUTPUT, @SQL_MSG OUTPUT
	--
	SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG  AS SQL_MSG, @SQL_NO AS SQL_NO
	--
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SP_REF_GENDER_GET]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[SP_REF_GENDER_GET]
	@IN_USER_ID INT,
	@IN_BRANCH_ID INT,
	@IN_ID INT  = 0,
	@IN_STATUS INT = 0 
AS
SET NOCOUNT ON
BEGIN
	BEGIN TRY
		DECLARE @SQL_STATUS VARCHAR(28),  @SQL_NO VARCHAR(28), @SQL_MSG VARCHAR(1024), @SQL_OBJ VARCHAR(1024)
		--
		SELECT
			M.ID, M.NAME, M.CODE, M.DESCRIPTION,
			S.ID AS STATUS_ID, S.NAME AS STATUS, M.BRANCH_ID, M.CREATED_BY, M.CREATED_DT, M.UPDATED_BY, M.UPDATED_DT
		FROM REF_GENDER M WITH(NOLOCK)
		INNER JOIN REF_STATUS S WITH(NOLOCK) ON M.STATUS = S.ID
		WHERE M.ID = CASE WHEN @IN_ID = 0 THEN M.ID ELSE @IN_ID END
			AND M.STATUS = CASE WHEN @IN_STATUS = 0 THEN M.STATUS ELSE @IN_STATUS END
			AND BRANCH_ID = @IN_BRANCH_ID
	END TRY
	--
	BEGIN CATCH
	SET @SQL_NO = ERROR_NUMBER()    
	SET @SQL_MSG = ERROR_MESSAGE()    
	SET @SQL_OBJ = ERROR_PROCEDURE()
	--
	EXEC SP_SYS_ERR_LOG @IN_USER_ID, @IN_BRANCH_ID, @SQL_NO, @SQL_OBJ, @SQL_OBJ, @SQL_MSG, @SQL_STATUS OUTPUT, @SQL_NO OUTPUT, @SQL_MSG OUTPUT
	--
	SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG  AS SQL_MSG, @SQL_NO AS SQL_NO
	--
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SP_REF_IDENTITY_TYPE_GET]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[SP_REF_IDENTITY_TYPE_GET]
	@IN_USER_ID INT,
	@IN_BRANCH_ID INT,
	@IN_ID INT  = 0,
	@IN_STATUS INT = 0 
AS
SET NOCOUNT ON
BEGIN
	BEGIN TRY
		DECLARE @SQL_STATUS VARCHAR(28),  @SQL_NO VARCHAR(28), @SQL_MSG VARCHAR(1024), @SQL_OBJ VARCHAR(1024)
		--
		SELECT
			M.ID, M.NAME, M.CODE, M.DESCRIPTION,
			S.ID AS STATUS_ID, S.NAME AS STATUS, M.BRANCH_ID, M.CREATED_BY, M.CREATED_DT, M.UPDATED_BY, M.UPDATED_DT
		FROM REF_IDENTITY_TYPE M WITH(NOLOCK)
		INNER JOIN REF_STATUS S WITH(NOLOCK) ON M.STATUS = S.ID
		WHERE M.ID = CASE WHEN @IN_ID = 0 THEN M.ID ELSE @IN_ID END
			AND M.STATUS = CASE WHEN @IN_STATUS = 0 THEN M.STATUS ELSE @IN_STATUS END
			AND M.BRANCH_ID = @IN_BRANCH_ID
	END TRY
	--
	BEGIN CATCH
	SET @SQL_NO = ERROR_NUMBER()    
	SET @SQL_MSG = ERROR_MESSAGE()    
	SET @SQL_OBJ = ERROR_PROCEDURE()
	--
	EXEC SP_SYS_ERR_LOG @IN_USER_ID, @IN_BRANCH_ID, @SQL_NO, @SQL_OBJ, @SQL_OBJ, @SQL_MSG, @SQL_STATUS OUTPUT, @SQL_NO OUTPUT, @SQL_MSG OUTPUT
	--
	SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG  AS SQL_MSG, @SQL_NO AS SQL_NO
	--
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SP_REF_JOB_TITLE_GET]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[SP_REF_JOB_TITLE_GET]
	@IN_USER_ID INT,
	@IN_BRANCH_ID INT,
	@IN_ID INT  = 0,
	@IN_STATUS INT = 0 
AS
SET NOCOUNT ON
BEGIN
	BEGIN TRY
		DECLARE @SQL_STATUS VARCHAR(28),  @SQL_NO VARCHAR(28), @SQL_MSG VARCHAR(1024), @SQL_OBJ VARCHAR(1024)
		--
		SELECT
			M.ID, M.NAME, M.CODE, M.DESCRIPTION,
			S.ID AS STATUS_ID, S.NAME AS STATUS, M.BRANCH_ID, M.CREATED_BY, M.CREATED_DT, M.UPDATED_BY, M.UPDATED_DT
		FROM REF_JOB_TITLE M WITH(NOLOCK)
		INNER JOIN REF_STATUS S WITH(NOLOCK) ON M.STATUS = S.ID
		WHERE M.ID = CASE WHEN @IN_ID = 0 THEN M.ID ELSE @IN_ID END
			AND M.STATUS = CASE WHEN @IN_STATUS = 0 THEN M.STATUS ELSE @IN_STATUS END
			AND M.BRANCH_ID = @IN_BRANCH_ID
	END TRY
	--
	BEGIN CATCH
	SET @SQL_NO = ERROR_NUMBER()    
	SET @SQL_MSG = ERROR_MESSAGE()    
	SET @SQL_OBJ = ERROR_PROCEDURE()
	--
	EXEC SP_SYS_ERR_LOG @IN_USER_ID, @IN_BRANCH_ID, @SQL_NO, @SQL_OBJ, @SQL_OBJ, @SQL_MSG, @SQL_STATUS OUTPUT, @SQL_NO OUTPUT, @SQL_MSG OUTPUT
	--
	SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG  AS SQL_MSG, @SQL_NO AS SQL_NO
	--
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SP_REF_MARITAL_STATUS_GET]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[SP_REF_MARITAL_STATUS_GET]
	@IN_USER_ID INT,
	@IN_BRANCH_ID INT,
	@IN_ID INT  = 0,
	@IN_STATUS INT = 0 
AS
SET NOCOUNT ON
BEGIN
	BEGIN TRY
		DECLARE @SQL_STATUS VARCHAR(28),  @SQL_NO VARCHAR(28), @SQL_MSG VARCHAR(1024), @SQL_OBJ VARCHAR(1024)
		--
		SELECT
			M.ID, M.NAME, M.CODE, M.DESCRIPTION,
			S.ID AS STATUS_ID, S.NAME AS STATUS, M.BRANCH_ID, M.CREATED_BY, M.CREATED_DT, M.UPDATED_BY, M.UPDATED_DT
		FROM REF_MARITAL_STATUS M WITH(NOLOCK)
		INNER JOIN REF_STATUS S WITH(NOLOCK) ON M.STATUS = S.ID
		WHERE M.ID = CASE WHEN @IN_ID = 0 THEN M.ID ELSE @IN_ID END
			AND M.STATUS = CASE WHEN @IN_STATUS = 0 THEN M.STATUS ELSE @IN_STATUS END
			AND M.BRANCH_ID = @IN_BRANCH_ID
	END TRY
	--
	BEGIN CATCH
	SET @SQL_NO = ERROR_NUMBER()    
	SET @SQL_MSG = ERROR_MESSAGE()    
	SET @SQL_OBJ = ERROR_PROCEDURE()
	--
	EXEC SP_SYS_ERR_LOG @IN_USER_ID, @IN_BRANCH_ID, @SQL_NO, @SQL_OBJ, @SQL_OBJ, @SQL_MSG, @SQL_STATUS OUTPUT, @SQL_NO OUTPUT, @SQL_MSG OUTPUT
	--
	SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG  AS SQL_MSG, @SQL_NO AS SQL_NO
	--
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SP_REF_NATIONALITY_GET]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[SP_REF_NATIONALITY_GET]
	@IN_USER_ID INT,
	@IN_BRANCH_ID INT,
	@IN_ID INT  = 0,
	@IN_STATUS INT = 0 
AS
SET NOCOUNT ON
BEGIN
	BEGIN TRY
		DECLARE @SQL_STATUS VARCHAR(28),  @SQL_NO VARCHAR(28), @SQL_MSG VARCHAR(1024), @SQL_OBJ VARCHAR(1024)
		--
		SELECT
			M.ID, M.NATIONALITY AS NAME, M.CODE, M.DESCRIPTION,
			S.ID AS STATUS_ID, S.NAME AS STATUS, M.BRANCH_ID, M.CREATED_BY, M.CREATED_DT, M.UPDATED_BY, M.UPDATED_DT
		FROM REF_COUNTRY M WITH(NOLOCK)
		INNER JOIN REF_STATUS S WITH(NOLOCK) ON M.STATUS = S.ID
		WHERE M.ID = CASE WHEN @IN_ID = 0 THEN M.ID ELSE @IN_ID END
			AND M.STATUS = CASE WHEN @IN_STATUS = 0 THEN M.STATUS ELSE @IN_STATUS END
			AND M.BRANCH_ID = @IN_BRANCH_ID
	END TRY
	--
	BEGIN CATCH
	SET @SQL_NO = ERROR_NUMBER()    
	SET @SQL_MSG = ERROR_MESSAGE()    
	SET @SQL_OBJ = ERROR_PROCEDURE()
	--
	EXEC SP_SYS_ERR_LOG @IN_USER_ID, @IN_BRANCH_ID, @SQL_NO, @SQL_OBJ, @SQL_OBJ, @SQL_MSG, @SQL_STATUS OUTPUT, @SQL_NO OUTPUT, @SQL_MSG OUTPUT
	--
	SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG  AS SQL_MSG, @SQL_NO AS SQL_NO
	--
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SP_REF_PATIENT_CATEGORY_GET]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[SP_REF_PATIENT_CATEGORY_GET]
	@IN_USER_ID INT,
	@IN_BRANCH_ID INT,
	@IN_ID INT  = 0,
	@IN_STATUS INT = 0 
AS
SET NOCOUNT ON
BEGIN
	BEGIN TRY
		DECLARE @SQL_STATUS VARCHAR(28),  @SQL_NO VARCHAR(28), @SQL_MSG VARCHAR(1024), @SQL_OBJ VARCHAR(1024)
		--
		SELECT
			M.ID, M.NAME, M.CODE, M.DESCRIPTION,
			S.ID AS STATUS_ID, S.NAME AS STATUS, M.BRANCH_ID, M.CREATED_BY, M.CREATED_DT, M.UPDATED_BY, M.UPDATED_DT
		FROM REF_PATIENT_CATEGORY M WITH(NOLOCK) 
		INNER JOIN REF_STATUS S WITH(NOLOCK) ON M.STATUS = S.ID
		WHERE M.ID = CASE WHEN @IN_ID = 0 THEN M.ID ELSE @IN_ID END
			AND M.STATUS = CASE WHEN @IN_STATUS = 0 THEN M.STATUS ELSE @IN_STATUS END
			AND M.BRANCH_ID = @IN_BRANCH_ID
	END TRY
	--
	BEGIN CATCH
	SET @SQL_NO = ERROR_NUMBER()    
	SET @SQL_MSG = ERROR_MESSAGE()    
	SET @SQL_OBJ = ERROR_PROCEDURE()
	--
	EXEC SP_SYS_ERR_LOG @IN_USER_ID, @IN_BRANCH_ID, @SQL_NO, @SQL_OBJ, @SQL_OBJ, @SQL_MSG, @SQL_STATUS OUTPUT, @SQL_NO OUTPUT, @SQL_MSG OUTPUT
	--
	SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG  AS SQL_MSG, @SQL_NO AS SQL_NO
	--
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SP_REF_RELATION_GET]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[SP_REF_RELATION_GET]
	@IN_USER_ID INT,
	@IN_BRANCH_ID INT,
	@IN_ID INT  = 0,
	@IN_STATUS INT = 0 
AS
SET NOCOUNT ON
BEGIN
	BEGIN TRY
		DECLARE @SQL_STATUS VARCHAR(28),  @SQL_NO VARCHAR(28), @SQL_MSG VARCHAR(1024), @SQL_OBJ VARCHAR(1024)
		--
		SELECT
			M.ID, M.NAME, M.CODE, M.DESCRIPTION,
			S.ID AS STATUS_ID, S.NAME AS STATUS, M.BRANCH_ID, M.CREATED_BY, M.CREATED_DT, M.UPDATED_BY, M.UPDATED_DT
		FROM REF_RELATION M WITH(NOLOCK) 
		INNER JOIN REF_STATUS S WITH(NOLOCK) ON M.STATUS = S.ID
		WHERE M.ID = CASE WHEN @IN_ID = 0 THEN M.ID ELSE @IN_ID END
			AND M.STATUS = CASE WHEN @IN_STATUS = 0 THEN M.STATUS ELSE @IN_STATUS END
			AND M.BRANCH_ID = @IN_BRANCH_ID
	END TRY
	--
	BEGIN CATCH
	SET @SQL_NO = ERROR_NUMBER()    
	SET @SQL_MSG = ERROR_MESSAGE()    
	SET @SQL_OBJ = ERROR_PROCEDURE()
	--
	EXEC SP_SYS_ERR_LOG @IN_USER_ID, @IN_BRANCH_ID, @SQL_NO, @SQL_OBJ, @SQL_OBJ, @SQL_MSG, @SQL_STATUS OUTPUT, @SQL_NO OUTPUT, @SQL_MSG OUTPUT
	--
	SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG  AS SQL_MSG, @SQL_NO AS SQL_NO
	--
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SP_REF_RELIGION_GET]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[SP_REF_RELIGION_GET]
	@IN_USER_ID INT,
	@IN_BRANCH_ID INT,
	@IN_ID INT  = 0,
	@IN_STATUS INT = 0 
AS
SET NOCOUNT ON
BEGIN
	BEGIN TRY
		DECLARE @SQL_STATUS VARCHAR(28),  @SQL_NO VARCHAR(28), @SQL_MSG VARCHAR(1024), @SQL_OBJ VARCHAR(1024)
		--
		SELECT
			M.ID, M.NAME, M.CODE, M.DESCRIPTION,
			S.ID AS STATUS_ID, S.NAME AS STATUS, M.BRANCH_ID, M.CREATED_BY, M.CREATED_DT, M.UPDATED_BY, M.UPDATED_DT
		FROM REF_RELIGION M WITH(NOLOCK) 
		INNER JOIN REF_STATUS S WITH(NOLOCK) ON M.STATUS = S.ID
		WHERE M.ID = CASE WHEN @IN_ID = 0 THEN M.ID ELSE @IN_ID END
			AND M.STATUS = CASE WHEN @IN_STATUS = 0 THEN M.STATUS ELSE @IN_STATUS END
			AND M.BRANCH_ID = @IN_BRANCH_ID
	END TRY
	--
	BEGIN CATCH
	SET @SQL_NO = ERROR_NUMBER()    
	SET @SQL_MSG = ERROR_MESSAGE()    
	SET @SQL_OBJ = ERROR_PROCEDURE()
	--
	EXEC SP_SYS_ERR_LOG @IN_USER_ID, @IN_BRANCH_ID, @SQL_NO, @SQL_OBJ, @SQL_OBJ, @SQL_MSG, @SQL_STATUS OUTPUT, @SQL_NO OUTPUT, @SQL_MSG OUTPUT
	--
	SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG  AS SQL_MSG, @SQL_NO AS SQL_NO
	--
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SP_REF_SERVICE_CATEGORY_GET]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[SP_REF_SERVICE_CATEGORY_GET]
	@IN_USER_ID INT,
	@IN_BRANCH_ID INT,
	@IN_ID INT  = 0,
	@IN_STATUS INT = 0 
AS
SET NOCOUNT ON
BEGIN
	BEGIN TRY
		DECLARE @SQL_STATUS VARCHAR(28),  @SQL_NO VARCHAR(28), @SQL_MSG VARCHAR(1024), @SQL_OBJ VARCHAR(1024)
		--
		SELECT
			D.ID, D.NAME, D.CODE, D.DESCRIPTION,
			S.ID AS STATUS_ID, S.NAME AS STATUS, D.BRANCH_ID, D.CREATED_BY, D.CREATED_DT, D.UPDATED_BY, D.UPDATED_DT
		FROM REF_SERVICE_CATEGORY D WITH(NOLOCK)
		INNER JOIN REF_STATUS S WITH(NOLOCK) ON D.STATUS = S.ID
		WHERE D.ID = CASE WHEN @IN_ID = 0 THEN D.ID ELSE @IN_ID END
			AND D.STATUS = CASE WHEN @IN_STATUS = 0 THEN D.STATUS ELSE @IN_STATUS END
			AND D.BRANCH_ID = @IN_BRANCH_ID
	END TRY
	--
	BEGIN CATCH
	SET @SQL_NO = ERROR_NUMBER()    
	SET @SQL_MSG = ERROR_MESSAGE()    
	SET @SQL_OBJ = ERROR_PROCEDURE()
	--
	EXEC SP_SYS_ERR_LOG @IN_USER_ID, @IN_BRANCH_ID, @SQL_NO, @SQL_OBJ, @SQL_OBJ, @SQL_MSG, @SQL_STATUS OUTPUT, @SQL_NO OUTPUT, @SQL_MSG OUTPUT
	--
	SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG  AS SQL_MSG, @SQL_NO AS SQL_NO
	--
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SP_REF_SERVICE_CATEGORY_INSERT_UPDATE]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[SP_REF_SERVICE_CATEGORY_INSERT_UPDATE]
	@IN_USER_ID INT,
	@IN_BRANCH_ID INT,
	@IN_ID INT,
	@IN_CODE NVARCHAR(24),
	@IN_NAME NVARCHAR(256),
	@IN_SERVICE_CATEGORY_ID_CLONE INT,
	@IN_DESCRIPTION NVARCHAR(1024),
	@IN_STATUS INT
AS
SET NOCOUNT ON
BEGIN
	BEGIN TRY
		DECLARE @SQL_STATUS VARCHAR(28),  @SQL_NO VARCHAR(28), @SQL_MSG VARCHAR(1024), @SQL_OBJ VARCHAR(1024)
		SELECT @SQL_OBJ = 'SP_REF_SERVICE_CATEGORY_INSERT_UPDATE', @SQL_STATUS = 'SUCCESS'
		--
		--
		IF NOT EXISTS (SELECT 1 FROM REF_SERVICE_CATEGORY WITH(NOLOCK) WHERE ID = @IN_ID AND BRANCH_ID = @IN_BRANCH_ID)
			BEGIN
				INSERT INTO REF_SERVICE_CATEGORY (CODE, NAME, DESCRIPTION,
					STATUS, BRANCH_ID, CREATED_BY, CREATED_DT, UPDATED_BY, UPDATED_DT)
				VALUES ( @IN_CODE, @IN_NAME,  @IN_DESCRIPTION,
					@IN_STATUS, @IN_BRANCH_ID, @IN_USER_ID, GETDATE(), @IN_USER_ID, GETDATE())			
				--
				SET @SQL_NO = SCOPE_IDENTITY()
				--
				-- CLONE BASED PRICE SETUP
				INSERT INTO REF_SERVICE_CHARGE
					(TARIFF_ID, SERVICE_ID, SERVICE_CATEGORY_ID, 
					SERVICE_AMOUNT, DR_AMOUNT, H_AMOUNT, OTH_AMOUNT, 
					SERVICE_CHARGE, DR_CHARGE, H_CHARGE, OTH_CHARGE, 
					ORG_TAX, ORG_TAX_P, ORG_DISC, ORG_DISC_P, DESCRIPTION, 
					STATUS, BRANCH_ID, CREATED_BY, CREATED_DT, UPDATED_BY, UPDATED_DT)
				SELECT 
					TARIFF_ID, SERVICE_ID, @SQL_NO, 
					SERVICE_AMOUNT, DR_AMOUNT, H_AMOUNT, OTH_AMOUNT, 
					SERVICE_CHARGE, DR_CHARGE, H_CHARGE, OTH_CHARGE, 
					ORG_TAX, ORG_TAX_P, ORG_DISC, ORG_DISC_P, 								
					DESCRIPTION, @IN_STATUS, @IN_BRANCH_ID, @IN_USER_ID, GETDATE(), @IN_USER_ID, GETDATE()
				FROM REF_SERVICE_CHARGE 
				WHERE SERVICE_CATEGORY_ID = @IN_SERVICE_CATEGORY_ID_CLONE
				AND BRANCH_ID = @IN_BRANCH_ID

				SET @SQL_MSG = 'INSERTED RECORD SUCCESSFULLY'
			END
		ELSE
			BEGIN
				UPDATE REF_SERVICE_CATEGORY SET
					CODE = @IN_CODE,
					NAME = @IN_NAME,
					DESCRIPTION = @IN_DESCRIPTION,
					STATUS = @IN_STATUS,
					UPDATED_BY = @IN_USER_ID,
					UPDATED_DT = GETDATE()
				WHERE ID = @IN_ID AND BRANCH_ID = @IN_BRANCH_ID
				--
				SET @SQL_NO = @IN_ID
				--
				SET @SQL_MSG = 'UPDATED RECORD SUCCESSFULLY'
			END
		--
		SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG AS SQL_MSG, @SQL_NO AS SQL_NO	

	END TRY

	BEGIN CATCH
		SET @SQL_NO = ERROR_NUMBER()    
		SET @SQL_MSG = ERROR_MESSAGE()    
		SET @SQL_OBJ = ERROR_PROCEDURE()
		--
		EXEC SP_SYS_ERR_LOG @IN_USER_ID, @IN_BRANCH_ID, @SQL_NO, @SQL_OBJ, @SQL_OBJ, @SQL_MSG, @SQL_STATUS OUTPUT, @SQL_NO OUTPUT, @SQL_MSG OUTPUT
		SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG  AS SQL_MSG, @SQL_NO AS SQL_NO
		--
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SP_REF_SERVICE_CHARGE_GET]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[SP_REF_SERVICE_CHARGE_GET]
	@IN_USER_ID INT,
	@IN_BRANCH_ID INT, 
	@IN_SERVICE_ID INT  = 0,
	@IN_TARIFF_ID INT  = 0,
	@IN_SERVICE_CATEGORY_ID INT = 0,
	@IN_ID INT  = 0,
	@IN_STATUS INT = 0
AS
SET NOCOUNT ON
BEGIN
	BEGIN TRY
		DECLARE @SQL_STATUS VARCHAR(28),  @SQL_NO VARCHAR(28), @SQL_MSG VARCHAR(1024), @SQL_OBJ VARCHAR(1024)
		--
		SELECT
			M.ID, M.TARIFF_ID, T.NAME AS TARIFF, M.SERVICE_ID, SS.NAME AS SERVICE, M.SERVICE_CATEGORY_ID, SC.NAME AS SERVICE_CATEGORY,
			M.SERVICE_AMOUNT, M.DR_AMOUNT, M.H_AMOUNT, M.OTH_AMOUNT,
			M.SERVICE_CHARGE, M.DR_CHARGE, M.H_CHARGE, M.OTH_CHARGE, 
			M.ORG_TAX, M.ORG_TAX_P, M.ORG_DISC, M.ORG_DISC_P,
			SS.DR_ID,M.DESCRIPTION, S.ID AS STATUS_ID, S.NAME AS STATUS, 
			M.BRANCH_ID, M.CREATED_BY, M.CREATED_DT, M.UPDATED_BY, M.UPDATED_DT
		FROM REF_SERVICE_CHARGE M WITH(NOLOCK)		
		INNER JOIN REF_SERVICE SS WITH(NOLOCK) ON M.SERVICE_ID = SS.ID
		INNER JOIN REF_TARIFF T WITH(NOLOCK) ON M.TARIFF_ID = T.ID
		INNER JOIN REF_SERVICE_CATEGORY SC WITH(NOLOCK) ON M.SERVICE_CATEGORY_ID = SC.ID
		LEFT OUTER JOIN REF_STATUS S WITH(NOLOCK) ON M.STATUS = S.ID
		WHERE M.ID = CASE WHEN @IN_ID = 0 THEN M.ID ELSE @IN_ID END			
			AND M.TARIFF_ID = CASE WHEN @IN_TARIFF_ID = 0 THEN M.TARIFF_ID ELSE @IN_TARIFF_ID END
			AND M.SERVICE_ID = CASE WHEN @IN_SERVICE_ID = 0 THEN M.SERVICE_ID ELSE @IN_SERVICE_ID END
			AND M.SERVICE_CATEGORY_ID = CASE WHEN @IN_SERVICE_CATEGORY_ID = 0 THEN M.SERVICE_CATEGORY_ID ELSE @IN_SERVICE_CATEGORY_ID END
			AND M.STATUS = CASE WHEN @IN_STATUS = 0 THEN M.STATUS ELSE @IN_STATUS END
			AND M.BRANCH_ID = @IN_BRANCH_ID
	END TRY
	--
	BEGIN CATCH
	SET @SQL_NO = ERROR_NUMBER()    
	SET @SQL_MSG = ERROR_MESSAGE()    
	SET @SQL_OBJ = ERROR_PROCEDURE()
	--
	EXEC SP_SYS_ERR_LOG @IN_USER_ID, @IN_BRANCH_ID, @SQL_NO, @SQL_OBJ, @SQL_OBJ, @SQL_MSG, @SQL_STATUS OUTPUT, @SQL_NO OUTPUT, @SQL_MSG OUTPUT
	--
	SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG  AS SQL_MSG, @SQL_NO AS SQL_NO
	--
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SP_REF_SERVICE_CHARGE_INSERT_UPDATE]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[SP_REF_SERVICE_CHARGE_INSERT_UPDATE]
	@IN_USER_ID INT,
	@IN_BRANCH_ID INT,
	@IN_ID INT,
	@IN_TARIFF_ID INT,
	@IN_SERVICE_ID INT,
	@IN_SERVICE_CATEGORY_ID INT, 
	@IN_DR_CHARGE NVARCHAR(56),
	@IN_H_CHARGE NVARCHAR(56),
	@IN_OTH_CHARGE NVARCHAR(56),
	@IN_SERVICE_TAX NVARCHAR(56),
	@IN_SERVICE_DISC NVARCHAR(56),
	@IN_FOR_ALL_TARIFF BIT,
	@IN_FOR_ALL_SERVICE_CATEGORY BIT,
	@IN_DESCRIPTION NVARCHAR(1024),
	@IN_STATUS INT
AS
SET NOCOUNT ON
BEGIN
	BEGIN TRY
		DECLARE @SQL_STATUS VARCHAR(28),  @SQL_NO VARCHAR(28), @SQL_MSG VARCHAR(1024), @SQL_OBJ VARCHAR(1024)
		SELECT @SQL_OBJ = 'SP_REF_SERVICE_CHARGE_INSERT_UPDATE', @SQL_STATUS = 'SUCCESS'
		--
		DECLARE @SERVICE_AMOUNT DECIMAL(18, 2) = 0
		DECLARE @DR_AMOUNT DECIMAL(18, 2) = 0
		DECLARE @H_AMOUNT DECIMAL(18, 2) = 0
		DECLARE @OTH_AMOUNT DECIMAL(18, 2) = 0

		DECLARE @SERVICE_CHARGE DECIMAL(18, 2) = 0

		DECLARE @ORG_TAX DECIMAL(18, 2) = 0
		DECLARE @ORG_DISC DECIMAL(18, 2) = 0
		DECLARE @ORG_TAX_P DECIMAL(18, 2) = 0
		DECLARE @ORG_DISC_P DECIMAL(18, 2) = 0

		SELECT @IN_DR_CHARGE = CASE ISNUMERIC(@IN_DR_CHARGE) WHEN 1 THEN @IN_DR_CHARGE ELSE '0.00' END
		SELECT @IN_H_CHARGE= CASE ISNUMERIC(@IN_H_CHARGE) WHEN 1 THEN @IN_H_CHARGE ELSE '0.00' END
		SELECT @IN_OTH_CHARGE = CASE ISNUMERIC(@IN_OTH_CHARGE) WHEN 1 THEN @IN_OTH_CHARGE ELSE '0.00' END		
		SELECT @IN_SERVICE_TAX = CASE ISNUMERIC(@IN_SERVICE_TAX) WHEN 1 THEN @IN_SERVICE_TAX ELSE '0.00' END
		SELECT @IN_SERVICE_DISC = CASE ISNUMERIC(@IN_SERVICE_DISC) WHEN 1 THEN @IN_SERVICE_DISC ELSE '0.00' END

		SET @SERVICE_CHARGE = SUM(CONVERT(DECIMAL(18,2),@IN_DR_CHARGE) + CONVERT(DECIMAL(18,2),@IN_H_CHARGE) + 
								CONVERT(DECIMAL(18,2),@IN_OTH_CHARGE))
		-- CALCULATE TAX AND DISC IF TAX AND DISC IN %
		SET @ORG_TAX_P = @IN_SERVICE_TAX
		SET @ORG_DISC_P = @IN_SERVICE_DISC
		--
		SET @ORG_TAX = ROUND(CONVERT(DECIMAL(18,2),((@ORG_TAX_P/100) *  @SERVICE_CHARGE),2),0)
		SET @ORG_DISC = ROUND(CONVERT(DECIMAL(18,2),((@ORG_DISC_P/100) * @SERVICE_CHARGE),2),0)

		-- IF TAX AND DISC IN AMOUNT (CALCULATION REQ IN FUTURE)

		--

		-- THIS IS BILLABLE AMOUNT
		SET @SERVICE_AMOUNT = @SERVICE_CHARGE + 
						ROUND(CONVERT(DECIMAL(18,2),((@ORG_TAX_P/100)*@SERVICE_CHARGE),2),0) - 
						ROUND(CONVERT(DECIMAL(18,2),((@ORG_DISC_P/100)*@SERVICE_CHARGE),2),0)

		SET @DR_AMOUNT = @IN_DR_CHARGE + 
						ROUND(CONVERT(DECIMAL(18,2),((@ORG_TAX_P/100)*@IN_DR_CHARGE),2),0) - 
						ROUND(CONVERT(DECIMAL(18,2),((@ORG_DISC_P/100)*@IN_DR_CHARGE),2),0)

		SET @H_AMOUNT = @IN_H_CHARGE + 
						ROUND(CONVERT(DECIMAL(18,2),((@ORG_TAX_P/100)*@IN_H_CHARGE),2),0) - 
						ROUND(CONVERT(DECIMAL(18,2),((@ORG_DISC_P/100)*@IN_H_CHARGE),2),0)

		SET @OTH_AMOUNT = @IN_OTH_CHARGE + 
						ROUND(CONVERT(DECIMAL(18,2),((@ORG_TAX_P/100)*@IN_OTH_CHARGE),2),0) - 
						ROUND(CONVERT(DECIMAL(18,2),((@ORG_DISC_P/100)*@IN_OTH_CHARGE),2),0)
		--

		IF EXISTS (SELECT 1 FROM REF_SERVICE_CHARGE WHERE ID = @IN_ID AND BRANCH_ID = @IN_BRANCH_ID)
		BEGIN
			UPDATE REF_SERVICE_CHARGE SET
				SERVICE_AMOUNT = @SERVICE_AMOUNT, 
				DR_AMOUNT = @DR_AMOUNT, H_AMOUNT = @H_AMOUNT, OTH_AMOUNT = @OTH_AMOUNT,
				SERVICE_CHARGE = @SERVICE_CHARGE, 
				DR_CHARGE = @IN_DR_CHARGE, H_CHARGE = @IN_H_CHARGE, OTH_CHARGE = @IN_OTH_CHARGE, 
				ORG_TAX = @ORG_TAX, ORG_TAX_P = @ORG_TAX_P, 
				ORG_DISC =@ORG_DISC, ORG_DISC_P =@ORG_DISC_P, 
				DESCRIPTION = @IN_DESCRIPTION, STATUS = @IN_STATUS, UPDATED_BY = @IN_USER_ID, UPDATED_DT = GETDATE()
			WHERE SERVICE_ID = @IN_SERVICE_ID AND BRANCH_ID = @IN_BRANCH_ID 
				AND ID = CASE WHEN @IN_FOR_ALL_TARIFF = 0 AND  @IN_FOR_ALL_SERVICE_CATEGORY = 0 THEN @IN_ID ELSE ID END
				AND SERVICE_CATEGORY_ID = CASE WHEN @IN_FOR_ALL_SERVICE_CATEGORY = 0 THEN @IN_SERVICE_CATEGORY_ID ELSE SERVICE_CATEGORY_ID END
				AND TARIFF_ID = CASE WHEN @IN_FOR_ALL_TARIFF = 0 THEN @IN_TARIFF_ID ELSE TARIFF_ID END
			
			SET @SQL_MSG = 'UPDATED RECORD SUCCESSFULLY'
		END
		/*
		ELSE
		BEGIN
			INSERT INTO REF_SERVICE_CHARGE (TARIFF_ID, SERVICE_ID, SERVICE_CATEGORY_ID, 
					SERVICE_AMOUNT, SERVICE_CHARGE, DR_CHARGE, H_CHARGE, OTH_CHARGE, 
					SERVICE_TAX, SERVICE_TAX_P, SERVICE_DISC, SERVICE_DISC_P, 
					DESCRIPTION,STATUS, BRANCH_ID, CREATED_BY, CREATED_DT, UPDATED_BY, UPDATED_DT)
			VALUES (@IN_TARIFF_ID, @IN_SERVICE_ID, @IN_SERVICE_CATEGORY_ID, 
					@SERVICE_AMOUNT, @SERVICE_CHARGE,@IN_DR_CHARGE, @IN_H_CHARGE, @IN_OTH_CHARGE, 
					@SERVICE_TAX, @SERVICE_TAX_P, @SERVICE_DISC, @SERVICE_DISC_P,
					@IN_DESCRIPTION, @IN_STATUS, @IN_BRANCH_ID, @IN_USER_ID, GETDATE(), @IN_USER_ID, GETDATE())

			INSERT INTO @TBL_STATUS VALUES ('SUCCESS', 'INSERTED SERVICE CHARGE SUCCESSFULLY',	@IN_SERVICE_ID)
		END
		*/
		--		
		SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG AS SQL_MSG, @SQL_NO AS SQL_NO
	END TRY

	BEGIN CATCH
		SET @SQL_NO = ERROR_NUMBER()    
		SET @SQL_MSG = ERROR_MESSAGE()    
		SET @SQL_OBJ = ERROR_PROCEDURE()
		--
		EXEC SP_SYS_ERR_LOG @IN_USER_ID, @IN_BRANCH_ID, @SQL_NO, @SQL_OBJ, @SQL_OBJ, @SQL_MSG, @SQL_STATUS OUTPUT, @SQL_NO OUTPUT, @SQL_MSG OUTPUT
		SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG  AS SQL_MSG, @SQL_NO AS SQL_NO
		--
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SP_REF_SERVICE_GET]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[SP_REF_SERVICE_GET]
	@IN_USER_ID INT,
	@IN_BRANCH_ID INT,
	@IN_ID INT  = 0,
	@IN_STATUS INT = 0 
AS
SET NOCOUNT ON
BEGIN
	BEGIN TRY
		DECLARE @SQL_STATUS VARCHAR(28),  @SQL_NO VARCHAR(28), @SQL_MSG VARCHAR(1024), @SQL_OBJ VARCHAR(1024)
		--
		SELECT
			M.ID, M.DEPARTMENT_ID, D.NAME AS DEPARTMENT, M.SUB_DEPARTMENT_ID, SD.NAME AS SUB_DEPARTMENT, 
			M.CODE, M.NAME, 
			M.SERVICE_GROUP_ID, SG.NAME AS SERVICE_GROUP, M.BILLING_MESSAGE, 
			M.SHOW_MESSAGE, M.DR_REQUIRED, M.DR_ID, M.DESCRIPTION, M.STATUS AS STATUS_ID, S.NAME AS STATUS,
			M.BRANCH_ID, M.CREATED_BY, M.CREATED_DT, M.UPDATED_BY, M.UPDATED_DT
		FROM REF_SERVICE M WITH(NOLOCK) 
		LEFT OUTER JOIN REF_DEPARTMENT D WITH(NOLOCK) ON M.DEPARTMENT_ID = D.ID
		LEFT OUTER JOIN REF_SUB_DEPARTMENT SD WITH(NOLOCK) ON M.SUB_DEPARTMENT_ID = SD.ID
		LEFT OUTER JOIN REF_SERVICE_GROUP SG WITH(NOLOCK) ON M.SERVICE_GROUP_ID = SG.ID
		LEFT OUTER JOIN REF_STATUS S WITH(NOLOCK) ON M.STATUS = S.ID
		WHERE M.ID = CASE WHEN @IN_ID = 0 THEN M.ID ELSE @IN_ID END
			AND M.STATUS = CASE WHEN @IN_STATUS = 0 THEN M.STATUS ELSE @IN_STATUS END
			AND M.BRANCH_ID = @IN_BRANCH_ID
	END TRY
	--
	BEGIN CATCH
	SET @SQL_NO = ERROR_NUMBER()    
	SET @SQL_MSG = ERROR_MESSAGE()    
	SET @SQL_OBJ = ERROR_PROCEDURE()
	--
	EXEC SP_SYS_ERR_LOG @IN_USER_ID, @IN_BRANCH_ID, @SQL_NO, @SQL_OBJ, @SQL_OBJ, @SQL_MSG, @SQL_STATUS OUTPUT, @SQL_NO OUTPUT, @SQL_MSG OUTPUT
	--
	SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG  AS SQL_MSG, @SQL_NO AS SQL_NO
	--
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SP_REF_SERVICE_GROUP_GET]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[SP_REF_SERVICE_GROUP_GET]
	@IN_USER_ID INT,
	@IN_BRANCH_ID INT,
	@IN_ID INT  = 0,
	@IN_STATUS INT = 0 
AS
SET NOCOUNT ON
BEGIN
	BEGIN TRY
		DECLARE @SQL_STATUS VARCHAR(28),  @SQL_NO VARCHAR(28), @SQL_MSG VARCHAR(1024), @SQL_OBJ VARCHAR(1024)
		--
		SELECT
			D.ID, D.NAME, D.CODE, D.DESCRIPTION,
			S.ID AS STATUS_ID, S.NAME AS STATUS, D.BRANCH_ID, D.CREATED_BY, D.CREATED_DT, D.UPDATED_BY, D.UPDATED_DT
		FROM REF_SERVICE_GROUP D WITH(NOLOCK) 
		INNER JOIN REF_STATUS S WITH(NOLOCK) ON D.STATUS = S.ID
		WHERE D.ID = CASE WHEN @IN_ID = 0 THEN D.ID ELSE @IN_ID END
			AND D.STATUS = CASE WHEN @IN_STATUS = 0 THEN D.STATUS ELSE @IN_STATUS END
			AND D.BRANCH_ID = @IN_BRANCH_ID
	END TRY
	--
	BEGIN CATCH
	SET @SQL_NO = ERROR_NUMBER()    
	SET @SQL_MSG = ERROR_MESSAGE()    
	SET @SQL_OBJ = ERROR_PROCEDURE()
	--
	EXEC SP_SYS_ERR_LOG @IN_USER_ID, @IN_BRANCH_ID, @SQL_NO, @SQL_OBJ, @SQL_OBJ, @SQL_MSG, @SQL_STATUS OUTPUT, @SQL_NO OUTPUT, @SQL_MSG OUTPUT
	--
	SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG  AS SQL_MSG, @SQL_NO AS SQL_NO
	--
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SP_REF_SERVICE_GROUP_INSERT_UPDATE]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[SP_REF_SERVICE_GROUP_INSERT_UPDATE]
	@IN_USER_ID INT,
	@IN_BRANCH_ID INT,
	@IN_ID INT,
	@IN_CODE NVARCHAR(24),
	@IN_NAME NVARCHAR(256),
	@IN_DESCRIPTION NVARCHAR(1024),
	@IN_STATUS INT
AS
SET NOCOUNT ON
BEGIN
	BEGIN TRY
		DECLARE @SQL_STATUS VARCHAR(28),  @SQL_NO VARCHAR(28), @SQL_MSG VARCHAR(1024), @SQL_OBJ VARCHAR(1024)
		SELECT @SQL_OBJ = 'SP_REF_SERVICE_GROUP_INSERT_UPDATE', @SQL_STATUS = 'SUCCESS'
		--

		IF NOT EXISTS (SELECT 1 FROM REF_SERVICE_GROUP WITH(NOLOCK) WHERE ID = @IN_ID AND BRANCH_ID = @IN_BRANCH_ID)
			BEGIN
				INSERT INTO REF_SERVICE_GROUP (CODE, NAME, DESCRIPTION,
					STATUS, BRANCH_ID, CREATED_BY, CREATED_DT, UPDATED_BY, UPDATED_DT)
				VALUES ( @IN_CODE, @IN_NAME,  @IN_DESCRIPTION,
					@IN_STATUS, @IN_BRANCH_ID, @IN_USER_ID, GETDATE(), @IN_USER_ID, GETDATE())		
				--
				SET @SQL_NO = SCOPE_IDENTITY()
				--
				SET @SQL_MSG = 'INSERTED RECORD SUCCESSFULLY'
			END
		ELSE
			BEGIN
				UPDATE REF_SERVICE_GROUP SET
					CODE = @IN_CODE,
					NAME = @IN_NAME,
					DESCRIPTION = @IN_DESCRIPTION,
					STATUS = @IN_STATUS,
					UPDATED_BY = @IN_USER_ID,
					UPDATED_DT = GETDATE()
				WHERE ID = @IN_ID AND BRANCH_ID = @IN_BRANCH_ID
				--
				SET @SQL_NO = @IN_ID
				--
				SET @SQL_MSG = 'UPDATED RECORD SUCCESSFULLY'
			END
		--
		SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG AS SQL_MSG, @SQL_NO AS SQL_NO


	END TRY

	BEGIN CATCH
		SET @SQL_NO = ERROR_NUMBER()    
		SET @SQL_MSG = ERROR_MESSAGE()    
		SET @SQL_OBJ = ERROR_PROCEDURE()
		--
		EXEC SP_SYS_ERR_LOG @IN_USER_ID, @IN_BRANCH_ID, @SQL_NO, @SQL_OBJ, @SQL_OBJ, @SQL_MSG, @SQL_STATUS OUTPUT, @SQL_NO OUTPUT, @SQL_MSG OUTPUT
		SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG  AS SQL_MSG, @SQL_NO AS SQL_NO
		--
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SP_REF_SERVICE_INSERT_UPDATE]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[SP_REF_SERVICE_INSERT_UPDATE]
	@IN_USER_ID INT,
	@IN_BRANCH_ID INT,
	@IN_ID INT,
	@IN_DEPARTMENT_ID INT,
	@IN_SUB_DEPARTMENT_ID INT,
	@IN_CODE NVARCHAR(24),
	@IN_NAME NVARCHAR(256),
	@IN_SERVICE_GROUP_ID INT,
	@IN_BILLING_MESSAGE NVARCHAR(1024),
	@IN_DR_CHARGE NVARCHAR(56),
	@IN_H_CHARGE NVARCHAR(56),
	@IN_OTH_CHARGE NVARCHAR(56),
	@IN_SERVICE_TAX NVARCHAR(56),
	@IN_SERVICE_DISC NVARCHAR(56),
	@IN_SHOW_MESSAGE BIT,
	@IN_DR_REQUIRED BIT,
	@IN_DR_ID INT,
	@IN_DESCRIPTION NVARCHAR(1024),
	@IN_STATUS INT
AS
SET NOCOUNT ON
BEGIN
	BEGIN TRY
		DECLARE @SQL_STATUS VARCHAR(28),  @SQL_NO VARCHAR(28), @SQL_MSG VARCHAR(1024), @SQL_OBJ VARCHAR(1024)
		SELECT @SQL_OBJ = 'SP_REF_SERVICE_INSERT_UPDATE', @SQL_STATUS = 'SUCCESS'
		--
		DECLARE @SERVICE_AMOUNT DECIMAL(18, 2) = 0
		DECLARE @DR_AMOUNT DECIMAL(18, 2) = 0
		DECLARE @H_AMOUNT DECIMAL(18, 2) = 0
		DECLARE @OTH_AMOUNT DECIMAL(18, 2) = 0

		DECLARE @SERVICE_CHARGE DECIMAL(18, 2) = 0

		DECLARE @ORG_TAX DECIMAL(18, 2) = 0
		DECLARE @ORG_DISC DECIMAL(18, 2) = 0
		DECLARE @ORG_TAX_P DECIMAL(18, 2) = 0
		DECLARE @ORG_DISC_P DECIMAL(18, 2) = 0
		--

		IF NOT EXISTS (SELECT 1 FROM REF_SERVICE WITH(NOLOCK) WHERE ID = @IN_ID AND BRANCH_ID = @IN_BRANCH_ID)
			BEGIN
				INSERT INTO REF_SERVICE (DEPARTMENT_ID, SUB_DEPARTMENT_ID, CODE, NAME, SERVICE_GROUP_ID, 
					BILLING_MESSAGE, SHOW_MESSAGE, DR_REQUIRED, DR_ID, 
					DESCRIPTION,STATUS, BRANCH_ID, CREATED_BY, CREATED_DT, UPDATED_BY, UPDATED_DT)
				VALUES (@IN_DEPARTMENT_ID, @IN_SUB_DEPARTMENT_ID, @IN_CODE, @IN_NAME, @IN_SERVICE_GROUP_ID, 
					@IN_BILLING_MESSAGE, @IN_SHOW_MESSAGE, @IN_DR_REQUIRED, @IN_DR_ID, 
					@IN_DESCRIPTION, @IN_STATUS, @IN_BRANCH_ID, @IN_USER_ID, GETDATE(), @IN_USER_ID, GETDATE())			
				--
				SET @SQL_NO = SCOPE_IDENTITY()
				--
				-- CLONE BASED PRICE SETUP
				SELECT @IN_DR_CHARGE = CASE ISNUMERIC(@IN_DR_CHARGE) WHEN 1 THEN @IN_DR_CHARGE ELSE '0.00' END
				SELECT @IN_H_CHARGE= CASE ISNUMERIC(@IN_H_CHARGE) WHEN 1 THEN @IN_H_CHARGE ELSE '0.00' END
				SELECT @IN_OTH_CHARGE = CASE ISNUMERIC(@IN_OTH_CHARGE) WHEN 1 THEN @IN_OTH_CHARGE ELSE '0.00' END		
				SELECT @IN_SERVICE_TAX = CASE ISNUMERIC(@IN_SERVICE_TAX) WHEN 1 THEN @IN_SERVICE_TAX ELSE '0.00' END
				SELECT @IN_SERVICE_DISC = CASE ISNUMERIC(@IN_SERVICE_DISC) WHEN 1 THEN @IN_SERVICE_DISC ELSE '0.00' END

				SET @SERVICE_CHARGE = SUM(CONVERT(DECIMAL(18,2),@IN_DR_CHARGE) + CONVERT(DECIMAL(18,2),@IN_H_CHARGE) + 
										CONVERT(DECIMAL(18,2),@IN_OTH_CHARGE))

				-- CALCULATE TAX AND DISC IF TAX AND DISC IN %
				SET @ORG_TAX_P = @IN_SERVICE_TAX
				SET @ORG_DISC_P = @IN_SERVICE_DISC
				--
				SET @ORG_TAX = ROUND(CONVERT(DECIMAL(18,2),((@ORG_TAX_P/100) *  @SERVICE_CHARGE),2),0)
				SET @ORG_DISC = ROUND(CONVERT(DECIMAL(18,2),((@ORG_DISC_P/100) * @SERVICE_CHARGE),2),0)

				-- IF TAX AND DISC IN AMOUNT (CALCULATION REQ IN FUTURE)
	
			
				-- THIS IS BILLABLE AMOUNT
				SET @SERVICE_AMOUNT = @SERVICE_CHARGE + 
								ROUND(CONVERT(DECIMAL(18,2),((@ORG_TAX_P/100)*@SERVICE_CHARGE),2),0) - 
								ROUND(CONVERT(DECIMAL(18,2),((@ORG_DISC_P/100)*@SERVICE_CHARGE),2),0)

				SET @DR_AMOUNT = @IN_DR_CHARGE + 
								ROUND(CONVERT(DECIMAL(18,2),((@ORG_TAX_P/100)*@IN_DR_CHARGE),2),0) - 
								ROUND(CONVERT(DECIMAL(18,2),((@ORG_DISC_P/100)*@IN_DR_CHARGE),2),0)

				SET @H_AMOUNT = @IN_H_CHARGE + 
								ROUND(CONVERT(DECIMAL(18,2),((@ORG_TAX_P/100)*@IN_H_CHARGE),2),0) - 
								ROUND(CONVERT(DECIMAL(18,2),((@ORG_DISC_P/100)*@IN_H_CHARGE),2),0)

				SET @OTH_AMOUNT = @IN_OTH_CHARGE + 
								ROUND(CONVERT(DECIMAL(18,2),((@ORG_TAX_P/100)*@IN_OTH_CHARGE),2),0) - 
								ROUND(CONVERT(DECIMAL(18,2),((@ORG_DISC_P/100)*@IN_OTH_CHARGE),2),0)

				--
				INSERT INTO REF_SERVICE_CHARGE
					(TARIFF_ID, SERVICE_ID, SERVICE_CATEGORY_ID, 
					SERVICE_AMOUNT, DR_AMOUNT, H_AMOUNT, OTH_AMOUNT,
					SERVICE_CHARGE, DR_CHARGE, H_CHARGE, OTH_CHARGE, 
					ORG_TAX, ORG_TAX_P, ORG_DISC, ORG_DISC_P, 			
					DESCRIPTION,STATUS, BRANCH_ID, CREATED_BY, CREATED_DT, UPDATED_BY, UPDATED_DT)
				SELECT 
					T.ID AS TARIFF_ID, 
					@SQL_NO, C.ID AS CATEGORY_ID, 
					@SERVICE_AMOUNT, @DR_AMOUNT, @H_AMOUNT, @OTH_AMOUNT,
					@SERVICE_CHARGE,@IN_DR_CHARGE, @IN_H_CHARGE, @IN_OTH_CHARGE, 
					@ORG_TAX, @ORG_TAX_P, @ORG_DISC, @ORG_DISC_P,
					@IN_DESCRIPTION, @IN_STATUS, @IN_BRANCH_ID, @IN_USER_ID, GETDATE(), @IN_USER_ID, GETDATE()
				FROM REF_TARIFF T
				CROSS JOIN REF_SERVICE_CATEGORY C
				--
				SET @SQL_MSG = 'INSERTED RECORD SUCCESSFULLY'
			END
		ELSE
			BEGIN
				UPDATE REF_SERVICE SET
					DEPARTMENT_ID = @IN_DEPARTMENT_ID,
					SUB_DEPARTMENT_ID = @IN_SUB_DEPARTMENT_ID,
					CODE = @IN_CODE,
					NAME = @IN_NAME,		
					SERVICE_GROUP_ID = @IN_SERVICE_GROUP_ID,
					BILLING_MESSAGE = @IN_BILLING_MESSAGE,
					SHOW_MESSAGE = @IN_SHOW_MESSAGE,
					DR_REQUIRED = @IN_DR_REQUIRED,
					DR_ID = @IN_DR_ID,
					DESCRIPTION = @IN_DESCRIPTION,
					STATUS = @IN_STATUS,
					UPDATED_BY = @IN_USER_ID,
					UPDATED_DT = GETDATE()
				WHERE ID = @IN_ID AND BRANCH_ID = @IN_BRANCH_ID
				--
				SET @SQL_NO = @IN_ID
				--
				SET @SQL_MSG = 'UPDATED RECORD SUCCESSFULLY'
			END
		--
		SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG AS SQL_MSG, @SQL_NO AS SQL_NO
		--
	END TRY

	BEGIN CATCH
		SET @SQL_NO = ERROR_NUMBER()    
		SET @SQL_MSG = ERROR_MESSAGE()    
		SET @SQL_OBJ = ERROR_PROCEDURE()
		--
		EXEC SP_SYS_ERR_LOG @IN_USER_ID, @IN_BRANCH_ID, @SQL_NO, @SQL_OBJ, @SQL_OBJ, @SQL_MSG, @SQL_STATUS OUTPUT, @SQL_NO OUTPUT, @SQL_MSG OUTPUT
		SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG  AS SQL_MSG, @SQL_NO AS SQL_NO
		--
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SP_REF_SERVICE_LIST_CHARGE_FOR_BILL_GET]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[SP_REF_SERVICE_LIST_CHARGE_FOR_BILL_GET]
	@IN_USER_ID INT,
	@IN_BRANCH_ID INT, 
	@IN_SERVICE_ID INT  = 0,
	@IN_PAYER_ID INT  = 0,
	@IN_SERVICE_CATEGORY_ID INT = 0,
	@IN_ID INT  = 0,
	@IN_STATUS INT = 0
AS
SET NOCOUNT ON
BEGIN
	BEGIN TRY
		DECLARE @TARIFF_ID INT, @SQL_STATUS VARCHAR(28),  @SQL_NO VARCHAR(28), @SQL_MSG VARCHAR(1024), @SQL_OBJ VARCHAR(1024)
		--
		SELECT @TARIFF_ID = TARIFF_ID FROM REF_COMPANY WHERE ID = @IN_PAYER_ID
		--
		SELECT
			M.ID, M.TARIFF_ID, T.NAME AS TARIFF, M.SERVICE_ID, SS.NAME AS SERVICE, M.SERVICE_CATEGORY_ID, SC.NAME AS SERVICE_CATEGORY,
			M.SERVICE_AMOUNT, M.DR_AMOUNT, M.H_AMOUNT, M.OTH_AMOUNT,
			M.SERVICE_CHARGE, M.DR_CHARGE, M.H_CHARGE, M.OTH_CHARGE, 
			M.ORG_TAX, M.ORG_TAX_P, M.ORG_DISC, M.ORG_DISC_P,  
			SS.DR_ID,'' AS DR_NAME,
			M.DESCRIPTION, S.ID AS STATUS_ID, S.NAME AS STATUS, 
			M.BRANCH_ID, M.CREATED_BY, M.CREATED_DT, M.UPDATED_BY, M.UPDATED_DT
		FROM REF_SERVICE_CHARGE M WITH(NOLOCK) 		
		INNER JOIN REF_SERVICE SS WITH(NOLOCK) ON M.SERVICE_ID = SS.ID
		INNER JOIN REF_TARIFF T WITH(NOLOCK) ON M.TARIFF_ID = T.ID
		INNER JOIN REF_SERVICE_CATEGORY SC WITH(NOLOCK) ON M.SERVICE_CATEGORY_ID = SC.ID
		LEFT OUTER JOIN REF_STATUS S WITH(NOLOCK) ON M.STATUS = S.ID
		WHERE M.ID = CASE WHEN @IN_ID = 0 THEN M.ID ELSE @IN_ID END			
			AND M.TARIFF_ID = CASE WHEN @TARIFF_ID = 0 THEN M.TARIFF_ID ELSE @TARIFF_ID END
			AND M.SERVICE_ID = CASE WHEN @IN_SERVICE_ID = 0 THEN M.SERVICE_ID ELSE @IN_SERVICE_ID END
			AND M.SERVICE_CATEGORY_ID = CASE WHEN @IN_SERVICE_CATEGORY_ID = 0 THEN M.SERVICE_CATEGORY_ID ELSE @IN_SERVICE_CATEGORY_ID END
			AND M.STATUS = CASE WHEN @IN_STATUS = 0 THEN M.STATUS ELSE @IN_STATUS END
			AND M.BRANCH_ID = @IN_BRANCH_ID
	END TRY
	--
	BEGIN CATCH
	SET @SQL_NO = ERROR_NUMBER()    
	SET @SQL_MSG = ERROR_MESSAGE()    
	SET @SQL_OBJ = ERROR_PROCEDURE()
	--
	EXEC SP_SYS_ERR_LOG @IN_USER_ID, @IN_BRANCH_ID, @SQL_NO, @SQL_OBJ, @SQL_OBJ, @SQL_MSG, @SQL_STATUS OUTPUT, @SQL_NO OUTPUT, @SQL_MSG OUTPUT
	--
	SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG  AS SQL_MSG, @SQL_NO AS SQL_NO
	--
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SP_REF_SERVICE_LIST_FOR_BILL_GET]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_REF_SERVICE_LIST_FOR_BILL_GET]
	@IN_USER_ID INT,
	@IN_BRANCH_ID INT,
	@IN_PAYER_ID INT, 
	@IN_SERVICE_CATEGORY_ID INT,
	@IN_SERVICE_ID INT
AS
SET NOCOUNT ON
BEGIN
	BEGIN TRY
		DECLARE @TARIFF_ID INT, @SQL_STATUS VARCHAR(28),  @SQL_NO VARCHAR(28), @SQL_MSG VARCHAR(1024), @SQL_OBJ VARCHAR(1024)
		--
		SELECT @TARIFF_ID = TARIFF_ID FROM REF_COMPANY WHERE ID = @IN_PAYER_ID
		--
		SELECT
			M.ID, M.TARIFF_ID, T.NAME AS TARIFF, M.SERVICE_ID, SS.NAME, M.SERVICE_CATEGORY_ID, SC.NAME AS SERVICE_CATEGORY,
			M.SERVICE_AMOUNT, M.DR_AMOUNT, M.H_AMOUNT, M.OTH_AMOUNT,
			M.SERVICE_CHARGE, M.DR_CHARGE, M.H_CHARGE, M.OTH_CHARGE, 
			M.ORG_TAX, M.ORG_TAX_P, M.ORG_DISC, M.ORG_DISC_P, 
			SS.DR_ID, M.DESCRIPTION, S.ID AS STATUS_ID, S.NAME AS STATUS, 
			M.BRANCH_ID, M.CREATED_BY, M.CREATED_DT, M.UPDATED_BY, M.UPDATED_DT
		FROM REF_SERVICE_CHARGE M WITH(NOLOCK)		
		INNER JOIN REF_SERVICE SS WITH(NOLOCK) ON M.SERVICE_ID = SS.ID AND SS.STATUS = 1
		INNER JOIN REF_TARIFF T WITH(NOLOCK) ON M.TARIFF_ID = T.ID AND T.STATUS = 1
		INNER JOIN REF_SERVICE_CATEGORY SC WITH(NOLOCK) ON M.SERVICE_CATEGORY_ID = SC.ID AND SC.STATUS = 1
		LEFT OUTER JOIN REF_STATUS S WITH(NOLOCK) ON M.STATUS = S.ID
		WHERE M.SERVICE_ID = CASE WHEN @IN_SERVICE_ID = 0 THEN M.SERVICE_ID ELSE @IN_SERVICE_ID END			
			AND M.TARIFF_ID = @TARIFF_ID
			AND M.SERVICE_CATEGORY_ID = @IN_SERVICE_CATEGORY_ID
			AND M.STATUS = 1
			AND M.BRANCH_ID = @IN_BRANCH_ID
	END TRY
	--
	BEGIN CATCH
	SET @SQL_NO = ERROR_NUMBER()    
	SET @SQL_MSG = ERROR_MESSAGE()    
	SET @SQL_OBJ = ERROR_PROCEDURE()
	--
	EXEC SP_SYS_ERR_LOG @IN_USER_ID, @IN_BRANCH_ID, @SQL_NO, @SQL_OBJ, @SQL_OBJ, @SQL_MSG, @SQL_STATUS OUTPUT, @SQL_NO OUTPUT, @SQL_MSG OUTPUT
	--
	SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG  AS SQL_MSG, @SQL_NO AS SQL_NO
	--
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SP_REF_STATE_GET]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[SP_REF_STATE_GET]
	@IN_USER_ID INT,
	@IN_BRANCH_ID INT,
	@IN_ID INT  = 0,
	@IN_STATUS INT = 0 
AS
SET NOCOUNT ON
BEGIN
	BEGIN TRY
		DECLARE @SQL_STATUS VARCHAR(28),  @SQL_NO VARCHAR(28), @SQL_MSG VARCHAR(1024), @SQL_OBJ VARCHAR(1024)
		--
		SELECT
			M.ID, M.NAME, M.CODE, M.DESCRIPTION,
			S.ID AS STATUS_ID, S.NAME AS STATUS, M.BRANCH_ID, M.CREATED_BY, M.CREATED_DT, M.UPDATED_BY, M.UPDATED_DT
		FROM REF_STATE M WITH(NOLOCK)
		INNER JOIN REF_STATUS S WITH(NOLOCK) ON M.STATUS = S.ID
		WHERE M.ID = CASE WHEN @IN_ID = 0 THEN M.ID ELSE @IN_ID END
			AND M.STATUS = CASE WHEN @IN_STATUS = 0 THEN M.STATUS ELSE @IN_STATUS END
			AND M.BRANCH_ID = @IN_BRANCH_ID
	END TRY
	--
	BEGIN CATCH
	SET @SQL_NO = ERROR_NUMBER()    
	SET @SQL_MSG = ERROR_MESSAGE()    
	SET @SQL_OBJ = ERROR_PROCEDURE()
	--
	EXEC SP_SYS_ERR_LOG @IN_USER_ID, @IN_BRANCH_ID, @SQL_NO, @SQL_OBJ, @SQL_OBJ, @SQL_MSG, @SQL_STATUS OUTPUT, @SQL_NO OUTPUT, @SQL_MSG OUTPUT
	--
	SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG  AS SQL_MSG, @SQL_NO AS SQL_NO
	--
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SP_REF_STATUS_GET]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[SP_REF_STATUS_GET]
	@IN_USER_ID INT,
	@IN_BRANCH_ID INT
AS
SET NOCOUNT ON     
BEGIN    
	BEGIN TRY 
		DECLARE @SQL_STATUS VARCHAR(28),  @SQL_NO VARCHAR(28), @SQL_MSG VARCHAR(1024), @SQL_OBJ VARCHAR(1024)   
		SELECT @SQL_OBJ = 'SP_SYS_STATUS_GET'
		--
		SELECT ID, NAME FROM REF_STATUS	WITH(NOLOCK)
		--WHERE BRANCH_ID = @IN_BRANCH_ID
		--
		--SELECT 'SUCCESS' AS SQL_STATUS, 0 AS SQL_NO, 'Success' AS SQL_MSG 
	END TRY
    
	BEGIN CATCH 
	
		SET @SQL_NO = ERROR_NUMBER()    
		SET @SQL_MSG = ERROR_MESSAGE()    
		SET @SQL_OBJ = ERROR_PROCEDURE() 
		--
		EXEC SP_SYS_ERR_LOG @IN_USER_ID, @IN_BRANCH_ID, @SQL_NO, @SQL_OBJ, @SQL_OBJ, @SQL_MSG, @SQL_STATUS OUTPUT, @SQL_NO OUTPUT, @SQL_MSG OUTPUT
		SELECT @SQL_STATUS AS SQL_STATUS, @SQL_NO AS SQL_NO, @SQL_MSG  AS SQL_MSG 	
	END CATCH    
END
GO
/****** Object:  StoredProcedure [dbo].[SP_REF_SUB_DEPARTMENT_CATEGORY_GET]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[SP_REF_SUB_DEPARTMENT_CATEGORY_GET]
	@IN_USER_ID INT,
	@IN_BRANCH_ID INT,
	@IN_ID INT  = 0,
	@IN_STATUS INT = 0 
AS
BEGIN
	BEGIN TRY
		DECLARE @SQL_STATUS VARCHAR(28),  @SQL_NO VARCHAR(28), @SQL_MSG VARCHAR(1024), @SQL_OBJ VARCHAR(1024)
		--
		SELECT
			DC.ID, DC.NAME, DC.CODE, DC.DESCRIPTION,
			S.ID AS STATUS_ID, S.NAME AS STATUS, DC.BRANCH_ID, DC.CREATED_BY, DC.CREATED_DT, DC.UPDATED_BY, DC.UPDATED_DT
		FROM REF_SUB_DEPARTMENT_CATEGORY DC
		INNER JOIN REF_STATUS S ON DC.STATUS = S.ID
		WHERE DC.ID = CASE WHEN @IN_ID = 0 THEN DC.ID ELSE @IN_ID END
			AND DC.STATUS = CASE WHEN @IN_STATUS = 0 THEN DC.STATUS ELSE @IN_STATUS END
			--AND COALESCE(CATEGIRY_ID,0) = CASE WHEN @IN_CATEGIRY_ID IS NULL THEN COALESCE(CATEGIRY_ID,0) ELSE @IN_CATEGIRY_ID END
			--AND CODE = CASE WHEN @IN_CODE IS NULL THEN CODE ELSE @IN_CODE END
	END TRY
	--
	BEGIN CATCH
	SET @SQL_NO = ERROR_NUMBER()    
	SET @SQL_MSG = ERROR_MESSAGE()    
	SET @SQL_OBJ = ERROR_PROCEDURE()
	--
	EXEC SP_SYS_ERR_LOG @IN_USER_ID, @IN_BRANCH_ID, @SQL_NO, @SQL_OBJ, @SQL_OBJ, @SQL_MSG, @SQL_STATUS OUTPUT, @SQL_NO OUTPUT, @SQL_MSG OUTPUT
	--
	SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG  AS SQL_MSG, @SQL_NO AS SQL_NO
	--
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SP_REF_SUB_DEPARTMENT_GET]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  PROCEDURE [dbo].[SP_REF_SUB_DEPARTMENT_GET]
	@IN_USER_ID INT,
	@IN_BRANCH_ID INT,
	@IN_ID INT  = 0,
	@IN_STATUS INT = 0 ,
	@IN_DEPARTMENT_ID INT = 0 
AS
SET NOCOUNT ON
BEGIN
	BEGIN TRY
		DECLARE @SQL_STATUS VARCHAR(28),  @SQL_NO VARCHAR(28), @SQL_MSG VARCHAR(1024), @SQL_OBJ VARCHAR(1024)
		--
		SELECT
			D.ID, D.DEPARTMENT_ID, R.NAME AS DEPARTMENT, D.NAME, D.CODE, D.SUB_DEPARTMENT_CATEGORY_ID, DC.NAME AS SUB_DEPARTMENT_CATEGIRY, D.DESCRIPTION,
			S.ID AS STATUS_ID, S.NAME AS STATUS, D.BRANCH_ID, D.CREATED_BY, D.CREATED_DT, D.UPDATED_BY, D.UPDATED_DT
		FROM REF_SUB_DEPARTMENT D WITH(NOLOCK) 
		INNER JOIN REF_DEPARTMENT R WITH(NOLOCK) ON D.DEPARTMENT_ID = R.ID
		INNER JOIN REF_SUB_DEPARTMENT_CATEGORY DC WITH(NOLOCK) ON D.SUB_DEPARTMENT_CATEGORY_ID = DC.ID
		INNER JOIN REF_STATUS S WITH(NOLOCK) ON D.STATUS = S.ID
		WHERE D.ID = CASE WHEN @IN_ID = 0 THEN D.ID ELSE @IN_ID END
			AND D.STATUS = CASE WHEN @IN_STATUS = 0 THEN D.STATUS ELSE @IN_STATUS END
			AND D.DEPARTMENT_ID = CASE WHEN @IN_DEPARTMENT_ID = 0 THEN D.DEPARTMENT_ID ELSE @IN_DEPARTMENT_ID END
			AND D.BRANCH_ID = @IN_BRANCH_ID
	END TRY
	--
	BEGIN CATCH
	SET @SQL_NO = ERROR_NUMBER()    
	SET @SQL_MSG = ERROR_MESSAGE()    
	SET @SQL_OBJ = ERROR_PROCEDURE()
	--
	EXEC SP_SYS_ERR_LOG @IN_USER_ID, @IN_BRANCH_ID, @SQL_NO, @SQL_OBJ, @SQL_OBJ, @SQL_MSG, @SQL_STATUS OUTPUT, @SQL_NO OUTPUT, @SQL_MSG OUTPUT
	--
	SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG  AS SQL_MSG, @SQL_NO AS SQL_NO
	--
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SP_REF_SUB_DEPARTMENT_INSERT_UPDATE]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  PROCEDURE [dbo].[SP_REF_SUB_DEPARTMENT_INSERT_UPDATE]
	@IN_USER_ID INT,
	@IN_BRANCH_ID INT,
	@IN_ID INT,
	@IN_DEPARTMENT_ID INT,
	@IN_CODE NVARCHAR(24),
	@IN_NAME NVARCHAR(256),
	@IN_SUB_DEPARTMENT_CATEGIRY_ID INT,
	@IN_DESCRIPTION NVARCHAR(1024),
	@IN_STATUS INT
AS
SET NOCOUNT ON
BEGIN
	BEGIN TRY
		DECLARE @SQL_STATUS VARCHAR(28),  @SQL_NO VARCHAR(28), @SQL_MSG VARCHAR(1024), @SQL_OBJ VARCHAR(1024)
		SELECT @SQL_OBJ = 'SP_REF_SUB_DEPARTMENT_INSERT_UPDATE', @SQL_STATUS = 'SUCCESS'
		--
		IF NOT EXISTS (SELECT 1 FROM REF_SUB_DEPARTMENT WITH(NOLOCK) WHERE ID = @IN_ID AND BRANCH_ID = @IN_BRANCH_ID)
			BEGIN
				INSERT INTO REF_SUB_DEPARTMENT ( DEPARTMENT_ID, CODE, NAME, SUB_DEPARTMENT_CATEGORY_ID, DESCRIPTION,
					STATUS, BRANCH_ID, CREATED_BY, CREATED_DT, UPDATED_BY, UPDATED_DT)
				VALUES ( @IN_DEPARTMENT_ID, @IN_CODE, @IN_NAME, @IN_SUB_DEPARTMENT_CATEGIRY_ID, @IN_DESCRIPTION,
					@IN_STATUS, @IN_BRANCH_ID, @IN_USER_ID, GETDATE(), @IN_USER_ID, GETDATE())				
				--
				SET @SQL_NO = SCOPE_IDENTITY()
				--
				SET @SQL_MSG = 'INSERTED RECORD SUCCESSFULLY'
			END
		ELSE
			BEGIN
				UPDATE REF_SUB_DEPARTMENT SET
					DEPARTMENT_ID = @IN_DEPARTMENT_ID,
					CODE = @IN_CODE,
					NAME = @IN_NAME,		
					SUB_DEPARTMENT_CATEGORY_ID = @IN_SUB_DEPARTMENT_CATEGIRY_ID,
					DESCRIPTION = @IN_DESCRIPTION,
					STATUS = @IN_STATUS,
					UPDATED_BY = @IN_USER_ID,
					UPDATED_DT = GETDATE()
				WHERE ID = @IN_ID AND BRANCH_ID = @IN_BRANCH_ID
				--
				SET @SQL_NO = @IN_ID
				--
				SET @SQL_MSG = 'UPDATED RECORD SUCCESSFULLY'
			END
		--
		SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG AS SQL_MSG, @SQL_NO AS SQL_NO
	END TRY

	BEGIN CATCH
		SET @SQL_NO = ERROR_NUMBER()    
		SET @SQL_MSG = ERROR_MESSAGE()    
		SET @SQL_OBJ = ERROR_PROCEDURE()
		--
		EXEC SP_SYS_ERR_LOG @IN_USER_ID, @IN_BRANCH_ID, @SQL_NO, @SQL_OBJ, @SQL_OBJ, @SQL_MSG, @SQL_STATUS OUTPUT, @SQL_NO OUTPUT, @SQL_MSG OUTPUT
		SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG  AS SQL_MSG, @SQL_NO AS SQL_NO
		--
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SP_REF_TARIFF_CATEGORY_GET]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_REF_TARIFF_CATEGORY_GET]
	@IN_USER_ID INT,
	@IN_BRANCH_ID INT,
	@IN_ID INT  = 0,
	@IN_STATUS INT = 0 
AS
SET NOCOUNT ON
BEGIN
	BEGIN TRY
		DECLARE @SQL_STATUS VARCHAR(28),  @SQL_NO VARCHAR(28), @SQL_MSG VARCHAR(1024), @SQL_OBJ VARCHAR(1024)
		--
		SELECT
			DC.ID, DC.NAME, DC.CODE, DC.DESCRIPTION,
			S.ID AS STATUS_ID, S.NAME AS STATUS, DC.BRANCH_ID, DC.CREATED_BY, DC.CREATED_DT, DC.UPDATED_BY, DC.UPDATED_DT
		FROM REF_TARIFF_CATEGORY DC WITH(NOLOCK)
		INNER JOIN REF_STATUS S WITH(NOLOCK) ON DC.STATUS = S.ID
		WHERE DC.ID = CASE WHEN @IN_ID = 0 THEN DC.ID ELSE @IN_ID END
			AND DC.STATUS = CASE WHEN @IN_STATUS = 0 THEN DC.STATUS ELSE @IN_STATUS END
			AND DC.BRANCH_ID = @IN_BRANCH_ID
	END TRY
	--
	BEGIN CATCH
	SET @SQL_NO = ERROR_NUMBER()    
	SET @SQL_MSG = ERROR_MESSAGE()    
	SET @SQL_OBJ = ERROR_PROCEDURE()
	--
	EXEC SP_SYS_ERR_LOG @IN_USER_ID, @IN_BRANCH_ID, @SQL_NO, @SQL_OBJ, @SQL_OBJ, @SQL_MSG, @SQL_STATUS OUTPUT, @SQL_NO OUTPUT, @SQL_MSG OUTPUT
	--
	SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG  AS SQL_MSG, @SQL_NO AS SQL_NO
	--
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SP_REF_TARIFF_GET]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE  PROCEDURE [dbo].[SP_REF_TARIFF_GET]
	@IN_USER_ID INT,
	@IN_BRANCH_ID INT,
	@IN_ID INT  = 0,
	@IN_STATUS INT = 0 
AS
SET NOCOUNT ON
BEGIN
	BEGIN TRY
		DECLARE @SQL_STATUS VARCHAR(28),  @SQL_NO VARCHAR(28), @SQL_MSG VARCHAR(1024), @SQL_OBJ VARCHAR(1024)
		--
		SELECT
			D.ID, D.NAME, D.CODE, D.TARIFF_CATEGORY_ID, DC.NAME AS TARIFF_CATEGORY, D.DESCRIPTION,
			S.ID AS STATUS_ID, S.NAME AS STATUS, D.BRANCH_ID, D.CREATED_BY, D.CREATED_DT, D.UPDATED_BY, D.UPDATED_DT
		FROM REF_TARIFF D WITH(NOLOCK)
		INNER JOIN REF_TARIFF_CATEGORY DC WITH(NOLOCK) ON D.TARIFF_CATEGORY_ID = DC.ID
		INNER JOIN REF_STATUS S WITH(NOLOCK) ON D.STATUS = S.ID
		WHERE D.ID = CASE WHEN @IN_ID = 0 THEN D.ID ELSE @IN_ID END
			AND D.STATUS = CASE WHEN @IN_STATUS = 0 THEN D.STATUS ELSE @IN_STATUS END
			AND D.BRANCH_ID = @IN_BRANCH_ID
	END TRY
	--
	BEGIN CATCH
	SET @SQL_NO = ERROR_NUMBER()    
	SET @SQL_MSG = ERROR_MESSAGE()    
	SET @SQL_OBJ = ERROR_PROCEDURE()
	--
	EXEC SP_SYS_ERR_LOG @IN_USER_ID, @IN_BRANCH_ID, @SQL_NO, @SQL_OBJ, @SQL_OBJ, @SQL_MSG, @SQL_STATUS OUTPUT, @SQL_NO OUTPUT, @SQL_MSG OUTPUT
	--
	SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG  AS SQL_MSG, @SQL_NO AS SQL_NO
	--
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SP_REF_TARIFF_INSERT_UPDATE]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_REF_TARIFF_INSERT_UPDATE]
	@IN_USER_ID INT,
	@IN_BRANCH_ID INT,
	@IN_ID INT,
	@IN_CODE NVARCHAR(24),
	@IN_NAME NVARCHAR(256),
	@IN_TARIFF_CATEGORY_ID INT,
	@IN_TARIFF_ID_CLONE INT,
	@IN_DESCRIPTION NVARCHAR(1024),
	@IN_STATUS INT
AS
SET NOCOUNT ON
BEGIN
	BEGIN TRY
		DECLARE @SQL_STATUS VARCHAR(28),  @SQL_NO VARCHAR(28), @SQL_MSG VARCHAR(1024), @SQL_OBJ VARCHAR(1024)
		SELECT @SQL_OBJ = 'SP_REF_TARIFF_INSERT_UPDATE', @SQL_STATUS = 'SUCCESS'
	
		--		
		IF NOT EXISTS (SELECT 1 FROM REF_TARIFF WITH(NOLOCK) WHERE ID = @IN_ID AND BRANCH_ID = @IN_BRANCH_ID)
			BEGIN
				INSERT INTO REF_TARIFF ( CODE, NAME, TARIFF_CATEGORY_ID, DESCRIPTION,
					STATUS, BRANCH_ID, CREATED_BY, CREATED_DT, UPDATED_BY, UPDATED_DT)
				VALUES ( @IN_CODE, @IN_NAME,  @IN_TARIFF_CATEGORY_ID, @IN_DESCRIPTION,
					@IN_STATUS, @IN_BRANCH_ID, @IN_USER_ID, GETDATE(), @IN_USER_ID, GETDATE())
				--
				SET @SQL_NO = SCOPE_IDENTITY()
				--
				-- CLONE SERVICE CHARGE
				INSERT INTO REF_SERVICE_CHARGE
					(TARIFF_ID, SERVICE_ID, SERVICE_CATEGORY_ID, 
					SERVICE_AMOUNT, DR_AMOUNT, H_AMOUNT, OTH_AMOUNT,
					SERVICE_CHARGE, DR_CHARGE, H_CHARGE, OTH_CHARGE, 
					ORG_TAX, ORG_TAX_P, ORG_DISC, ORG_DISC_P,
					DESCRIPTION, STATUS, BRANCH_ID, CREATED_BY, CREATED_DT, UPDATED_BY, UPDATED_DT)
				SELECT 
					@SQL_NO, SERVICE_ID, SERVICE_CATEGORY_ID, 
					SERVICE_AMOUNT, DR_AMOUNT, H_AMOUNT, OTH_AMOUNT,
					SERVICE_CHARGE, DR_CHARGE, H_CHARGE, OTH_CHARGE, 
					ORG_TAX, ORG_TAX_P, ORG_DISC, ORG_DISC_P,				
					@IN_DESCRIPTION, @IN_STATUS, @IN_BRANCH_ID, @IN_USER_ID, GETDATE(), @IN_USER_ID, GETDATE()
				FROM REF_SERVICE_CHARGE WHERE TARIFF_ID = @IN_TARIFF_ID_CLONE AND BRANCH_ID = @IN_BRANCH_ID
				--
				SET @SQL_MSG = 'INSERTED RECORD SUCCESSFULLY'				
			END
		ELSE
			BEGIN
				UPDATE REF_TARIFF SET 
					CODE = @IN_CODE,
					NAME = @IN_NAME,
					TARIFF_CATEGORY_ID = @IN_TARIFF_CATEGORY_ID,
					DESCRIPTION = @IN_DESCRIPTION,
					STATUS = @IN_STATUS,
					UPDATED_BY = @IN_USER_ID,
					UPDATED_DT = GETDATE()
				WHERE ID = @IN_ID AND BRANCH_ID = @IN_BRANCH_ID
				--
				SET @SQL_NO = @IN_ID
				--
				SET @SQL_MSG = 'UPDATED RECORD SUCCESSFULLY'
			END			
		--
		SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG AS SQL_MSG, @SQL_NO AS SQL_NO
	END TRY

	BEGIN CATCH
		SET @SQL_NO = ERROR_NUMBER()    
		SET @SQL_MSG = ERROR_MESSAGE()    
		SET @SQL_OBJ = ERROR_PROCEDURE()
		--
		EXEC SP_SYS_ERR_LOG @IN_USER_ID, @IN_BRANCH_ID, @SQL_NO, @SQL_OBJ, @SQL_OBJ, @SQL_MSG, @SQL_STATUS OUTPUT, @SQL_NO OUTPUT, @SQL_MSG OUTPUT
		SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG  AS SQL_MSG, @SQL_NO AS SQL_NO
		--
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SP_REF_TEMPLATE_CATEGORY_GET]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE    PROCEDURE [dbo].[SP_REF_TEMPLATE_CATEGORY_GET]
	@IN_USER_ID INT,
	@IN_BRANCH_ID INT,
	@IN_ID INT  = 0,
	@IN_STATUS INT = 0 
AS
SET NOCOUNT ON
BEGIN
	BEGIN TRY
		DECLARE @SQL_STATUS VARCHAR(28),  @SQL_NO VARCHAR(28), @SQL_MSG VARCHAR(1024), @SQL_OBJ VARCHAR(1024)
		--
		SELECT
			DC.ID, DC.NAME, DC.CODE, DC.DESCRIPTION,
			S.ID AS STATUS_ID, S.NAME AS STATUS, DC.BRANCH_ID, DC.CREATED_BY, DC.CREATED_DT, DC.UPDATED_BY, DC.UPDATED_DT
		FROM REF_TEMPLATE_CATEGORY DC WITH(NOLOCK)
		INNER JOIN REF_STATUS S WITH(NOLOCK) ON DC.STATUS = S.ID
		WHERE DC.ID = CASE WHEN @IN_ID = 0 THEN DC.ID ELSE @IN_ID END
			AND DC.STATUS = CASE WHEN @IN_STATUS = 0 THEN DC.STATUS ELSE @IN_STATUS END
			AND DC.BRANCH_ID = @IN_BRANCH_ID
	END TRY
	--
	BEGIN CATCH
	SET @SQL_NO = ERROR_NUMBER()    
	SET @SQL_MSG = ERROR_MESSAGE()    
	SET @SQL_OBJ = ERROR_PROCEDURE()
	--
	EXEC SP_SYS_ERR_LOG @IN_USER_ID, @IN_BRANCH_ID, @SQL_NO, @SQL_OBJ, @SQL_OBJ, @SQL_MSG, @SQL_STATUS OUTPUT, @SQL_NO OUTPUT, @SQL_MSG OUTPUT
	--
	SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG  AS SQL_MSG, @SQL_NO AS SQL_NO
	--
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SP_REF_TEMPLATE_GET]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[SP_REF_TEMPLATE_GET]
	@IN_USER_ID INT,
	@IN_BRANCH_ID INT,
	@IN_ID INT  = 0,
	@IN_STATUS INT = 0 ,
	@IN_TEMPLATE_CATEGORY_ID INT = 0 
AS
SET NOCOUNT ON
BEGIN
	BEGIN TRY
		DECLARE @SQL_STATUS VARCHAR(28),  @SQL_NO VARCHAR(28), @SQL_MSG VARCHAR(1024), @SQL_OBJ VARCHAR(1024)
		--
		SELECT
			T.ID, T.NAME, T.CODE, T.TEMPLATE_CATEGORY_ID, TC.NAME AS TEMPLATE_CATEGORY, T.TEMPLATE, T.DESCRIPTION,
			S.ID AS STATUS_ID, S.NAME AS STATUS, T.BRANCH_ID, T.CREATED_BY, T.CREATED_DT, T.UPDATED_BY, T.UPDATED_DT
		FROM REF_TEMPLATE T WITH(NOLOCK)
		INNER JOIN REF_TEMPLATE_CATEGORY TC WITH(NOLOCK) ON T.TEMPLATE_CATEGORY_ID = TC.ID
		INNER JOIN REF_STATUS S WITH(NOLOCK) ON T.STATUS = S.ID
		WHERE T.ID = CASE WHEN @IN_ID = 0 THEN T.ID ELSE @IN_ID END
		AND T.STATUS = CASE WHEN @IN_STATUS = 0 THEN T.STATUS ELSE @IN_STATUS END
		AND T.TEMPLATE_CATEGORY_ID = CASE WHEN @IN_TEMPLATE_CATEGORY_ID = 0 THEN T.TEMPLATE_CATEGORY_ID ELSE @IN_TEMPLATE_CATEGORY_ID END
		AND T.BRANCH_ID = @IN_BRANCH_ID
	END TRY
	--
	BEGIN CATCH
	SET @SQL_NO = ERROR_NUMBER()    
	SET @SQL_MSG = ERROR_MESSAGE()    
	SET @SQL_OBJ = ERROR_PROCEDURE()
	--
	EXEC SP_SYS_ERR_LOG @IN_USER_ID, @IN_BRANCH_ID, @SQL_NO, @SQL_OBJ, @SQL_OBJ, @SQL_MSG, @SQL_STATUS OUTPUT, @SQL_NO OUTPUT, @SQL_MSG OUTPUT
	--
	SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG  AS SQL_MSG, @SQL_NO AS SQL_NO
	--
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SP_REF_TEMPLATE_INSERT_UPDATE]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[SP_REF_TEMPLATE_INSERT_UPDATE]
	@IN_USER_ID INT,
	@IN_BRANCH_ID INT,
	@IN_ID INT,
	@IN_TEMPLATE_CATEGORY_ID INT,
	@IN_CODE NVARCHAR(24),
	@IN_NAME NVARCHAR(256),
	@IN_TEMPLATE NVARCHAR(MAX),
	@IN_DESCRIPTION NVARCHAR(1024),
	@IN_STATUS INT
AS
SET NOCOUNT ON
BEGIN
	BEGIN TRY
		DECLARE @SQL_STATUS VARCHAR(28),  @SQL_NO VARCHAR(28), @SQL_MSG VARCHAR(1024), @SQL_OBJ VARCHAR(1024)
		SELECT @SQL_OBJ = 'SP_REF_TEMPLATE_INSERT_UPDATE', @SQL_STATUS = 'SUCCESS'
		--
		IF NOT EXISTS (SELECT 1 FROM REF_TEMPLATE WITH(NOLOCK) WHERE ID = @IN_ID AND BRANCH_ID = @IN_BRANCH_ID)
			BEGIN
				INSERT INTO REF_TEMPLATE ( CODE, NAME, TEMPLATE_CATEGORY_ID,  TEMPLATE, DESCRIPTION,
					STATUS, BRANCH_ID, CREATED_BY, CREATED_DT, UPDATED_BY, UPDATED_DT)
				VALUES ( @IN_CODE, @IN_NAME, @IN_TEMPLATE_CATEGORY_ID, @IN_TEMPLATE, @IN_DESCRIPTION,
					@IN_STATUS, @IN_BRANCH_ID, @IN_USER_ID, GETDATE(), @IN_USER_ID, GETDATE())
				--
				SET @SQL_NO = SCOPE_IDENTITY()
				--
				SET @SQL_MSG = 'INSERTED RECORD SUCCESSFULLY'
			END
		ELSE
			BEGIN
				UPDATE REF_TEMPLATE SET 
					TEMPLATE_CATEGORY_ID = @IN_TEMPLATE_CATEGORY_ID,
					CODE = @IN_CODE,
					NAME = @IN_NAME,		
					TEMPLATE = @IN_TEMPLATE,
					DESCRIPTION = @IN_DESCRIPTION,
					STATUS = @IN_STATUS,
					UPDATED_BY = @IN_USER_ID,
					UPDATED_DT = GETDATE()
				WHERE ID = @IN_ID AND BRANCH_ID = @IN_BRANCH_ID
				--
				SET @SQL_NO = @IN_ID
				--
				SET @SQL_MSG = 'UPDATED RECORD SUCCESSFULLY'
			END
		--
		SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG AS SQL_MSG, @SQL_NO AS SQL_NO
	END TRY

	BEGIN CATCH
		SET @SQL_NO = ERROR_NUMBER()    
		SET @SQL_MSG = ERROR_MESSAGE()    
		SET @SQL_OBJ = ERROR_PROCEDURE()
		--
		EXEC SP_SYS_ERR_LOG @IN_USER_ID, @IN_BRANCH_ID, @SQL_NO, @SQL_OBJ, @SQL_OBJ, @SQL_MSG, @SQL_STATUS OUTPUT, @SQL_NO OUTPUT, @SQL_MSG OUTPUT
		SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG  AS SQL_MSG, @SQL_NO AS SQL_NO
		--
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SP_REF_WARD_CATEGORY_GET]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[SP_REF_WARD_CATEGORY_GET]
	@IN_USER_ID INT,
	@IN_BRANCH_ID INT,
	@IN_ID INT  = 0,
	@IN_STATUS INT = 0 
AS
BEGIN
	BEGIN TRY
		DECLARE @SQL_STATUS VARCHAR(28),  @SQL_NO VARCHAR(28), @SQL_MSG VARCHAR(1024), @SQL_OBJ VARCHAR(1024)
		--
		SELECT
			DC.ID, DC.NAME, DC.CODE, DC.DESCRIPTION,
			S.ID AS STATUS_ID, S.NAME AS STATUS, DC.BRANCH_ID, DC.CREATED_BY, DC.CREATED_DT, DC.UPDATED_BY, DC.UPDATED_DT
		FROM REF_WARD_CATEGORY DC
		INNER JOIN REF_STATUS S ON DC.STATUS = S.ID
		WHERE DC.ID = CASE WHEN @IN_ID = 0 THEN DC.ID ELSE @IN_ID END
			AND DC.STATUS = CASE WHEN @IN_STATUS = 0 THEN DC.STATUS ELSE @IN_STATUS END
			--AND COALESCE(CATEGIRY_ID,0) = CASE WHEN @IN_CATEGIRY_ID IS NULL THEN COALESCE(CATEGIRY_ID,0) ELSE @IN_CATEGIRY_ID END
			--AND CODE = CASE WHEN @IN_CODE IS NULL THEN CODE ELSE @IN_CODE END
	END TRY
	--
	BEGIN CATCH
	SET @SQL_NO = ERROR_NUMBER()    
	SET @SQL_MSG = ERROR_MESSAGE()    
	SET @SQL_OBJ = ERROR_PROCEDURE()
	--
	EXEC SP_SYS_ERR_LOG @IN_USER_ID, @IN_BRANCH_ID, @SQL_NO, @SQL_OBJ, @SQL_OBJ, @SQL_MSG, @SQL_STATUS OUTPUT, @SQL_NO OUTPUT, @SQL_MSG OUTPUT
	--
	SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG  AS SQL_MSG, @SQL_NO AS SQL_NO
	--
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SP_REF_WARD_GET]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[SP_REF_WARD_GET]
	@IN_USER_ID INT,
	@IN_BRANCH_ID INT,
	@IN_ID INT  = 0,
	@IN_STATUS INT = 0 
AS
SET NOCOUNT ON
BEGIN
	BEGIN TRY
		DECLARE @SQL_STATUS VARCHAR(28),  @SQL_NO VARCHAR(28), @SQL_MSG VARCHAR(1024), @SQL_OBJ VARCHAR(1024)
		--
		SELECT
			D.ID, D.NAME, D.CODE, D.WARD_CATEGORY_ID, WC.NAME AS WARD_CATEGORY, D.WARD_INCHARGE, D.PHONE, D.PHONE2, D.DESCRIPTION,
			S.ID AS STATUS_ID, S.NAME AS STATUS, D.BRANCH_ID, D.CREATED_BY, D.CREATED_DT, D.UPDATED_BY, D.UPDATED_DT
		FROM REF_WARD D WITH(NOLOCK)
		INNER JOIN REF_WARD_CATEGORY WC WITH(NOLOCK) ON D.WARD_CATEGORY_ID = WC.ID
		INNER JOIN REF_STATUS S WITH(NOLOCK) ON D.STATUS = S.ID
		WHERE D.ID = CASE WHEN @IN_ID = 0 THEN D.ID ELSE @IN_ID END
			AND D.STATUS = CASE WHEN @IN_STATUS = 0 THEN D.STATUS ELSE @IN_STATUS END
			AND D.BRANCH_ID = @IN_BRANCH_ID			
	END TRY
	--
	BEGIN CATCH
	SET @SQL_NO = ERROR_NUMBER()    
	SET @SQL_MSG = ERROR_MESSAGE()    
	SET @SQL_OBJ = ERROR_PROCEDURE()
	--
	EXEC SP_SYS_ERR_LOG @IN_USER_ID, @IN_BRANCH_ID, @SQL_NO, @SQL_OBJ, @SQL_OBJ, @SQL_MSG, @SQL_STATUS OUTPUT, @SQL_NO OUTPUT, @SQL_MSG OUTPUT
	--
	SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG  AS SQL_MSG, @SQL_NO AS SQL_NO
	--
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SP_REF_WARD_INSERT_UPDATE]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE    PROCEDURE [dbo].[SP_REF_WARD_INSERT_UPDATE]
	@IN_USER_ID INT,
	@IN_BRANCH_ID INT,
	@IN_ID INT,
	@IN_CODE NVARCHAR(24),
	@IN_NAME NVARCHAR(256),
	@IN_WARD_CATEGORY_ID INT,
	@IN_WARD_INCHARGE NVARCHAR(256),
	@IN_PHONE NVARCHAR(256),
	@IN_PHONE2 NVARCHAR(256),
	@IN_DESCRIPTION NVARCHAR(1024),
	@IN_STATUS INT
AS
SET NOCOUNT ON
BEGIN
	BEGIN TRY
		DECLARE @SQL_STATUS VARCHAR(28),  @SQL_NO VARCHAR(28), @SQL_MSG VARCHAR(1024), @SQL_OBJ VARCHAR(1024)
		SELECT @SQL_OBJ = 'PKG_REF_WARD_INSERT_UPDATE', @SQL_STATUS = 'SUCCESS'		
		--
		IF NOT EXISTS (SELECT 1 FROM REF_WARD WITH(NOLOCK) WHERE ID = @IN_ID AND BRANCH_ID = @IN_BRANCH_ID)
			BEGIN
				INSERT INTO REF_WARD ( CODE, NAME, WARD_CATEGORY_ID, WARD_INCHARGE, PHONE, PHONE2,
					DESCRIPTION, STATUS, BRANCH_ID, CREATED_BY, CREATED_DT, UPDATED_BY, UPDATED_DT)
				VALUES ( @IN_CODE, @IN_NAME,  @IN_WARD_CATEGORY_ID,  @IN_WARD_INCHARGE, @IN_PHONE, @IN_PHONE2, 
					@IN_DESCRIPTION, @IN_STATUS, @IN_BRANCH_ID, @IN_USER_ID, GETDATE(), @IN_USER_ID, GETDATE())
				--
				SET @SQL_NO = SCOPE_IDENTITY()
				--
				SET @SQL_MSG = 'INSERTED RECORD SUCCESSFULLY'
			END
		ELSE
			BEGIN
				UPDATE REF_WARD SET 
					CODE = @IN_CODE,
					NAME = @IN_NAME,
					WARD_CATEGORY_ID = @IN_WARD_CATEGORY_ID,
					WARD_INCHARGE = @IN_WARD_INCHARGE,
					PHONE = @IN_PHONE,
					PHONE2 = @IN_PHONE2,
					DESCRIPTION = @IN_DESCRIPTION,
					STATUS = @IN_STATUS,
					UPDATED_BY = @IN_USER_ID,
					UPDATED_DT = GETDATE()
				WHERE ID = @IN_ID AND BRANCH_ID = @IN_BRANCH_ID
				--
				SET @SQL_NO = @IN_ID
				--
				SET @SQL_MSG = 'UPDATED RECORD SUCCESSFULLY'
			END
		--
		SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG AS SQL_MSG, @SQL_NO AS SQL_NO
	END TRY

	BEGIN CATCH
		SET @SQL_NO = ERROR_NUMBER()    
		SET @SQL_MSG = ERROR_MESSAGE()    
		SET @SQL_OBJ = ERROR_PROCEDURE()
		--
		EXEC SP_SYS_ERR_LOG @IN_USER_ID, @IN_BRANCH_ID, @SQL_NO, @SQL_OBJ, @SQL_OBJ, @SQL_MSG, @SQL_STATUS OUTPUT, @SQL_NO OUTPUT, @SQL_MSG OUTPUT
		SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG  AS SQL_MSG, @SQL_NO AS SQL_NO
		--
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SP_SEC_LOGIN_GET]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[SP_SEC_LOGIN_GET]
	@IN_LOGIN_ID VARCHAR(100),
	@IN_PASSWORD VARCHAR(100)
AS
SET NOCOUNT ON
BEGIN    
	BEGIN TRANSACTION
	BEGIN TRY 
		DECLARE @SQL_STATUS VARCHAR(28),  @SQL_NO VARCHAR(28), @SQL_MSG VARCHAR(1024), @SQL_OBJ VARCHAR(1024)   
		SELECT @SQL_OBJ = 'SP_SEC_LOGIN_GET' 
		--
		DECLARE @ID INT = 0
		DECLARE @NAME VARCHAR(256) = ''
		DECLARE @BRANCH_ID INT = 0
		DECLARE @LOGIN_STATUS VARCHAR(1024)
		--
		IF EXISTS (SELECT 1 FROM SEC_USER WITH(NOLOCK) WHERE LOGIN_ID = @IN_LOGIN_ID AND PASSWORD = @IN_PASSWORD)			
			BEGIN
				SELECT @ID = ID, @LOGIN_STATUS = 'VALID USER LOGIN' FROM SEC_USER WITH(NOLOCK) WHERE LOGIN_ID = @IN_LOGIN_ID AND PASSWORD = @IN_PASSWORD
				--
				SELECT 
					@ID = U.ID, @BRANCH_ID = U.BRANCH_ID, @NAME = E.NAME 
				FROM SEC_USER U WITH(NOLOCK)
				INNER JOIN REF_EMPLOYEE E WITH(NOLOCK) ON U.EMPLOYEE_ID = E.ID 
				WHERE U.ID = @ID
				--			
			END
		ELSE
			BEGIN
				SELECT @ID = 0, @NAME = 'INVALID USER', @LOGIN_STATUS = 'INVALID USER ID : ' + @IN_LOGIN_ID + ' AND PASSWORD : ' + @IN_PASSWORD 
			END
		EXEC SP_SYS_AUDIT_LOG @ID, @BRANCH_ID, 0, 'SP_SEC_LOGIN_GET', 'LOGIN', @LOGIN_STATUS, 
			@SQL_STATUS = @SQL_STATUS OUTPUT, @SQL_NO = @SQL_NO OUTPUT, @SQL_MSG = @SQL_MSG OUTPUT

		SELECT @ID AS ID, @NAME AS NAME , @BRANCH_ID AS BRANCH_ID
		-- SELECT @SQL_STATUS AS SQL_STATUS, @SQL_NO AS SQL_NO, @LOGIN_STATUS AS SQL_MSG -- @SQL_MSG  AS SQL_MSG 
	COMMIT TRANSACTION	
	END TRY
    
	BEGIN CATCH 		
		ROLLBACK   
		SET @SQL_NO = ERROR_NUMBER()    
		SET @SQL_MSG = ERROR_MESSAGE()    
		SET @SQL_OBJ = ERROR_PROCEDURE() 
		--
		EXEC SP_SYS_ERR_LOG 0, 0, @SQL_NO, @SQL_OBJ, @SQL_OBJ, @SQL_MSG, @SQL_STATUS OUTPUT, @SQL_NO OUTPUT, @SQL_MSG OUTPUT
		SELECT @SQL_STATUS AS SQL_STATUS, @SQL_NO AS SQL_NO, @SQL_MSG  AS SQL_MSG 	
	END CATCH    
END
GO
/****** Object:  StoredProcedure [dbo].[SP_SEC_MENU]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[SP_SEC_MENU] 
	@IN_USER_ID INT,
	@IN_BRANCH_ID INT
AS     
BEGIN    
	BEGIN TRY 
		DECLARE @SQL_STATUS VARCHAR(28),  @SQL_NO VARCHAR(28), @SQL_MSG VARCHAR(1024), @SQL_OBJ VARCHAR(1024)
		--
		DECLARE @TBL_MENU TABLE(ID INT IDENTITY(1,1), MENU VARCHAR(MAX))
		DECLARE @STR_L1 VARCHAR(1000) 
		DECLARE @STR_L2 VARCHAR(MAX) 
		DECLARE @STR_MENU VARCHAR(MAX)

		DECLARE @MENU_ID_L1 INT
		DECLARE @MENU_ID_L2 INT 
		DECLARE CURSOR_L1 CURSOR STATIC FOR
		--
		SELECT ID FROM SYS_MENU WHERE PARENT_MENU = 0 AND STATUS = 1 ORDER BY MENU_LEVEL
		--
			OPEN CURSOR_L1 IF @@CURSOR_ROWS > 0
			BEGIN
				FETCH CURSOR_L1 INTO @MENU_ID_L1
				WHILE(@@FETCH_STATUS=0)
				BEGIN
				----------------
					SET @STR_MENU = ''
					SET @STR_L1 = ''
					-- MAIN MENU
					PRINT(CONVERT(VARCHAR(10),@MENU_ID_L1) + '----------')
					-----------


SELECT @STR_L1 = ''
/*
'<li><a href="javascript: void(0);">
<i class="'+ CLASS2 +'"></i>
<span>'+ DISPLAY_NAME +'</span> <span class="menu-arrow"></span>
</a>
<ul class="nav-second-level" aria-expanded="false">' 
*/
					FROM SYS_MENU WHERE ID = @MENU_ID_L1
					--
					SET @STR_MENU = @STR_L1
					-----------
					DECLARE CURSOR_L2 CURSOR STATIC FOR
					--
					SELECT ID FROM SYS_MENU WHERE PARENT_MENU = (SELECT MENU_LEVEL FROM SYS_MENU 
					WHERE ID = @MENU_ID_L1 AND PARENT_MENU = 0) 
					AND STATUS = 1 ORDER BY MENU_LEVEL
					--
					OPEN CURSOR_L2 IF @@CURSOR_ROWS > 0
					BEGIN
						FETCH CURSOR_L2 INTO @MENU_ID_L2
						WHILE(@@FETCH_STATUS=0)
						BEGIN
						--
							PRINT(@MENU_ID_L2)
							SET @STR_L2 = ''
SELECT @STR_L2 = 
'<li><a href="'+ URL +'">'+ DISPLAY_NAME +'</a></li>' 
FROM SYS_MENU WHERE ID = @MENU_ID_L2
							--
							SET @STR_MENU = @STR_MENU + @STR_L2
						--
						FETCH CURSOR_L2 INTO @MENU_ID_L2
						END
					END
					CLOSE CURSOR_L2 
					DEALLOCATE CURSOR_L2 
				----------------
				--
				--SELECT @STR_MENU + '</ul></li>'
				INSERT INTO @TBL_MENU VALUES (@STR_MENU)
				--
				FETCH CURSOR_L1 INTO @MENU_ID_L1
				END
			END
			CLOSE CURSOR_L1 
		DEALLOCATE CURSOR_L1 
		--
		SELECT * FROM @TBL_MENU
		
		-- 
	END TRY
    
	BEGIN CATCH 
		SET @SQL_NO = ERROR_NUMBER()    
		SET @SQL_MSG = ERROR_MESSAGE()    
		SET @SQL_OBJ = ERROR_PROCEDURE() 
		--
		EXEC SP_SYS_ERR_LOG @IN_USER_ID, @IN_BRANCH_ID, @SQL_NO, @SQL_OBJ, @SQL_OBJ, @SQL_MSG, @SQL_STATUS OUTPUT, @SQL_NO OUTPUT, @SQL_MSG OUTPUT
		SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG  AS SQL_MSG, @SQL_NO AS SQL_NO

	END CATCH    
END
GO
/****** Object:  StoredProcedure [dbo].[SP_SEC_USER_PERMISSION_GET]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[SP_SEC_USER_PERMISSION_GET]
	@IN_USER_ID INT,
	@IN_BRANCH_ID INT,
	@IN_MENU_ID VARCHAR(100)
AS     
BEGIN    
	BEGIN TRY 
		DECLARE @SQL_STATUS VARCHAR(28),  @SQL_NO VARCHAR(28), @SQL_MSG VARCHAR(1024), @SQL_OBJ VARCHAR(1024)   
		SELECT @SQL_OBJ = 'SP_SEC_USER_PERMISSION_GET'
		--	
		--SELECT 1 AS PERMISSION, 1 AS MENU_ID
	
		IF @IN_USER_ID = 1
			IF @IN_MENU_ID = 1
				SELECT 1 AS PERMISSION, 1 AS MENU_CODE
			ELSE IF @IN_MENU_ID = 2
				SELECT 1 AS PERMISSION, 2 AS MENU_CODE
			ELSE
				SELECT 0 AS PERMISSION ,0 AS MENU_CODE
				--	
		ELSE IF @IN_USER_ID = 2
			IF @IN_MENU_ID = 1
				SELECT 1 AS PERMISSION, 1 AS MENU_CODE
			ELSE
				SELECT 0 AS PERMISSION ,0 AS MENU_CODE

		ELSE IF @IN_USER_ID = 3
			IF @IN_MENU_ID = 2
				SELECT 1 AS PERMISSION, 2 AS MENU_CODE
			ELSE
				SELECT 0 AS PERMISSION ,0 AS MENU_CODE
		ELSE
			SELECT 0 AS PERMISSION ,0 AS MENU_CODE
		--
		
		--SELECT 'SUCCESS' AS SQL_STATUS, 0 AS SQL_NO, 'Success' AS SQL_MSG 
	END TRY
    
	BEGIN CATCH 
	
		SET @SQL_NO = ERROR_NUMBER()    
		SET @SQL_MSG = ERROR_MESSAGE()    
		SET @SQL_OBJ = ERROR_PROCEDURE() 
		--
		EXEC SP_SYS_ERR_LOG @IN_USER_ID, @IN_BRANCH_ID, @SQL_NO, @SQL_OBJ, @SQL_OBJ, @SQL_MSG, @SQL_STATUS OUTPUT, @SQL_NO OUTPUT, @SQL_MSG OUTPUT
		SELECT @SQL_STATUS AS SQL_STATUS, @SQL_NO AS SQL_NO, @SQL_MSG  AS SQL_MSG 	
	END CATCH    
END
GO
/****** Object:  StoredProcedure [dbo].[SP_SYS_AUDIT_LOG]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[SP_SYS_AUDIT_LOG]
	@IN_USER_ID INT,
	@IN_BRANCH_ID INT,
	@IN_AUDIT_NUMBER VARCHAR(256),
	@IN_OBJ_NAME NVARCHAR(1024),
	@IN_AUDIT_TITLE NVARCHAR(256),
	@IN_DESCRIPTION NVARCHAR(1024),
	@SQL_STATUS VARCHAR(28) OUTPUT,
	@SQL_NO VARCHAR(28) OUTPUT,
	@SQL_MSG VARCHAR(1024)  OUTPUT

AS
BEGIN
	BEGIN TRY
		INSERT INTO SYS_AUDIT_LOG (BRANCH_ID, CREATED_BY, CREATED_DT,  AUDIT_NUMBER, OBJ_NAME, AUDIT_TITLE, DESCRIPTION)
		VALUES (@IN_BRANCH_ID, @IN_USER_ID, GETDATE(), @IN_AUDIT_NUMBER, @IN_OBJ_NAME, @IN_AUDIT_TITLE, @IN_DESCRIPTION)
		-- 
		-- DB RETURN VALUES
		SELECT @SQL_STATUS = 'SUCCESS', @SQL_NO = @IN_AUDIT_NUMBER, @SQL_MSG = MSG FROM SYS_MESSAGE 
			WHERE TYPE = 1 -- AND OBJ_NAME = @IN_OBJ_NAME 
		--													
	END TRY
	BEGIN CATCH

    END CATCH	
END
GO
/****** Object:  StoredProcedure [dbo].[SP_SYS_BRANCH_GET]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[SP_SYS_BRANCH_GET]
	@IN_USER_ID INT,
	@IN_BRANCH_ID INT
AS
SET NOCOUNT ON
BEGIN
	BEGIN TRY
		DECLARE @SQL_STATUS VARCHAR(28),  @SQL_NO VARCHAR(28), @SQL_MSG VARCHAR(1024), @SQL_OBJ VARCHAR(1024)
		--
		SELECT 
			C.ID AS COMPANY_ID, C.NAME AS COMPANY_NAME, 
			B.ID AS BRANCH_ID, B.CODE AS BRANCH_CODE, 
			B.NAME AS BRANCH_NAME, 
			B.ADDRESS, B.EMAIL, B.PHONE, 
			B.PHONE2, B.DESCRIPTION, 
			S.ID AS STATUS_ID, S.NAME AS STATUS, 
			B.UPDATED_BY, E.NAME AS UPDATE_BY_NAME, B.UPDATED_DT,
			RPT_TEMPLATE AS RPT_HEADER,
			--Convert(varchar(20),GETDATE(),100) AS RPT_TIME
			FORMAT(GETDATE(), 'dd/MM/yyyy hh:mm tt') AS RPT_TIME
		FROM SYS_CLIENT C WITH(NOLOCK)
		INNER JOIN SYS_BRANCH B WITH(NOLOCK) ON B.CLIENT_ID = C.ID
		INNER JOIN REF_STATUS S WITH(NOLOCK) ON B.STATUS = S.ID
		INNER JOIN SEC_USER U WITH(NOLOCK) ON U.ID = B.UPDATED_BY
		INNER JOIN REF_EMPLOYEE E WITH(NOLOCK) ON E.ID = U.EMPLOYEE_ID
		WHERE B.ID = @IN_BRANCH_ID			
	END TRY
	--
	BEGIN CATCH
	SET @SQL_NO = ERROR_NUMBER()    
	SET @SQL_MSG = ERROR_MESSAGE()    
	SET @SQL_OBJ = ERROR_PROCEDURE()
	--
	EXEC SP_SYS_ERR_LOG @IN_USER_ID, @IN_BRANCH_ID, @SQL_NO, @SQL_OBJ, @SQL_OBJ, @SQL_MSG, @SQL_STATUS OUTPUT, @SQL_NO OUTPUT, @SQL_MSG OUTPUT
	--
	SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG  AS SQL_MSG, @SQL_NO AS SQL_NO
	--
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SP_SYS_BRANCH_RPT_GET]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[SP_SYS_BRANCH_RPT_GET]
	@IN_USER_ID INT,
	@IN_BRANCH_ID INT
AS
SET NOCOUNT ON
BEGIN
	BEGIN TRY
		DECLARE @SQL_STATUS VARCHAR(28),  @SQL_NO VARCHAR(28), @SQL_MSG VARCHAR(1024), @SQL_OBJ VARCHAR(1024)
		--
		SELECT 
			C.ID AS COMPANY_ID, C.NAME AS COMPANY_NAME, 
			B.ID AS BRANCH_ID, B.CODE AS BRANCH_CODE, 
			B.NAME AS BRANCH_NAME, 
			B.ADDRESS, B.EMAIL, B.PHONE, 
			B.PHONE2, B.DESCRIPTION, 
			S.ID AS STATUS_ID, S.NAME AS STATUS, 
			B.UPDATED_BY, E.NAME AS UPDATE_BY_NAME, B.UPDATED_DT,
			RPT_TEMPLATE AS RPT_HEADER,
			--Convert(varchar(20),GETDATE(),100) AS RPT_TIME
			FORMAT(GETDATE(), 'dd/MM/yyyy hh:mm tt') AS RPT_TIME
		FROM SYS_CLIENT C WITH(NOLOCK) 
		INNER JOIN SYS_BRANCH AS B WITH(NOLOCK) ON B.CLIENT_ID = C.ID
		INNER JOIN REF_STATUS S WITH(NOLOCK) ON B.STATUS = S.ID
		INNER JOIN SEC_USER U WITH(NOLOCK) ON U.ID = B.UPDATED_BY
		INNER JOIN REF_EMPLOYEE E WITH(NOLOCK) ON E.ID = U.EMPLOYEE_ID
		WHERE B.ID = @IN_BRANCH_ID 
			
	END TRY
	--
	BEGIN CATCH
	SET @SQL_NO = ERROR_NUMBER()    
	SET @SQL_MSG = ERROR_MESSAGE()    
	SET @SQL_OBJ = ERROR_PROCEDURE()
	--
	EXEC SP_SYS_ERR_LOG @IN_USER_ID, @IN_BRANCH_ID, @SQL_NO, @SQL_OBJ, @SQL_OBJ, @SQL_MSG, @SQL_STATUS OUTPUT, @SQL_NO OUTPUT, @SQL_MSG OUTPUT
	--
	SELECT @SQL_STATUS AS SQL_STATUS, @SQL_MSG  AS SQL_MSG, @SQL_NO AS SQL_NO
	--
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SP_SYS_ERR_LOG]    Script Date: 14/09/2023 05:32:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROC [dbo].[SP_SYS_ERR_LOG]
	@IN_USER_ID INT,
	@IN_BRANCH_ID INT,
	@IN_ERR_NUMBER VARCHAR(256),
	@IN_OBJ_NAME NVARCHAR(1024),
	@IN_ERR_TITLE VARCHAR(256),
	@IN_DESCRIPTION NVARCHAR(1024),
	@SQL_STATUS VARCHAR(28) OUTPUT,
	@SQL_NO VARCHAR(28) OUTPUT,
	@SQL_MSG VARCHAR(1024)  OUTPUT

AS
BEGIN
	BEGIN TRY
		INSERT INTO SYS_ERR_LOG (BRANCH_ID, CREATED_BY, CREATED_DT, ERR_NUMBER, OBJ_NAME, ERR_TITLE, DESCRIPTION)
		VALUES (@IN_BRANCH_ID, @IN_USER_ID, GETDATE(), @IN_ERR_NUMBER, @IN_OBJ_NAME, @IN_ERR_TITLE, @IN_DESCRIPTION)

		-- DB RETURN VALUES
		SET @SQL_NO = SCOPE_IDENTITY()
		--
		SELECT @SQL_STATUS = 'ERROR', @SQL_MSG = MSG FROM SYS_MESSAGE 
			WHERE TYPE = 2 -- AND OBJ_NAME = @IN_OBJ_NAME 

	END TRY
	BEGIN CATCH

    END CATCH	
END
GO
